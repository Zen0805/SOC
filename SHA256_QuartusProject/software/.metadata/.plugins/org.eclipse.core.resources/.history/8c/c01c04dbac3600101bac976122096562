#include <stdio.h>
#include <stdint.h>
#include "system.h"
#include "io.h"
#include "input.h"

#define SHA256_CONTROL_REG_OFFSET (0x00 * 4)
#define SHA256_DATA_IN_REG_OFFSET (0x01 * 4)
#define SHA256_STATUS_REG_OFFSET (0x1A * 4)
#define SHA256_HASH_OUT_0_OFFSET (0x12 * 4)

#define SHA256_CONTROL_START_BIT 0x00000001

uint32_t status, control;
uint32_t calculated_hash[8];

void reset_control_reg()
{
    // Reset control register
    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000000);
    control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);
    printf("Control_reg khi vua bat he thong: 0x%08lx\n", (unsigned long)control);
}

void start_hashing_printf(const uint32_t *block){
        // Doc control, status
    control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);
    status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);

    printf("control: 0x%08lx\n", (unsigned long)control);
    printf("status: 0x%08lx\n", (unsigned long)status);

    // Load 16 word
    int i = 0;
    for (i = 0; i < 16; i++)
    {
        IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_DATA_IN_REG_OFFSET + (i * 4), block[i]);
    }
    printf("Nap xong 16 word.\n");

    while (1)
    {
        status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
        if (status == 0x00000001)
        {
            printf("IP da tinh xong, DONE = 1\n");
            break;
        }
    }

    // Cap nhat thanh ghi control truoc khi in ket qua, chuan bi nap de chay input moi hoac block moi
    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000010);
    control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);
    printf("control: 0x%08lx\n", (unsigned long)control);

    // Print ket qua
    i = 0;
    for (i = 0; i < 8; i++)
    {
        calculated_hash[i] = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_HASH_OUT_0_OFFSET + (i * 4));
    }

    printf("Ket qua hash: ");
    i = 0;
    for (i = 0; i < 8; i++)
    {
        printf("%08lx", (unsigned long)calculated_hash[i]);
    }
    printf("\n");
}

void start_new_block(const uint32_t *block, int input_num, int block_num)
{
    if(block_num == 1){
        printf("\n---------New Input: %d---------\n", input_num);
        printf("\n--- Block 1 ---\n");
        // Start IP + Reset output register
        // 01 : Start new input
        IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000001);
        start_hashing_printf(block);
    }
    else{
        printf("\n--- Block %d ---\n", block_num);
        // Start IP + Not reset output register
        IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000011);
        start_hashing_printf(block);
    }

}

int main()
{

    printf("Nios II SHA-256 Test\n");
	printf("IP Base Address: 0x%08lx\n", (unsigned long)SHA_256_IP_0_BASE);

    reset_control_reg();

    int a = 0;
    for (a = 0; a < NUM_INPUTS; a++){
        switch (a + 1)
        {
        case 1:
            // Input 1: 1 block
            start_new_block(input1_blocks[1], 1, 1);
            break;

        case 2:
            // Input 2: 2 blocks
            start_new_block(input2_blocks[1], 2, 1);
            start_new_block(input2_blocks[1], 2, 2);
            break;
        case 3:
            // Input 3: 2 blocks
            start_new_block(input3_blocks[1], 3, 1);
            start_new_block(input3_blocks[1], 3, 2);
            break;
        case 4:
            // Input 4: 1 block
            start_new_block(input4_blocks[1], 4, 1);
            break;
        case 5:
            // Input 5: 1 block
            start_new_block(input5_blocks[1], 5, 1);
            break;
        case 6:
            // Input 6: 2 blocks
            start_new_block(input6_blocks[1], 6, 1);
            start_new_block(input6_blocks[1], 6, 2);
            break;
        case 7:
            // Input 7: 1 block
            start_new_block(input7_blocks[1], 7, 1);
            break;
        case 8:
            // Input 8: 1 block
            start_new_block(input8_blocks[1], 8, 1);
            break;
        case 9:
            // Input 9: 3 blocks
            start_new_block(input9_blocks[1], 9, 1);
            start_new_block(input9_blocks[1], 9, 2);
            start_new_block(input9_blocks[1], 9, 3);
            break;
        case 10:
            // Input 10: 1 block
            start_new_block(input10_blocks[1], 10, 1);
            break;
        
        default:
            break;
        }
    }
    return 0;
}
