#include <stdio.h>
#include <stdint.h>
#include "system.h"
#include "io.h"
#include "input.h"


#define SHA256_CONTROL_REG_OFFSET    (0x00 * 4)
#define SHA256_DATA_IN_REG_OFFSET    (0x01 * 4)
#define SHA256_STATUS_REG_OFFSET     (0x1A * 4)
#define SHA256_HASH_OUT_0_OFFSET     (0x12 * 4)


#define SHA256_CONTROL_START_BIT     0x00000001

int main() {

    

    const uint32_t input_block_1[16] = {
        0x61646277, // 0x01
        0x70696662, // 0x02
        0x61776670, // 0x03
        0x69616662, // 0x04
        0x7366736B, // 0x05
        0x61666A62, // 0x06
        0x77666961, // 0x07
        0x6A776276, // 0x08
        0x66617078, // 0x09
        0x62616677, // 0x0A
        0x66616A69, // 0x0B
        0x62667769, // 0x0C
        0x66626161, // 0x0D
        0x6469776A, // 0x0E
        0x6277696F, // 0x0F
        0x66627561  // 0x10
    };


    const uint32_t input_block_2[16] = {
        
        0x73706f69, 0x67626167, 0x69707767, 0x62617767,
        0x61800000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000288

    };



    uint32_t status, control;

    uint32_t calculated_hash[8];

    printf("Nios II SHA-256 Test\n");
    printf("IP Base Address: 0x%08lx\n", (unsigned long)SHA_256_IP_0_BASE);

    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000000);
    control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);
    printf("control luc moi bat he thong: 0x%08lx\n", (unsigned long)control);

    //START IP
    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000001);

    //doc 2 thanh ghi control, status
    control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);
    status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);

    printf("\n--- Block 1 ---\n");

    //doc ket qua neu status la done
    printf("control sau khi duoc start: 0x%08lx\n", (unsigned long)control);
    printf("status:  0x%08lx\n", (unsigned long)status);

    //nap 16 word
    int i = 0;
    for (i = 0; i < 16; i++) {
          IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_DATA_IN_REG_OFFSET + (i * 4), input2_blocks[1][i]);
      }
    printf("Nap xong 16 word block 1.\n");

    while (1) {
    	status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
    	if (status == 0x00000001) {
    		printf("IP da tinh xong, DONE = 1\n");
    		break;
    	}
    }

    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000010);
    control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);

    printf("control: 0x%08lx\n", (unsigned long)control);

    //print ket qua

    i = 0;
    for (i = 0; i < 8; i++) {
		calculated_hash[i] = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_HASH_OUT_0_OFFSET + (i * 4));
	}

    printf("Ket qua hash: ");

	for (i = 0; i < 8; i++) {
		printf("%08lx", (unsigned long)calculated_hash[i]);
	}
	printf("\n");



     //Bat dau block 2
     printf("\n--- Block 2 ---\n");

     IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000011);

     control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);

     printf("control block tiep theo: 0x%08lx\n", (unsigned long)control);  //sau nay sua thanh neu la input thi sua text lai

     i = 0;
     for (i = 0; i < 16; i++) {
           IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_DATA_IN_REG_OFFSET + (i * 4), input2_blocks[2][i]);
       }
     printf("Nap xong 16 word block 2.\n");



     while (1) {
     	status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
     	if (status == 0x00000001) {
     		printf("IP da tinh xong, DONE = 1\n");
     		break;
     	}
     }


     control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);

     printf("control: 0x%08lx\n", (unsigned long)control);



     i = 0;
     for (i = 0; i < 8; i++) {
	 	calculated_hash[i] = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_HASH_OUT_0_OFFSET + (i * 4));
	 }

     printf("Ket qua hash: ");

	 for (i = 0; i < 8; i++) {
	 	printf("%08lx", (unsigned long)calculated_hash[i]);
	 }
	 printf("\n");
    return 0;
}
