#ifndef INPUT_H
#define INPUT_H

#include <stdint.h>


#define NUM_INPUTS 10



// Input 1: 1 block
// String : UIT
// 55495480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018
// Hash out: 3d97c75313dda33e8c25ab2395bc6aef19b4c43d7d1a0dc881f20d5598b93d5c
const uint32_t input1_blocks1[16] = {
		// Block 1
        0x55495480, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000018
};

// Input 2: 2 blocks
// String : This is a test message that will definitely span two SHA-256 blocks after padding
// 5468697320697320612074657374206d65737361676520746861742077696c6c20646566696e6974656c79207370616e2074776f205348412d32353620626c6f
// 636b732061667465722070616464696e678000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000288
// Hash out: 0059136c285cb12f5a8ca6a8ff46adb66715a839ebe05a587549c5c5a568b067
const uint32_t input2_blocks1[16] = {
		// Block 1
        0x54686973, 0x20697320, 0x61207465, 0x7374206d,
        0x65737361, 0x67652074, 0x68617420, 0x77696c6c,
        0x20646566, 0x696e6974, 0x656c7920, 0x7370616e,
        0x2074776f, 0x20534841, 0x2d323536, 0x20626c6f
};

const uint32_t input2_blocks2[16] = {
		// Block 2
        0x636b7320, 0x61667465, 0x72207061, 0x6464696e,
        0x67800000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000288
};

// Input 3: 2 blocks
// String : aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
// 61616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616180000000
// 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0
// Hash out: 11ee391211c6256460b6ed375957fadd8061cafbb31daf967db875aebd5aaad4
const uint32_t input3_blocks[2][16] = {
    {   // Block 1
        0x61616161, 0x61616161, 0x61616161, 0x61616161,
        0x61616161, 0x61616161, 0x61616161, 0x61616161,
        0x61616161, 0x61616161, 0x61616161, 0x61616161,
        0x61616161, 0x61616161, 0x61616161, 0x80000000,
    },
    {   // Block 2
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x000001e0
    }
};

// Input 4: 1 blocks
// String : Hello World
// 48656c6c6f20576f726c648000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000058
// Hash out: a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e
const uint32_t input4_blocks[1][16] = {
    {   // Block 1
        0x48656c6c, 0x6f20576f, 0x726c6480, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000058
    }
};


// Input 5: 1 blocks
// String : SHA-256 is a cryptographic hash function
// 5348412d32353620697320612063727970746f6772617068696320686173682066756e6374696f6e800000000000000000000000000000000000000000000140
// Hash out: d817fa789be66239ac8813423f05ebf7eee16945e68d66e3dc99d8b81cbc4185
const uint32_t input5_blocks[1][16] = {
    {   // Block 1
        0x5348412d, 0x32353620, 0x69732061, 0x20637279,
        0x70746f67, 0x72617068, 0x69632068, 0x61736820,
        0x66756e63, 0x74696f6e, 0x80000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000140
    }
};

// Input 6: 2 blocks
// String : SHA-256 is a cryptographic hash function that produces a fixed-size output
// 5348412d32353620697320612063727970746f6772617068696320686173682066756e6374696f6e20746861742070726f647563657320612066697865642d73
// 697a65206f7574707574800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000250
// Hash out: 701c35682bd3271c99caf15ce24a3751beb04668fd6b8a9a6f40db860fd9a692
const uint32_t input6_blocks[2][16] = {
    {   // Block 1
        0x5348412d, 0x32353620, 0x69732061, 0x20637279,
        0x70746f67, 0x72617068, 0x69632068, 0x61736820,
        0x66756e63, 0x74696f6e, 0x20746861, 0x74207072,
        0x6f647563, 0x65732061, 0x20666978, 0x65642d73,
    },
    {   // Block 2
        0x697a6520, 0x6f757470, 0x75748000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000250
    }
};

// Input 7: 1 blocks
// String : System on Chip
// 53797374656d206f6e20436869708000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070
// Hash out: 41ac7f57ebf2a68aa436139541afa374bbb26eb1ec7996e3c084a82a6fb6fc35
const uint32_t input7_blocks[1][16] = {
    {   // Block 1
        0x53797374, 0x656d206f, 0x6e204368, 0x69708000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000070
    }
};

// Input 8: 1 blocks
// String : Altera DE2
// 416c7465726120444532800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050
// Hash out: a70e380f298d42416a4c64ed37be4fbaef9dc3664bc0555a615a92f586521dc9
const uint32_t input8_blocks[1][16] = {
    {   // Block 1
        0x416c7465, 0x72612044, 0x45328000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000050
    }
};

// Input 9: 3 blocks
// String : Cryptography is the practice and study of techniques for secure communication in the presence of third parties called adversaries
// 43727970746f6772617068792069732074686520707261637469636520616e64207374756479206f6620746563686e697175657320666f722073656375726520
// 636f6d6d756e69636174696f6e20696e207468652070726573656e6365206f6620746869726420706172746965732063616c6c65642061647665727361726965
// 73800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000408
//Hash out: 52029160ca9852f88bf4225dc25e064f058399ebd4ff2df266b07d2d7aad2fdb

const uint32_t input9_blocks[3][16] = {
    {   // Block 1
        0x43727970, 0x746f6772, 0x61706879, 0x20697320,
        0x74686520, 0x70726163, 0x74696365, 0x20616e64,
        0x20737475, 0x6479206f, 0x66207465, 0x63686e69,
        0x71756573, 0x20666f72, 0x20736563, 0x75726520,
    },
    {   // Block 2
        0x636f6d6d, 0x756e6963, 0x6174696f, 0x6e20696e,
        0x20746865, 0x20707265, 0x73656e63, 0x65206f66,
        0x20746869, 0x72642070, 0x61727469, 0x65732063,
        0x616c6c65, 0x64206164, 0x76657273, 0x61726965,
    },
    {   // Block 3
        0x73800000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000408
    }
};

// Input 10: 1 blocks
// String : SHA-256
// 5348412d323536800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038
// Hash out: bbd07c4fc02c99b97124febf42c7b63b5011c0df28d409fbb486b5a9d2e615ea
const uint32_t input10_blocks[1][16] = {
    {   // Block 1
        0x5348412d, 0x32353680, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000038
    }
};

#endif // INPUT_H
