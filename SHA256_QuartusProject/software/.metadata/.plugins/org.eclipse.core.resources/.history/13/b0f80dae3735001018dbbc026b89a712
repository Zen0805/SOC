#include <stdio.h>
#include <stdint.h>
#include "system.h"
#include "io.h"

// Define the base address of your IP (assuming it's in system.h)
// Make sure SHA_256_IP_0_BASE is correctly defined in system.h or elsewhere.

// Register offsets
#define SHA256_CONTROL_REG_OFFSET    (0x00 * 4)
#define SHA256_DATA_IN_REG_OFFSET    (0x01 * 4) // Used for writing and attempting to read back input
#define SHA256_STATUS_REG_OFFSET     (0x02 * 4)
#define SHA256_HASH_OUT_0_OFFSET     (0x03 * 4)
#define SHA256_HASH_OUT_1_OFFSET     (0x04 * 4)
#define SHA256_HASH_OUT_2_OFFSET     (0x05 * 4)
#define SHA256_HASH_OUT_3_OFFSET     (0x06 * 4)
#define SHA256_HASH_OUT_4_OFFSET     (0x07 * 4)
#define SHA256_HASH_OUT_5_OFFSET     (0x08 * 4)
#define SHA256_HASH_OUT_6_OFFSET     (0x09 * 4)
#define SHA256_HASH_OUT_7_OFFSET     (0x0A * 4)

// Control Register Bits
#define SHA256_CONTROL_START_BIT     (1 << 0)

// Status Register Bits
#define SHA256_STATUS_DONE_BIT       (1 << 0)

void print_sha256_hash(uint32_t hash_result[8]) {
    int i;
    printf("SHA-256 Hash: ");
    for (i = 0; i < 8; i++) {
        printf("%08lx", (unsigned long)hash_result[i]);
    }
    printf("\n");
}

void calculate_sha256_hw(const uint32_t *data_block_ptr, uint32_t *hash_output_ptr) {
    uint32_t status;
    uint32_t control;
    uint32_t word_data;

    int i;
    int poll_count;

    // 1. reset the control and the status reg
    printf("Reset SHA-256 IP\n");
    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000000);
    //reset control_reg => bit done cung reset

    // 2. read the status value
    status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
    //doc thanh ghi status
    printf("status_reg: 0x%08lx\n", (unsigned long)status);

    // 3. init the control reg and print out its value
    printf("Ghi bit START vao control_reg...\n");
    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, SHA256_CONTROL_START_BIT);

    control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);
    printf("control_reg: 0x%08lx\n", (unsigned long)control);




    // 4. write the 16 words
    printf("Ghi 16 word vao IP:\n");
    for (i = 0; i < 16; i++) {
        IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_DATA_IN_REG_OFFSET, data_block_ptr[i]);
    }

    printf("Ghi xong.\n");






    // 5. read 16 words to see if correctly inserted
    //    NOTE: This reads from SHA256_DATA_IN_REG_OFFSET.
    //    If IP_wrapper.v is updated to allow reading data_in_reg at address 0x01,
    //    this will read the LAST WRITTEN WORD 16 times.
    //    If IP_wrapper.v is NOT updated, this will read an undefined/default value (likely 0).

    // 6. pool for done
    printf("Polling ket qua.\n"); // Your comment
    poll_count = 0;
    do {
        status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
        poll_count++;
    } while (!(status & SHA256_STATUS_DONE_BIT));
    printf("Hashing complete! (DONE bit set after %d polls). Status: 0x%08lx\n", poll_count, (unsigned long)status); // Your print

    // 7. read the hash output
    printf("Reading hash result:\n"); // Your comment
    for (i = 0; i < 8; i++) {
        hash_output_ptr[i] = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_HASH_OUT_0_OFFSET + (i * 8));
        printf("Dia chi doc: 0x%08lx\n ", (unsigned long)(SHA256_HASH_OUT_0_OFFSET + (i * 8)));

    }
\
    // 8. clear start
    printf("Clearing START bit in control register (also clears DONE status)...\n"); // Your comment
    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000000);
    status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
    printf("Final Status: 0x%08lx (DONE bit should be 0)\n", (unsigned long)status); // Your print
}

int main() {
    const uint32_t input_block_abc[16] = {
        0x00000010, 0x00000011, 0x00000012, 0x00000013,
        0x00000014, 0x00000015, 0x00000016, 0x00000017,
        0x00000018, 0x00000019, 0x0000001A, 0x0000001B,
        0x0000001C, 0x0000001D, 0x0000001E, 0x0000001F
    };
    uint32_t calculated_hash[8];

    printf("Nios II SHA-256 Test\n");
    printf("IP Base Address: 0x%08lx\n", (unsigned long)SHA_256_IP_0_BASE);

    printf("\n--- Test 1: Hashing 00000010++  ---\n");
    calculate_sha256_hw(input_block_abc, calculated_hash);
    print_sha256_hash(calculated_hash);

    printf("\nAll tests complete.\n");
    return 0;
}
