
sha256.elf:     file format elf32-littlenios2
sha256.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002768 memsz 0x00002768 flags r-x
    LOAD off    0x00003788 vaddr 0x0000a788 paddr 0x0000aa5c align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00003d30 vaddr 0x0000ad30 paddr 0x0000ad30 align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000246c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  0000a48c  0000a48c  0000348c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  0000a788  0000aa5c  00003788  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  0000ad30  0000ad30  00003d30  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00003a5c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000508  00000000  00000000  00003a88  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000719  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009ded  00000000  00000000  000046a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000024b1  00000000  00000000  0000e496  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000640e  00000000  00000000  00010947  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000008e0  00000000  00000000  00016d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000e6f  00000000  00000000  00017638  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000018ef  00000000  00000000  000184a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00019d98  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00019da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001b784  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0001b787  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001b793  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0001b794  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  0001b795  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0001b7a0  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  0001b7ab  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  0001b7b6  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000023  00000000  00000000  0001b7bc  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0002bfb3  00000000  00000000  0001b7df  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
0000a48c l    d  .rodata	00000000 .rodata
0000a788 l    d  .rwdata	00000000 .rwdata
0000ad30 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
0000a664 l     O .rodata	00000040 input_block_abc.2248
0000a6a4 l     O .rodata	00000040 C.3.2251
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000084f0 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a788 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008e48 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
0000904c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00009248 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000a868 l     O .rwdata	0000002c jtag_uart_0
0000930c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
0000969c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009718 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000097f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000993c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00009a8c l     F .text	000000f8 alt_file_locked
00009d10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000a268 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000a428 l     F .text	00000040 alt_sim_halt
00008408 g     F .text	0000001c putchar
000090b8 g     F .text	0000006c alt_main
0000842c g     F .text	00000090 _puts_r
0000aa5c g       *ABS*	00000000 __flash_rwdata_start
00008370 g     F .text	00000054 printf
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ad30 g     O .bss	00000004 errno
0000ad38 g     O .bss	00000004 alt_argv
00012a3c g       *ABS*	00000000 _gp
0000a8bc g     O .rwdata	00000180 alt_fd_list
00008424 g     F .text	00000008 _putchar_r
00009e08 g     F .text	00000094 alt_find_dev
00008344 g     F .text	0000002c memcpy
00009a14 g     F .text	00000078 alt_io_redirect
0000a48c g       *ABS*	00000000 __DTOR_END__
000084bc g     F .text	00000014 puts
000093f4 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000083c4 g     F .text	00000044 _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008f84 g     F .text	00000008 __udivsi3
0000aa54 g     O .rwdata	00000004 alt_max_fd
0000aa40 g     O .rwdata	00000004 _global_impure_ptr
0000adcc g       *ABS*	00000000 __bss_end
0000a894 g     O .rwdata	00000028 alt_dev_null
000096fc g     F .text	0000001c alt_dcache_flush_all
0000aa5c g       *ABS*	00000000 __ram_rwdata_end
0000aa4c g     O .rwdata	00000008 alt_dev_list
00009124 g     F .text	00000124 write
00008d5c g     F .text	00000074 _putc_r
0000a788 g       *ABS*	00000000 __ram_rodata_end
00008f8c g     F .text	00000008 __umodsi3
0000adcc g       *ABS*	00000000 end
0000a488 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
000094f8 g     F .text	000000a4 altera_avalon_jtag_uart_write
00008570 g     F .text	0000069c ___vfprintf_internal_r
0000a26c g     F .text	000001bc __call_exitprocs
00008020 g     F .text	0000003c _start
000092dc g     F .text	00000030 alt_sys_init
0000a0fc g     F .text	0000016c __register_exitproc
00008f94 g     F .text	00000038 __mulsi3
0000a788 g       *ABS*	00000000 __ram_rwdata_start
0000a48c g       *ABS*	00000000 __ram_rodata_start
000080e0 g     F .text	000001d4 calculate_sha256_hw
00009344 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00009fbc g     F .text	000000d0 alt_get_fd
0000a0c0 g     F .text	0000003c memcmp
0000adcc g       *ABS*	00000000 __alt_stack_base
00009e9c g     F .text	00000120 alt_find_file
00009744 g     F .text	000000b4 alt_dev_llist_insert
00008c30 g     F .text	000000bc __sfvwrite_small_dev
0000ad30 g       *ABS*	00000000 __bss_start
000082b4 g     F .text	00000090 main
0000ad3c g     O .bss	00000004 alt_envp
0000939c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000ad40 g     O .bss	0000008c _atexit0
0000aa58 g     O .rwdata	00000004 alt_errno
00008cec g     F .text	00000070 putc
00008ec4 g     F .text	00000060 __divsi3
0000a48c g       *ABS*	00000000 __CTOR_END__
0000a48c g       *ABS*	00000000 __flash_rodata_start
0000a48c g       *ABS*	00000000 __DTOR_LIST__
000092a8 g     F .text	00000034 alt_irq_init
00009d70 g     F .text	00000078 alt_release_fd
0000a08c g     F .text	00000014 atexit
00008dd0 g     F .text	00000078 _write_r
0000aa3c g     O .rwdata	00000004 _impure_ptr
0000ad34 g     O .bss	00000004 alt_argc
000098bc g     F .text	00000064 _do_dtors
0000aa44 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000aa5c g       *ABS*	00000000 _edata
0000adcc g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009de8 g     F .text	00000020 altera_nios2_qsys_irq_init
0000a0a0 g     F .text	00000020 exit
00008f24 g     F .text	00000060 __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000a468 g     F .text	00000020 _exit
000084d0 g     F .text	00000020 strlen
00009b84 g     F .text	0000018c open
00009920 g     F .text	0000001c alt_icache_flush_all
00008c0c g     F .text	00000024 __vfprintf_internal
0000805c g     F .text	00000084 print_sha256_hash
00009858 g     F .text	00000064 _do_ctors
0000959c g     F .text	00000100 close
00008fcc g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d68a8f14 	ori	gp,gp,10812
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10ab4c14 	ori	r2,r2,44336

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18eb7314 	ori	r3,r3,44492

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008fcc0 	call	8fcc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00090b80 	call	90b8 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <print_sha256_hash>:

// Status Register Bits
#define SHA256_STATUS_DONE_BIT       (1 << 0)

// Helper function to print the 256-bit hash
void print_sha256_hash(uint32_t hash_result[8]) {
    805c:	defffc04 	addi	sp,sp,-16
    8060:	dfc00315 	stw	ra,12(sp)
    8064:	df000215 	stw	fp,8(sp)
    8068:	df000204 	addi	fp,sp,8
    806c:	e13fff15 	stw	r4,-4(fp)
    int i; // C89: Declare loop variable at the start of the block
    printf("SHA-256 Hash: ");
    8070:	01000074 	movhi	r4,1
    8074:	21292304 	addi	r4,r4,-23412
    8078:	00083700 	call	8370 <printf>
    for (i = 0; i < 8; i++) {
    807c:	e03ffe15 	stw	zero,-8(fp)
    8080:	00000d06 	br	80b8 <print_sha256_hash+0x5c>
        printf("%08lx", (unsigned long)hash_result[i]);
    8084:	e0bffe17 	ldw	r2,-8(fp)
    8088:	1085883a 	add	r2,r2,r2
    808c:	1085883a 	add	r2,r2,r2
    8090:	1007883a 	mov	r3,r2
    8094:	e0bfff17 	ldw	r2,-4(fp)
    8098:	1885883a 	add	r2,r3,r2
    809c:	11400017 	ldw	r5,0(r2)
    80a0:	01000074 	movhi	r4,1
    80a4:	21292704 	addi	r4,r4,-23396
    80a8:	00083700 	call	8370 <printf>

// Helper function to print the 256-bit hash
void print_sha256_hash(uint32_t hash_result[8]) {
    int i; // C89: Declare loop variable at the start of the block
    printf("SHA-256 Hash: ");
    for (i = 0; i < 8; i++) {
    80ac:	e0bffe17 	ldw	r2,-8(fp)
    80b0:	10800044 	addi	r2,r2,1
    80b4:	e0bffe15 	stw	r2,-8(fp)
    80b8:	e0bffe17 	ldw	r2,-8(fp)
    80bc:	10800210 	cmplti	r2,r2,8
    80c0:	103ff01e 	bne	r2,zero,8084 <print_sha256_hash+0x28>
        printf("%08lx", (unsigned long)hash_result[i]);
    }
    printf("\n");
    80c4:	01000284 	movi	r4,10
    80c8:	00084080 	call	8408 <putchar>
}
    80cc:	e037883a 	mov	sp,fp
    80d0:	dfc00117 	ldw	ra,4(sp)
    80d4:	df000017 	ldw	fp,0(sp)
    80d8:	dec00204 	addi	sp,sp,8
    80dc:	f800283a 	ret

000080e0 <calculate_sha256_hw>:

// Function to perform SHA-256 hashing on a single 512-bit block of data
void calculate_sha256_hw(const uint32_t *data_block_ptr, uint32_t *hash_output_ptr) {
    80e0:	defff904 	addi	sp,sp,-28
    80e4:	dfc00615 	stw	ra,24(sp)
    80e8:	df000515 	stw	fp,20(sp)
    80ec:	df000504 	addi	fp,sp,20
    80f0:	e13ffe15 	stw	r4,-8(fp)
    80f4:	e17fff15 	stw	r5,-4(fp)
    uint32_t status;
    int i; // C89: Declare loop variable
    int poll_count; // C89: Declare loop variable

    printf("Initializing SHA-256 IP for new operation...\n");
    80f8:	01000074 	movhi	r4,1
    80fc:	21292904 	addi	r4,r4,-23388
    8100:	00084bc0 	call	84bc <puts>
    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000000);
    8104:	00800074 	movhi	r2,1
    8108:	10842004 	addi	r2,r2,4224
    810c:	10000035 	stwio	zero,0(r2)
    status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
    8110:	00800074 	movhi	r2,1
    8114:	10842204 	addi	r2,r2,4232
    8118:	10800037 	ldwio	r2,0(r2)
    811c:	e0bffd15 	stw	r2,-12(fp)
    printf("Initial Status: 0x%08lx (DONE bit should be 0)\n", (unsigned long)status);
    8120:	01000074 	movhi	r4,1
    8124:	21293504 	addi	r4,r4,-23340
    8128:	e17ffd17 	ldw	r5,-12(fp)
    812c:	00083700 	call	8370 <printf>

    printf("Asserting START bit in control register...\n");
    8130:	01000074 	movhi	r4,1
    8134:	21294104 	addi	r4,r4,-23292
    8138:	00084bc0 	call	84bc <puts>
    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, SHA256_CONTROL_START_BIT);
    813c:	00c00074 	movhi	r3,1
    8140:	18c42004 	addi	r3,r3,4224
    8144:	00800044 	movi	r2,1
    8148:	18800035 	stwio	r2,0(r3)

    printf("Writing data block (16 words) to IP:\n");
    814c:	01000074 	movhi	r4,1
    8150:	21294c04 	addi	r4,r4,-23248
    8154:	00084bc0 	call	84bc <puts>
    for (i = 0; i < 16; i++) {
    8158:	e03ffc15 	stw	zero,-16(fp)
    815c:	00000e06 	br	8198 <calculate_sha256_hw+0xb8>
        IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_DATA_IN_REG_OFFSET, data_block_ptr[i]);
    8160:	e0bffc17 	ldw	r2,-16(fp)
    8164:	1085883a 	add	r2,r2,r2
    8168:	1085883a 	add	r2,r2,r2
    816c:	1007883a 	mov	r3,r2
    8170:	e0bffe17 	ldw	r2,-8(fp)
    8174:	1885883a 	add	r2,r3,r2
    8178:	10800017 	ldw	r2,0(r2)
    817c:	1007883a 	mov	r3,r2
    8180:	00800074 	movhi	r2,1
    8184:	10842104 	addi	r2,r2,4228
    8188:	10c00035 	stwio	r3,0(r2)

    printf("Asserting START bit in control register...\n");
    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, SHA256_CONTROL_START_BIT);

    printf("Writing data block (16 words) to IP:\n");
    for (i = 0; i < 16; i++) {
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	10800044 	addi	r2,r2,1
    8194:	e0bffc15 	stw	r2,-16(fp)
    8198:	e0bffc17 	ldw	r2,-16(fp)
    819c:	10800410 	cmplti	r2,r2,16
    81a0:	103fef1e 	bne	r2,zero,8160 <calculate_sha256_hw+0x80>
        IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_DATA_IN_REG_OFFSET, data_block_ptr[i]);
    }
    printf("Data block written.\n");
    81a4:	01000074 	movhi	r4,1
    81a8:	21295604 	addi	r4,r4,-23208
    81ac:	00084bc0 	call	84bc <puts>

    printf("Polling for completion (DONE bit)...\n");
    81b0:	01000074 	movhi	r4,1
    81b4:	21295b04 	addi	r4,r4,-23188
    81b8:	00084bc0 	call	84bc <puts>
    poll_count = 0; // Initialize before use
    81bc:	e03ffb15 	stw	zero,-20(fp)
    do {
        status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
    81c0:	00800074 	movhi	r2,1
    81c4:	10842204 	addi	r2,r2,4232
    81c8:	10800037 	ldwio	r2,0(r2)
    81cc:	e0bffd15 	stw	r2,-12(fp)
        poll_count++;
    81d0:	e0bffb17 	ldw	r2,-20(fp)
    81d4:	10800044 	addi	r2,r2,1
    81d8:	e0bffb15 	stw	r2,-20(fp)
    } while (!(status & SHA256_STATUS_DONE_BIT));
    81dc:	e0bffd17 	ldw	r2,-12(fp)
    81e0:	1080004c 	andi	r2,r2,1
    81e4:	1005003a 	cmpeq	r2,r2,zero
    81e8:	103ff51e 	bne	r2,zero,81c0 <calculate_sha256_hw+0xe0>
    printf("Hashing complete! (DONE bit set after %d polls). Status: 0x%08lx\n", poll_count, (unsigned long)status);
    81ec:	01000074 	movhi	r4,1
    81f0:	21296504 	addi	r4,r4,-23148
    81f4:	e17ffb17 	ldw	r5,-20(fp)
    81f8:	e1bffd17 	ldw	r6,-12(fp)
    81fc:	00083700 	call	8370 <printf>

    printf("Reading hash result:\n");
    8200:	01000074 	movhi	r4,1
    8204:	21297604 	addi	r4,r4,-23080
    8208:	00084bc0 	call	84bc <puts>
    for (i = 0; i < 8; i++) { // 'i' can be reused as it was declared at the function scope
    820c:	e03ffc15 	stw	zero,-16(fp)
    8210:	00001206 	br	825c <calculate_sha256_hw+0x17c>
        hash_output_ptr[i] = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_HASH_OUT_0_OFFSET + (i * 4));
    8214:	e0bffc17 	ldw	r2,-16(fp)
    8218:	1085883a 	add	r2,r2,r2
    821c:	1085883a 	add	r2,r2,r2
    8220:	1007883a 	mov	r3,r2
    8224:	e0bfff17 	ldw	r2,-4(fp)
    8228:	1889883a 	add	r4,r3,r2
    822c:	e0bffc17 	ldw	r2,-16(fp)
    8230:	1085883a 	add	r2,r2,r2
    8234:	1085883a 	add	r2,r2,r2
    8238:	1007883a 	mov	r3,r2
    823c:	00800074 	movhi	r2,1
    8240:	10842304 	addi	r2,r2,4236
    8244:	1885883a 	add	r2,r3,r2
    8248:	10800037 	ldwio	r2,0(r2)
    824c:	20800015 	stw	r2,0(r4)
        poll_count++;
    } while (!(status & SHA256_STATUS_DONE_BIT));
    printf("Hashing complete! (DONE bit set after %d polls). Status: 0x%08lx\n", poll_count, (unsigned long)status);

    printf("Reading hash result:\n");
    for (i = 0; i < 8; i++) { // 'i' can be reused as it was declared at the function scope
    8250:	e0bffc17 	ldw	r2,-16(fp)
    8254:	10800044 	addi	r2,r2,1
    8258:	e0bffc15 	stw	r2,-16(fp)
    825c:	e0bffc17 	ldw	r2,-16(fp)
    8260:	10800210 	cmplti	r2,r2,8
    8264:	103feb1e 	bne	r2,zero,8214 <calculate_sha256_hw+0x134>
        hash_output_ptr[i] = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_HASH_OUT_0_OFFSET + (i * 4));
    }

    printf("Clearing START bit in control register (also clears DONE status)...\n");
    8268:	01000074 	movhi	r4,1
    826c:	21297c04 	addi	r4,r4,-23056
    8270:	00084bc0 	call	84bc <puts>
    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000000);
    8274:	00800074 	movhi	r2,1
    8278:	10842004 	addi	r2,r2,4224
    827c:	10000035 	stwio	zero,0(r2)
    status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
    8280:	00800074 	movhi	r2,1
    8284:	10842204 	addi	r2,r2,4232
    8288:	10800037 	ldwio	r2,0(r2)
    828c:	e0bffd15 	stw	r2,-12(fp)
    printf("Final Status: 0x%08lx (DONE bit should be 0)\n", (unsigned long)status);
    8290:	01000074 	movhi	r4,1
    8294:	21298d04 	addi	r4,r4,-22988
    8298:	e17ffd17 	ldw	r5,-12(fp)
    829c:	00083700 	call	8370 <printf>
}
    82a0:	e037883a 	mov	sp,fp
    82a4:	dfc00117 	ldw	ra,4(sp)
    82a8:	df000017 	ldw	fp,0(sp)
    82ac:	dec00204 	addi	sp,sp,8
    82b0:	f800283a 	ret

000082b4 <main>:

int main() {
    82b4:	deffe604 	addi	sp,sp,-104
    82b8:	dfc01915 	stw	ra,100(sp)
    82bc:	df001815 	stw	fp,96(sp)
    82c0:	df001804 	addi	fp,sp,96
    const uint32_t input_block_empty[16] = {
        0x80000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000
    };
    82c4:	00800074 	movhi	r2,1
    82c8:	10a9a904 	addi	r2,r2,-22876
    82cc:	e13ff004 	addi	r4,fp,-64
    82d0:	100b883a 	mov	r5,r2
    82d4:	01801004 	movi	r6,64
    82d8:	00083440 	call	8344 <memcpy>

    printf("Nios II SHA-256 Test\n");
    82dc:	01000074 	movhi	r4,1
    82e0:	2129b904 	addi	r4,r4,-22812
    82e4:	00084bc0 	call	84bc <puts>
    printf("IP Base Address: 0x", (unsigned long)SHA_256_IP_0_BASE), "/n";
    82e8:	01000074 	movhi	r4,1
    82ec:	2129bf04 	addi	r4,r4,-22788
    82f0:	01400074 	movhi	r5,1
    82f4:	29442004 	addi	r5,r5,4224
    82f8:	00083700 	call	8370 <printf>

    printf("\n--- Test 1: Hashing 00000010++  ---\n");
    82fc:	01000074 	movhi	r4,1
    8300:	2129c404 	addi	r4,r4,-22768
    8304:	00084bc0 	call	84bc <puts>
    calculate_sha256_hw(input_block_abc, calculated_hash);
    8308:	01000074 	movhi	r4,1
    830c:	21299904 	addi	r4,r4,-22940
    8310:	e17fe804 	addi	r5,fp,-96
    8314:	00080e00 	call	80e0 <calculate_sha256_hw>
    print_sha256_hash(calculated_hash);
    8318:	e13fe804 	addi	r4,fp,-96
    831c:	000805c0 	call	805c <print_sha256_hash>

    printf("\nAll tests complete.\n");
    8320:	01000074 	movhi	r4,1
    8324:	2129ce04 	addi	r4,r4,-22728
    8328:	00084bc0 	call	84bc <puts>
    return 0;
    832c:	0005883a 	mov	r2,zero
}
    8330:	e037883a 	mov	sp,fp
    8334:	dfc00117 	ldw	ra,4(sp)
    8338:	df000017 	ldw	fp,0(sp)
    833c:	dec00204 	addi	sp,sp,8
    8340:	f800283a 	ret

00008344 <memcpy>:
    8344:	2011883a 	mov	r8,r4
    8348:	30000726 	beq	r6,zero,8368 <memcpy+0x24>
    834c:	000f883a 	mov	r7,zero
    8350:	29c5883a 	add	r2,r5,r7
    8354:	11000003 	ldbu	r4,0(r2)
    8358:	41c7883a 	add	r3,r8,r7
    835c:	39c00044 	addi	r7,r7,1
    8360:	19000005 	stb	r4,0(r3)
    8364:	39bffa1e 	bne	r7,r6,8350 <memcpy+0xc>
    8368:	4005883a 	mov	r2,r8
    836c:	f800283a 	ret

00008370 <printf>:
    8370:	defffb04 	addi	sp,sp,-20
    8374:	dfc00115 	stw	ra,4(sp)
    8378:	d9400215 	stw	r5,8(sp)
    837c:	d9800315 	stw	r6,12(sp)
    8380:	d9c00415 	stw	r7,16(sp)
    8384:	00800074 	movhi	r2,1
    8388:	10aa8f04 	addi	r2,r2,-21956
    838c:	11400017 	ldw	r5,0(r2)
    8390:	d8800204 	addi	r2,sp,8
    8394:	d8800015 	stw	r2,0(sp)
    8398:	29c00217 	ldw	r7,8(r5)
    839c:	100d883a 	mov	r6,r2
    83a0:	00800074 	movhi	r2,1
    83a4:	10a30c04 	addi	r2,r2,-29648
    83a8:	200b883a 	mov	r5,r4
    83ac:	38800115 	stw	r2,4(r7)
    83b0:	3809883a 	mov	r4,r7
    83b4:	0008c0c0 	call	8c0c <__vfprintf_internal>
    83b8:	dfc00117 	ldw	ra,4(sp)
    83bc:	dec00504 	addi	sp,sp,20
    83c0:	f800283a 	ret

000083c4 <_printf_r>:
    83c4:	defffc04 	addi	sp,sp,-16
    83c8:	dfc00115 	stw	ra,4(sp)
    83cc:	d9800215 	stw	r6,8(sp)
    83d0:	d9c00315 	stw	r7,12(sp)
    83d4:	22000217 	ldw	r8,8(r4)
    83d8:	d8800204 	addi	r2,sp,8
    83dc:	d8800015 	stw	r2,0(sp)
    83e0:	100f883a 	mov	r7,r2
    83e4:	00800074 	movhi	r2,1
    83e8:	10a30c04 	addi	r2,r2,-29648
    83ec:	280d883a 	mov	r6,r5
    83f0:	40800115 	stw	r2,4(r8)
    83f4:	400b883a 	mov	r5,r8
    83f8:	00085700 	call	8570 <___vfprintf_internal_r>
    83fc:	dfc00117 	ldw	ra,4(sp)
    8400:	dec00404 	addi	sp,sp,16
    8404:	f800283a 	ret

00008408 <putchar>:
    8408:	00800074 	movhi	r2,1
    840c:	10aa8f04 	addi	r2,r2,-21956
    8410:	11800017 	ldw	r6,0(r2)
    8414:	200b883a 	mov	r5,r4
    8418:	3009883a 	mov	r4,r6
    841c:	31800217 	ldw	r6,8(r6)
    8420:	0008d5c1 	jmpi	8d5c <_putc_r>

00008424 <_putchar_r>:
    8424:	21800217 	ldw	r6,8(r4)
    8428:	0008d5c1 	jmpi	8d5c <_putc_r>

0000842c <_puts_r>:
    842c:	defffd04 	addi	sp,sp,-12
    8430:	dc000015 	stw	r16,0(sp)
    8434:	2021883a 	mov	r16,r4
    8438:	2809883a 	mov	r4,r5
    843c:	dfc00215 	stw	ra,8(sp)
    8440:	dc400115 	stw	r17,4(sp)
    8444:	2823883a 	mov	r17,r5
    8448:	00084d00 	call	84d0 <strlen>
    844c:	80c00217 	ldw	r3,8(r16)
    8450:	02000074 	movhi	r8,1
    8454:	42230c04 	addi	r8,r8,-29648
    8458:	880d883a 	mov	r6,r17
    845c:	100f883a 	mov	r7,r2
    8460:	8009883a 	mov	r4,r16
    8464:	180b883a 	mov	r5,r3
    8468:	1a000115 	stw	r8,4(r3)
    846c:	403ee83a 	callr	r8
    8470:	047fffc4 	movi	r17,-1
    8474:	8009883a 	mov	r4,r16
    8478:	01800074 	movhi	r6,1
    847c:	31a9d404 	addi	r6,r6,-22704
    8480:	01c00044 	movi	r7,1
    8484:	1440071e 	bne	r2,r17,84a4 <_puts_r+0x78>
    8488:	00ffffc4 	movi	r3,-1
    848c:	1805883a 	mov	r2,r3
    8490:	dfc00217 	ldw	ra,8(sp)
    8494:	dc400117 	ldw	r17,4(sp)
    8498:	dc000017 	ldw	r16,0(sp)
    849c:	dec00304 	addi	sp,sp,12
    84a0:	f800283a 	ret
    84a4:	81400217 	ldw	r5,8(r16)
    84a8:	28c00117 	ldw	r3,4(r5)
    84ac:	183ee83a 	callr	r3
    84b0:	0007883a 	mov	r3,zero
    84b4:	147ff51e 	bne	r2,r17,848c <_puts_r+0x60>
    84b8:	003ff306 	br	8488 <_puts_r+0x5c>

000084bc <puts>:
    84bc:	00800074 	movhi	r2,1
    84c0:	10aa8f04 	addi	r2,r2,-21956
    84c4:	200b883a 	mov	r5,r4
    84c8:	11000017 	ldw	r4,0(r2)
    84cc:	000842c1 	jmpi	842c <_puts_r>

000084d0 <strlen>:
    84d0:	20800007 	ldb	r2,0(r4)
    84d4:	10000526 	beq	r2,zero,84ec <strlen+0x1c>
    84d8:	2007883a 	mov	r3,r4
    84dc:	18c00044 	addi	r3,r3,1
    84e0:	18800007 	ldb	r2,0(r3)
    84e4:	103ffd1e 	bne	r2,zero,84dc <strlen+0xc>
    84e8:	1905c83a 	sub	r2,r3,r4
    84ec:	f800283a 	ret

000084f0 <print_repeat>:
    84f0:	defffb04 	addi	sp,sp,-20
    84f4:	dc800315 	stw	r18,12(sp)
    84f8:	dc400215 	stw	r17,8(sp)
    84fc:	dc000115 	stw	r16,4(sp)
    8500:	dfc00415 	stw	ra,16(sp)
    8504:	2025883a 	mov	r18,r4
    8508:	2823883a 	mov	r17,r5
    850c:	3821883a 	mov	r16,r7
    8510:	d9800005 	stb	r6,0(sp)
    8514:	9009883a 	mov	r4,r18
    8518:	880b883a 	mov	r5,r17
    851c:	d80d883a 	mov	r6,sp
    8520:	01c00044 	movi	r7,1
    8524:	04000b0e 	bge	zero,r16,8554 <print_repeat+0x64>
    8528:	88c00117 	ldw	r3,4(r17)
    852c:	843fffc4 	addi	r16,r16,-1
    8530:	183ee83a 	callr	r3
    8534:	103ff726 	beq	r2,zero,8514 <print_repeat+0x24>
    8538:	00bfffc4 	movi	r2,-1
    853c:	dfc00417 	ldw	ra,16(sp)
    8540:	dc800317 	ldw	r18,12(sp)
    8544:	dc400217 	ldw	r17,8(sp)
    8548:	dc000117 	ldw	r16,4(sp)
    854c:	dec00504 	addi	sp,sp,20
    8550:	f800283a 	ret
    8554:	0005883a 	mov	r2,zero
    8558:	dfc00417 	ldw	ra,16(sp)
    855c:	dc800317 	ldw	r18,12(sp)
    8560:	dc400217 	ldw	r17,8(sp)
    8564:	dc000117 	ldw	r16,4(sp)
    8568:	dec00504 	addi	sp,sp,20
    856c:	f800283a 	ret

00008570 <___vfprintf_internal_r>:
    8570:	deffe304 	addi	sp,sp,-116
    8574:	df001b15 	stw	fp,108(sp)
    8578:	ddc01a15 	stw	r23,104(sp)
    857c:	dd001715 	stw	r20,92(sp)
    8580:	dc801515 	stw	r18,84(sp)
    8584:	dc001315 	stw	r16,76(sp)
    8588:	dfc01c15 	stw	ra,112(sp)
    858c:	dd801915 	stw	r22,100(sp)
    8590:	dd401815 	stw	r21,96(sp)
    8594:	dcc01615 	stw	r19,88(sp)
    8598:	dc401415 	stw	r17,80(sp)
    859c:	d9001015 	stw	r4,64(sp)
    85a0:	2829883a 	mov	r20,r5
    85a4:	d9c01115 	stw	r7,68(sp)
    85a8:	3025883a 	mov	r18,r6
    85ac:	0021883a 	mov	r16,zero
    85b0:	d8000f15 	stw	zero,60(sp)
    85b4:	d8000e15 	stw	zero,56(sp)
    85b8:	0039883a 	mov	fp,zero
    85bc:	d8000915 	stw	zero,36(sp)
    85c0:	d8000d15 	stw	zero,52(sp)
    85c4:	d8000c15 	stw	zero,48(sp)
    85c8:	d8000b15 	stw	zero,44(sp)
    85cc:	002f883a 	mov	r23,zero
    85d0:	91400003 	ldbu	r5,0(r18)
    85d4:	01c00044 	movi	r7,1
    85d8:	94800044 	addi	r18,r18,1
    85dc:	29003fcc 	andi	r4,r5,255
    85e0:	2100201c 	xori	r4,r4,128
    85e4:	213fe004 	addi	r4,r4,-128
    85e8:	20001526 	beq	r4,zero,8640 <___vfprintf_internal_r+0xd0>
    85ec:	81c03526 	beq	r16,r7,86c4 <___vfprintf_internal_r+0x154>
    85f0:	3c002016 	blt	r7,r16,8674 <___vfprintf_internal_r+0x104>
    85f4:	803ff61e 	bne	r16,zero,85d0 <___vfprintf_internal_r+0x60>
    85f8:	00800944 	movi	r2,37
    85fc:	2081501e 	bne	r4,r2,8b40 <___vfprintf_internal_r+0x5d0>
    8600:	073fffc4 	movi	fp,-1
    8604:	00800284 	movi	r2,10
    8608:	d9c00c15 	stw	r7,48(sp)
    860c:	d8000f15 	stw	zero,60(sp)
    8610:	d8000e15 	stw	zero,56(sp)
    8614:	df000915 	stw	fp,36(sp)
    8618:	d8800d15 	stw	r2,52(sp)
    861c:	d8000b15 	stw	zero,44(sp)
    8620:	91400003 	ldbu	r5,0(r18)
    8624:	3821883a 	mov	r16,r7
    8628:	94800044 	addi	r18,r18,1
    862c:	29003fcc 	andi	r4,r5,255
    8630:	2100201c 	xori	r4,r4,128
    8634:	213fe004 	addi	r4,r4,-128
    8638:	01c00044 	movi	r7,1
    863c:	203feb1e 	bne	r4,zero,85ec <___vfprintf_internal_r+0x7c>
    8640:	b805883a 	mov	r2,r23
    8644:	dfc01c17 	ldw	ra,112(sp)
    8648:	df001b17 	ldw	fp,108(sp)
    864c:	ddc01a17 	ldw	r23,104(sp)
    8650:	dd801917 	ldw	r22,100(sp)
    8654:	dd401817 	ldw	r21,96(sp)
    8658:	dd001717 	ldw	r20,92(sp)
    865c:	dcc01617 	ldw	r19,88(sp)
    8660:	dc801517 	ldw	r18,84(sp)
    8664:	dc401417 	ldw	r17,80(sp)
    8668:	dc001317 	ldw	r16,76(sp)
    866c:	dec01d04 	addi	sp,sp,116
    8670:	f800283a 	ret
    8674:	00800084 	movi	r2,2
    8678:	80801726 	beq	r16,r2,86d8 <___vfprintf_internal_r+0x168>
    867c:	008000c4 	movi	r2,3
    8680:	80bfd31e 	bne	r16,r2,85d0 <___vfprintf_internal_r+0x60>
    8684:	2c7ff404 	addi	r17,r5,-48
    8688:	88c03fcc 	andi	r3,r17,255
    868c:	00800244 	movi	r2,9
    8690:	10c02136 	bltu	r2,r3,8718 <___vfprintf_internal_r+0x1a8>
    8694:	d8c00917 	ldw	r3,36(sp)
    8698:	18012716 	blt	r3,zero,8b38 <___vfprintf_internal_r+0x5c8>
    869c:	d9000917 	ldw	r4,36(sp)
    86a0:	01400284 	movi	r5,10
    86a4:	0008f940 	call	8f94 <__mulsi3>
    86a8:	1007883a 	mov	r3,r2
    86ac:	88803fcc 	andi	r2,r17,255
    86b0:	1080201c 	xori	r2,r2,128
    86b4:	10bfe004 	addi	r2,r2,-128
    86b8:	1887883a 	add	r3,r3,r2
    86bc:	d8c00915 	stw	r3,36(sp)
    86c0:	003fc306 	br	85d0 <___vfprintf_internal_r+0x60>
    86c4:	00800c04 	movi	r2,48
    86c8:	2080b326 	beq	r4,r2,8998 <___vfprintf_internal_r+0x428>
    86cc:	00800944 	movi	r2,37
    86d0:	20812726 	beq	r4,r2,8b70 <___vfprintf_internal_r+0x600>
    86d4:	04000084 	movi	r16,2
    86d8:	2c7ff404 	addi	r17,r5,-48
    86dc:	88c03fcc 	andi	r3,r17,255
    86e0:	00800244 	movi	r2,9
    86e4:	10c00a36 	bltu	r2,r3,8710 <___vfprintf_internal_r+0x1a0>
    86e8:	e000b416 	blt	fp,zero,89bc <___vfprintf_internal_r+0x44c>
    86ec:	e009883a 	mov	r4,fp
    86f0:	01400284 	movi	r5,10
    86f4:	0008f940 	call	8f94 <__mulsi3>
    86f8:	1007883a 	mov	r3,r2
    86fc:	88803fcc 	andi	r2,r17,255
    8700:	1080201c 	xori	r2,r2,128
    8704:	10bfe004 	addi	r2,r2,-128
    8708:	18b9883a 	add	fp,r3,r2
    870c:	003fb006 	br	85d0 <___vfprintf_internal_r+0x60>
    8710:	00800b84 	movi	r2,46
    8714:	2080a326 	beq	r4,r2,89a4 <___vfprintf_internal_r+0x434>
    8718:	00801b04 	movi	r2,108
    871c:	2080a326 	beq	r4,r2,89ac <___vfprintf_internal_r+0x43c>
    8720:	d8c00917 	ldw	r3,36(sp)
    8724:	1800a716 	blt	r3,zero,89c4 <___vfprintf_internal_r+0x454>
    8728:	d8000f15 	stw	zero,60(sp)
    872c:	28bfea04 	addi	r2,r5,-88
    8730:	10803fcc 	andi	r2,r2,255
    8734:	00c00804 	movi	r3,32
    8738:	18802836 	bltu	r3,r2,87dc <___vfprintf_internal_r+0x26c>
    873c:	1085883a 	add	r2,r2,r2
    8740:	1085883a 	add	r2,r2,r2
    8744:	00c00074 	movhi	r3,1
    8748:	18e1d604 	addi	r3,r3,-30888
    874c:	10c5883a 	add	r2,r2,r3
    8750:	11000017 	ldw	r4,0(r2)
    8754:	2000683a 	jmp	r4
    8758:	000087e4 	muli	zero,zero,543
    875c:	000087dc 	xori	zero,zero,543
    8760:	000087dc 	xori	zero,zero,543
    8764:	000087dc 	xori	zero,zero,543
    8768:	000087dc 	xori	zero,zero,543
    876c:	000087dc 	xori	zero,zero,543
    8770:	000087dc 	xori	zero,zero,543
    8774:	000087dc 	xori	zero,zero,543
    8778:	000087dc 	xori	zero,zero,543
    877c:	000087dc 	xori	zero,zero,543
    8780:	000087dc 	xori	zero,zero,543
    8784:	00008a10 	cmplti	zero,zero,552
    8788:	000087f8 	rdprs	zero,zero,543
    878c:	000087dc 	xori	zero,zero,543
    8790:	000087dc 	xori	zero,zero,543
    8794:	000087dc 	xori	zero,zero,543
    8798:	000087dc 	xori	zero,zero,543
    879c:	000087f8 	rdprs	zero,zero,543
    87a0:	000087dc 	xori	zero,zero,543
    87a4:	000087dc 	xori	zero,zero,543
    87a8:	000087dc 	xori	zero,zero,543
    87ac:	000087dc 	xori	zero,zero,543
    87b0:	000087dc 	xori	zero,zero,543
    87b4:	00008a78 	rdprs	zero,zero,553
    87b8:	000087dc 	xori	zero,zero,543
    87bc:	000087dc 	xori	zero,zero,543
    87c0:	000087dc 	xori	zero,zero,543
    87c4:	00008a88 	cmpgei	zero,zero,554
    87c8:	000087dc 	xori	zero,zero,543
    87cc:	0000895c 	xori	zero,zero,549
    87d0:	000087dc 	xori	zero,zero,543
    87d4:	000087dc 	xori	zero,zero,543
    87d8:	00008954 	movui	zero,549
    87dc:	0021883a 	mov	r16,zero
    87e0:	003f7b06 	br	85d0 <___vfprintf_internal_r+0x60>
    87e4:	00c00404 	movi	r3,16
    87e8:	00800044 	movi	r2,1
    87ec:	d8c00d15 	stw	r3,52(sp)
    87f0:	d8000c15 	stw	zero,48(sp)
    87f4:	d8800b15 	stw	r2,44(sp)
    87f8:	d8c00e17 	ldw	r3,56(sp)
    87fc:	1805003a 	cmpeq	r2,r3,zero
    8800:	10005a1e 	bne	r2,zero,896c <___vfprintf_internal_r+0x3fc>
    8804:	d8800c17 	ldw	r2,48(sp)
    8808:	1000781e 	bne	r2,zero,89ec <___vfprintf_internal_r+0x47c>
    880c:	d8801117 	ldw	r2,68(sp)
    8810:	d8000a15 	stw	zero,40(sp)
    8814:	14400017 	ldw	r17,0(r2)
    8818:	11c00104 	addi	r7,r2,4
    881c:	d9c01115 	stw	r7,68(sp)
    8820:	88005a26 	beq	r17,zero,898c <___vfprintf_internal_r+0x41c>
    8824:	d8c00b17 	ldw	r3,44(sp)
    8828:	dcc00044 	addi	r19,sp,1
    882c:	05800244 	movi	r22,9
    8830:	182b003a 	cmpeq	r21,r3,zero
    8834:	dcc01215 	stw	r19,72(sp)
    8838:	00000506 	br	8850 <___vfprintf_internal_r+0x2e0>
    883c:	21000c04 	addi	r4,r4,48
    8840:	99000005 	stb	r4,0(r19)
    8844:	9cc00044 	addi	r19,r19,1
    8848:	80000f26 	beq	r16,zero,8888 <___vfprintf_internal_r+0x318>
    884c:	8023883a 	mov	r17,r16
    8850:	d9400d17 	ldw	r5,52(sp)
    8854:	8809883a 	mov	r4,r17
    8858:	0008f840 	call	8f84 <__udivsi3>
    885c:	d9000d17 	ldw	r4,52(sp)
    8860:	100b883a 	mov	r5,r2
    8864:	1021883a 	mov	r16,r2
    8868:	0008f940 	call	8f94 <__mulsi3>
    886c:	8889c83a 	sub	r4,r17,r2
    8870:	b13ff20e 	bge	r22,r4,883c <___vfprintf_internal_r+0x2cc>
    8874:	a8009f1e 	bne	r21,zero,8af4 <___vfprintf_internal_r+0x584>
    8878:	21000dc4 	addi	r4,r4,55
    887c:	99000005 	stb	r4,0(r19)
    8880:	9cc00044 	addi	r19,r19,1
    8884:	803ff11e 	bne	r16,zero,884c <___vfprintf_internal_r+0x2dc>
    8888:	d8801217 	ldw	r2,72(sp)
    888c:	98a3c83a 	sub	r17,r19,r2
    8890:	d8c00917 	ldw	r3,36(sp)
    8894:	1c4bc83a 	sub	r5,r3,r17
    8898:	0140130e 	bge	zero,r5,88e8 <___vfprintf_internal_r+0x378>
    889c:	d8c00044 	addi	r3,sp,1
    88a0:	18800804 	addi	r2,r3,32
    88a4:	9880102e 	bgeu	r19,r2,88e8 <___vfprintf_internal_r+0x378>
    88a8:	00800c04 	movi	r2,48
    88ac:	28ffffc4 	addi	r3,r5,-1
    88b0:	98800005 	stb	r2,0(r19)
    88b4:	99000044 	addi	r4,r19,1
    88b8:	00c0080e 	bge	zero,r3,88dc <___vfprintf_internal_r+0x36c>
    88bc:	d8c00044 	addi	r3,sp,1
    88c0:	18800804 	addi	r2,r3,32
    88c4:	2080052e 	bgeu	r4,r2,88dc <___vfprintf_internal_r+0x36c>
    88c8:	00800c04 	movi	r2,48
    88cc:	20800005 	stb	r2,0(r4)
    88d0:	21000044 	addi	r4,r4,1
    88d4:	9945883a 	add	r2,r19,r5
    88d8:	20bff81e 	bne	r4,r2,88bc <___vfprintf_internal_r+0x34c>
    88dc:	d8801217 	ldw	r2,72(sp)
    88e0:	2027883a 	mov	r19,r4
    88e4:	20a3c83a 	sub	r17,r4,r2
    88e8:	d8c00a17 	ldw	r3,40(sp)
    88ec:	1c45883a 	add	r2,r3,r17
    88f0:	e0a1c83a 	sub	r16,fp,r2
    88f4:	d8800f17 	ldw	r2,60(sp)
    88f8:	10008026 	beq	r2,zero,8afc <___vfprintf_internal_r+0x58c>
    88fc:	1805003a 	cmpeq	r2,r3,zero
    8900:	1000ae26 	beq	r2,zero,8bbc <___vfprintf_internal_r+0x64c>
    8904:	0400a516 	blt	zero,r16,8b9c <___vfprintf_internal_r+0x62c>
    8908:	b805883a 	mov	r2,r23
    890c:	0440950e 	bge	zero,r17,8b64 <___vfprintf_internal_r+0x5f4>
    8910:	102f883a 	mov	r23,r2
    8914:	1461883a 	add	r16,r2,r17
    8918:	00000206 	br	8924 <___vfprintf_internal_r+0x3b4>
    891c:	bdc00044 	addi	r23,r23,1
    8920:	85ffae26 	beq	r16,r23,87dc <___vfprintf_internal_r+0x26c>
    8924:	9cffffc4 	addi	r19,r19,-1
    8928:	98800003 	ldbu	r2,0(r19)
    892c:	a0c00117 	ldw	r3,4(r20)
    8930:	d9001017 	ldw	r4,64(sp)
    8934:	d8800005 	stb	r2,0(sp)
    8938:	a00b883a 	mov	r5,r20
    893c:	d80d883a 	mov	r6,sp
    8940:	01c00044 	movi	r7,1
    8944:	183ee83a 	callr	r3
    8948:	103ff426 	beq	r2,zero,891c <___vfprintf_internal_r+0x3ac>
    894c:	05ffffc4 	movi	r23,-1
    8950:	003f3b06 	br	8640 <___vfprintf_internal_r+0xd0>
    8954:	00c00404 	movi	r3,16
    8958:	d8c00d15 	stw	r3,52(sp)
    895c:	d8000c15 	stw	zero,48(sp)
    8960:	d8c00e17 	ldw	r3,56(sp)
    8964:	1805003a 	cmpeq	r2,r3,zero
    8968:	103fa626 	beq	r2,zero,8804 <___vfprintf_internal_r+0x294>
    896c:	d8c00c17 	ldw	r3,48(sp)
    8970:	1800171e 	bne	r3,zero,89d0 <___vfprintf_internal_r+0x460>
    8974:	d8c01117 	ldw	r3,68(sp)
    8978:	d8000a15 	stw	zero,40(sp)
    897c:	1c400017 	ldw	r17,0(r3)
    8980:	19c00104 	addi	r7,r3,4
    8984:	d9c01115 	stw	r7,68(sp)
    8988:	883fa61e 	bne	r17,zero,8824 <___vfprintf_internal_r+0x2b4>
    898c:	dcc00044 	addi	r19,sp,1
    8990:	dcc01215 	stw	r19,72(sp)
    8994:	003fbe06 	br	8890 <___vfprintf_internal_r+0x320>
    8998:	04000084 	movi	r16,2
    899c:	d9c00f15 	stw	r7,60(sp)
    89a0:	003f0b06 	br	85d0 <___vfprintf_internal_r+0x60>
    89a4:	040000c4 	movi	r16,3
    89a8:	003f0906 	br	85d0 <___vfprintf_internal_r+0x60>
    89ac:	00800044 	movi	r2,1
    89b0:	040000c4 	movi	r16,3
    89b4:	d8800e15 	stw	r2,56(sp)
    89b8:	003f0506 	br	85d0 <___vfprintf_internal_r+0x60>
    89bc:	0007883a 	mov	r3,zero
    89c0:	003f4e06 	br	86fc <___vfprintf_internal_r+0x18c>
    89c4:	00800044 	movi	r2,1
    89c8:	d8800915 	stw	r2,36(sp)
    89cc:	003f5706 	br	872c <___vfprintf_internal_r+0x1bc>
    89d0:	d8801117 	ldw	r2,68(sp)
    89d4:	14400017 	ldw	r17,0(r2)
    89d8:	10800104 	addi	r2,r2,4
    89dc:	d8801115 	stw	r2,68(sp)
    89e0:	88000716 	blt	r17,zero,8a00 <___vfprintf_internal_r+0x490>
    89e4:	d8000a15 	stw	zero,40(sp)
    89e8:	003f8d06 	br	8820 <___vfprintf_internal_r+0x2b0>
    89ec:	d8c01117 	ldw	r3,68(sp)
    89f0:	1c400017 	ldw	r17,0(r3)
    89f4:	18c00104 	addi	r3,r3,4
    89f8:	d8c01115 	stw	r3,68(sp)
    89fc:	883ff90e 	bge	r17,zero,89e4 <___vfprintf_internal_r+0x474>
    8a00:	00800044 	movi	r2,1
    8a04:	0463c83a 	sub	r17,zero,r17
    8a08:	d8800a15 	stw	r2,40(sp)
    8a0c:	003f8406 	br	8820 <___vfprintf_internal_r+0x2b0>
    8a10:	04000044 	movi	r16,1
    8a14:	8700080e 	bge	r16,fp,8a38 <___vfprintf_internal_r+0x4c8>
    8a18:	d9001017 	ldw	r4,64(sp)
    8a1c:	a00b883a 	mov	r5,r20
    8a20:	01800804 	movi	r6,32
    8a24:	e1ffffc4 	addi	r7,fp,-1
    8a28:	00084f00 	call	84f0 <print_repeat>
    8a2c:	103fc71e 	bne	r2,zero,894c <___vfprintf_internal_r+0x3dc>
    8a30:	e5c5883a 	add	r2,fp,r23
    8a34:	15ffffc4 	addi	r23,r2,-1
    8a38:	d8c01117 	ldw	r3,68(sp)
    8a3c:	d9001017 	ldw	r4,64(sp)
    8a40:	800f883a 	mov	r7,r16
    8a44:	18800017 	ldw	r2,0(r3)
    8a48:	a0c00117 	ldw	r3,4(r20)
    8a4c:	a00b883a 	mov	r5,r20
    8a50:	d8800005 	stb	r2,0(sp)
    8a54:	d80d883a 	mov	r6,sp
    8a58:	183ee83a 	callr	r3
    8a5c:	103fbb1e 	bne	r2,zero,894c <___vfprintf_internal_r+0x3dc>
    8a60:	d8801117 	ldw	r2,68(sp)
    8a64:	bdc00044 	addi	r23,r23,1
    8a68:	0021883a 	mov	r16,zero
    8a6c:	10800104 	addi	r2,r2,4
    8a70:	d8801115 	stw	r2,68(sp)
    8a74:	003ed606 	br	85d0 <___vfprintf_internal_r+0x60>
    8a78:	00800204 	movi	r2,8
    8a7c:	d8800d15 	stw	r2,52(sp)
    8a80:	d8000c15 	stw	zero,48(sp)
    8a84:	003fb606 	br	8960 <___vfprintf_internal_r+0x3f0>
    8a88:	d8c01117 	ldw	r3,68(sp)
    8a8c:	1cc00017 	ldw	r19,0(r3)
    8a90:	9809883a 	mov	r4,r19
    8a94:	00084d00 	call	84d0 <strlen>
    8a98:	e0a1c83a 	sub	r16,fp,r2
    8a9c:	1023883a 	mov	r17,r2
    8aa0:	0400070e 	bge	zero,r16,8ac0 <___vfprintf_internal_r+0x550>
    8aa4:	d9001017 	ldw	r4,64(sp)
    8aa8:	a00b883a 	mov	r5,r20
    8aac:	01800804 	movi	r6,32
    8ab0:	800f883a 	mov	r7,r16
    8ab4:	00084f00 	call	84f0 <print_repeat>
    8ab8:	103fa41e 	bne	r2,zero,894c <___vfprintf_internal_r+0x3dc>
    8abc:	bc2f883a 	add	r23,r23,r16
    8ac0:	a0c00117 	ldw	r3,4(r20)
    8ac4:	d9001017 	ldw	r4,64(sp)
    8ac8:	980d883a 	mov	r6,r19
    8acc:	a00b883a 	mov	r5,r20
    8ad0:	880f883a 	mov	r7,r17
    8ad4:	183ee83a 	callr	r3
    8ad8:	103f9c1e 	bne	r2,zero,894c <___vfprintf_internal_r+0x3dc>
    8adc:	d8801117 	ldw	r2,68(sp)
    8ae0:	bc6f883a 	add	r23,r23,r17
    8ae4:	0021883a 	mov	r16,zero
    8ae8:	10800104 	addi	r2,r2,4
    8aec:	d8801115 	stw	r2,68(sp)
    8af0:	003eb706 	br	85d0 <___vfprintf_internal_r+0x60>
    8af4:	210015c4 	addi	r4,r4,87
    8af8:	003f5106 	br	8840 <___vfprintf_internal_r+0x2d0>
    8afc:	04003b16 	blt	zero,r16,8bec <___vfprintf_internal_r+0x67c>
    8b00:	d8c00a17 	ldw	r3,40(sp)
    8b04:	1805003a 	cmpeq	r2,r3,zero
    8b08:	103f7f1e 	bne	r2,zero,8908 <___vfprintf_internal_r+0x398>
    8b0c:	a0c00117 	ldw	r3,4(r20)
    8b10:	d9001017 	ldw	r4,64(sp)
    8b14:	00800b44 	movi	r2,45
    8b18:	d8800005 	stb	r2,0(sp)
    8b1c:	a00b883a 	mov	r5,r20
    8b20:	d80d883a 	mov	r6,sp
    8b24:	01c00044 	movi	r7,1
    8b28:	183ee83a 	callr	r3
    8b2c:	103f871e 	bne	r2,zero,894c <___vfprintf_internal_r+0x3dc>
    8b30:	b8800044 	addi	r2,r23,1
    8b34:	003f7506 	br	890c <___vfprintf_internal_r+0x39c>
    8b38:	0007883a 	mov	r3,zero
    8b3c:	003edb06 	br	86ac <___vfprintf_internal_r+0x13c>
    8b40:	a0c00117 	ldw	r3,4(r20)
    8b44:	d9001017 	ldw	r4,64(sp)
    8b48:	d9400005 	stb	r5,0(sp)
    8b4c:	d80d883a 	mov	r6,sp
    8b50:	a00b883a 	mov	r5,r20
    8b54:	183ee83a 	callr	r3
    8b58:	103f7c1e 	bne	r2,zero,894c <___vfprintf_internal_r+0x3dc>
    8b5c:	bdc00044 	addi	r23,r23,1
    8b60:	003e9b06 	br	85d0 <___vfprintf_internal_r+0x60>
    8b64:	102f883a 	mov	r23,r2
    8b68:	0021883a 	mov	r16,zero
    8b6c:	003e9806 	br	85d0 <___vfprintf_internal_r+0x60>
    8b70:	a0c00117 	ldw	r3,4(r20)
    8b74:	d9000005 	stb	r4,0(sp)
    8b78:	d9001017 	ldw	r4,64(sp)
    8b7c:	a00b883a 	mov	r5,r20
    8b80:	d80d883a 	mov	r6,sp
    8b84:	800f883a 	mov	r7,r16
    8b88:	183ee83a 	callr	r3
    8b8c:	103f6f1e 	bne	r2,zero,894c <___vfprintf_internal_r+0x3dc>
    8b90:	bc2f883a 	add	r23,r23,r16
    8b94:	0021883a 	mov	r16,zero
    8b98:	003e8d06 	br	85d0 <___vfprintf_internal_r+0x60>
    8b9c:	d9001017 	ldw	r4,64(sp)
    8ba0:	a00b883a 	mov	r5,r20
    8ba4:	01800c04 	movi	r6,48
    8ba8:	800f883a 	mov	r7,r16
    8bac:	00084f00 	call	84f0 <print_repeat>
    8bb0:	103f661e 	bne	r2,zero,894c <___vfprintf_internal_r+0x3dc>
    8bb4:	bc05883a 	add	r2,r23,r16
    8bb8:	003f5406 	br	890c <___vfprintf_internal_r+0x39c>
    8bbc:	a0c00117 	ldw	r3,4(r20)
    8bc0:	d9001017 	ldw	r4,64(sp)
    8bc4:	00800b44 	movi	r2,45
    8bc8:	d8800005 	stb	r2,0(sp)
    8bcc:	a00b883a 	mov	r5,r20
    8bd0:	d80d883a 	mov	r6,sp
    8bd4:	01c00044 	movi	r7,1
    8bd8:	183ee83a 	callr	r3
    8bdc:	103f5b1e 	bne	r2,zero,894c <___vfprintf_internal_r+0x3dc>
    8be0:	bdc00044 	addi	r23,r23,1
    8be4:	043f480e 	bge	zero,r16,8908 <___vfprintf_internal_r+0x398>
    8be8:	003fec06 	br	8b9c <___vfprintf_internal_r+0x62c>
    8bec:	d9001017 	ldw	r4,64(sp)
    8bf0:	a00b883a 	mov	r5,r20
    8bf4:	01800804 	movi	r6,32
    8bf8:	800f883a 	mov	r7,r16
    8bfc:	00084f00 	call	84f0 <print_repeat>
    8c00:	103f521e 	bne	r2,zero,894c <___vfprintf_internal_r+0x3dc>
    8c04:	bc2f883a 	add	r23,r23,r16
    8c08:	003fbd06 	br	8b00 <___vfprintf_internal_r+0x590>

00008c0c <__vfprintf_internal>:
    8c0c:	00800074 	movhi	r2,1
    8c10:	10aa8f04 	addi	r2,r2,-21956
    8c14:	2013883a 	mov	r9,r4
    8c18:	11000017 	ldw	r4,0(r2)
    8c1c:	2805883a 	mov	r2,r5
    8c20:	300f883a 	mov	r7,r6
    8c24:	480b883a 	mov	r5,r9
    8c28:	100d883a 	mov	r6,r2
    8c2c:	00085701 	jmpi	8570 <___vfprintf_internal_r>

00008c30 <__sfvwrite_small_dev>:
    8c30:	2880000b 	ldhu	r2,0(r5)
    8c34:	defffa04 	addi	sp,sp,-24
    8c38:	dcc00315 	stw	r19,12(sp)
    8c3c:	1080020c 	andi	r2,r2,8
    8c40:	dc800215 	stw	r18,8(sp)
    8c44:	dc400115 	stw	r17,4(sp)
    8c48:	dfc00515 	stw	ra,20(sp)
    8c4c:	dd000415 	stw	r20,16(sp)
    8c50:	dc000015 	stw	r16,0(sp)
    8c54:	2825883a 	mov	r18,r5
    8c58:	2027883a 	mov	r19,r4
    8c5c:	3023883a 	mov	r17,r6
    8c60:	10002026 	beq	r2,zero,8ce4 <__sfvwrite_small_dev+0xb4>
    8c64:	2940008f 	ldh	r5,2(r5)
    8c68:	28000f16 	blt	r5,zero,8ca8 <__sfvwrite_small_dev+0x78>
    8c6c:	01c01b0e 	bge	zero,r7,8cdc <__sfvwrite_small_dev+0xac>
    8c70:	3821883a 	mov	r16,r7
    8c74:	05010004 	movi	r20,1024
    8c78:	00000206 	br	8c84 <__sfvwrite_small_dev+0x54>
    8c7c:	0400170e 	bge	zero,r16,8cdc <__sfvwrite_small_dev+0xac>
    8c80:	9140008f 	ldh	r5,2(r18)
    8c84:	880d883a 	mov	r6,r17
    8c88:	9809883a 	mov	r4,r19
    8c8c:	800f883a 	mov	r7,r16
    8c90:	a400010e 	bge	r20,r16,8c98 <__sfvwrite_small_dev+0x68>
    8c94:	01c10004 	movi	r7,1024
    8c98:	0008dd00 	call	8dd0 <_write_r>
    8c9c:	88a3883a 	add	r17,r17,r2
    8ca0:	80a1c83a 	sub	r16,r16,r2
    8ca4:	00bff516 	blt	zero,r2,8c7c <__sfvwrite_small_dev+0x4c>
    8ca8:	9080000b 	ldhu	r2,0(r18)
    8cac:	00ffffc4 	movi	r3,-1
    8cb0:	10801014 	ori	r2,r2,64
    8cb4:	9080000d 	sth	r2,0(r18)
    8cb8:	1805883a 	mov	r2,r3
    8cbc:	dfc00517 	ldw	ra,20(sp)
    8cc0:	dd000417 	ldw	r20,16(sp)
    8cc4:	dcc00317 	ldw	r19,12(sp)
    8cc8:	dc800217 	ldw	r18,8(sp)
    8ccc:	dc400117 	ldw	r17,4(sp)
    8cd0:	dc000017 	ldw	r16,0(sp)
    8cd4:	dec00604 	addi	sp,sp,24
    8cd8:	f800283a 	ret
    8cdc:	0007883a 	mov	r3,zero
    8ce0:	003ff506 	br	8cb8 <__sfvwrite_small_dev+0x88>
    8ce4:	00ffffc4 	movi	r3,-1
    8ce8:	003ff306 	br	8cb8 <__sfvwrite_small_dev+0x88>

00008cec <putc>:
    8cec:	defffd04 	addi	sp,sp,-12
    8cf0:	00800074 	movhi	r2,1
    8cf4:	10aa8f04 	addi	r2,r2,-21956
    8cf8:	dc000115 	stw	r16,4(sp)
    8cfc:	2021883a 	mov	r16,r4
    8d00:	11000017 	ldw	r4,0(r2)
    8d04:	dc000005 	stb	r16,0(sp)
    8d08:	00800074 	movhi	r2,1
    8d0c:	10a30c04 	addi	r2,r2,-29648
    8d10:	dfc00215 	stw	ra,8(sp)
    8d14:	28800115 	stw	r2,4(r5)
    8d18:	d80d883a 	mov	r6,sp
    8d1c:	01c00044 	movi	r7,1
    8d20:	103ee83a 	callr	r2
    8d24:	1007883a 	mov	r3,r2
    8d28:	00bfffc4 	movi	r2,-1
    8d2c:	18800526 	beq	r3,r2,8d44 <putc+0x58>
    8d30:	8005883a 	mov	r2,r16
    8d34:	dfc00217 	ldw	ra,8(sp)
    8d38:	dc000117 	ldw	r16,4(sp)
    8d3c:	dec00304 	addi	sp,sp,12
    8d40:	f800283a 	ret
    8d44:	1821883a 	mov	r16,r3
    8d48:	8005883a 	mov	r2,r16
    8d4c:	dfc00217 	ldw	ra,8(sp)
    8d50:	dc000117 	ldw	r16,4(sp)
    8d54:	dec00304 	addi	sp,sp,12
    8d58:	f800283a 	ret

00008d5c <_putc_r>:
    8d5c:	00800074 	movhi	r2,1
    8d60:	10aa8f04 	addi	r2,r2,-21956
    8d64:	defffd04 	addi	sp,sp,-12
    8d68:	11000017 	ldw	r4,0(r2)
    8d6c:	00800074 	movhi	r2,1
    8d70:	10a30c04 	addi	r2,r2,-29648
    8d74:	30800115 	stw	r2,4(r6)
    8d78:	dc000115 	stw	r16,4(sp)
    8d7c:	2821883a 	mov	r16,r5
    8d80:	dfc00215 	stw	ra,8(sp)
    8d84:	300b883a 	mov	r5,r6
    8d88:	01c00044 	movi	r7,1
    8d8c:	d80d883a 	mov	r6,sp
    8d90:	dc000005 	stb	r16,0(sp)
    8d94:	103ee83a 	callr	r2
    8d98:	1007883a 	mov	r3,r2
    8d9c:	00bfffc4 	movi	r2,-1
    8da0:	18800526 	beq	r3,r2,8db8 <_putc_r+0x5c>
    8da4:	8005883a 	mov	r2,r16
    8da8:	dfc00217 	ldw	ra,8(sp)
    8dac:	dc000117 	ldw	r16,4(sp)
    8db0:	dec00304 	addi	sp,sp,12
    8db4:	f800283a 	ret
    8db8:	1821883a 	mov	r16,r3
    8dbc:	8005883a 	mov	r2,r16
    8dc0:	dfc00217 	ldw	ra,8(sp)
    8dc4:	dc000117 	ldw	r16,4(sp)
    8dc8:	dec00304 	addi	sp,sp,12
    8dcc:	f800283a 	ret

00008dd0 <_write_r>:
    8dd0:	defffd04 	addi	sp,sp,-12
    8dd4:	dc000015 	stw	r16,0(sp)
    8dd8:	04000074 	movhi	r16,1
    8ddc:	842b4c04 	addi	r16,r16,-21200
    8de0:	dc400115 	stw	r17,4(sp)
    8de4:	80000015 	stw	zero,0(r16)
    8de8:	2023883a 	mov	r17,r4
    8dec:	2809883a 	mov	r4,r5
    8df0:	300b883a 	mov	r5,r6
    8df4:	380d883a 	mov	r6,r7
    8df8:	dfc00215 	stw	ra,8(sp)
    8dfc:	00091240 	call	9124 <write>
    8e00:	1007883a 	mov	r3,r2
    8e04:	00bfffc4 	movi	r2,-1
    8e08:	18800626 	beq	r3,r2,8e24 <_write_r+0x54>
    8e0c:	1805883a 	mov	r2,r3
    8e10:	dfc00217 	ldw	ra,8(sp)
    8e14:	dc400117 	ldw	r17,4(sp)
    8e18:	dc000017 	ldw	r16,0(sp)
    8e1c:	dec00304 	addi	sp,sp,12
    8e20:	f800283a 	ret
    8e24:	80800017 	ldw	r2,0(r16)
    8e28:	103ff826 	beq	r2,zero,8e0c <_write_r+0x3c>
    8e2c:	88800015 	stw	r2,0(r17)
    8e30:	1805883a 	mov	r2,r3
    8e34:	dfc00217 	ldw	ra,8(sp)
    8e38:	dc400117 	ldw	r17,4(sp)
    8e3c:	dc000017 	ldw	r16,0(sp)
    8e40:	dec00304 	addi	sp,sp,12
    8e44:	f800283a 	ret

00008e48 <udivmodsi4>:
    8e48:	29001b2e 	bgeu	r5,r4,8eb8 <udivmodsi4+0x70>
    8e4c:	28001a16 	blt	r5,zero,8eb8 <udivmodsi4+0x70>
    8e50:	00800044 	movi	r2,1
    8e54:	0007883a 	mov	r3,zero
    8e58:	01c007c4 	movi	r7,31
    8e5c:	00000306 	br	8e6c <udivmodsi4+0x24>
    8e60:	19c01326 	beq	r3,r7,8eb0 <udivmodsi4+0x68>
    8e64:	18c00044 	addi	r3,r3,1
    8e68:	28000416 	blt	r5,zero,8e7c <udivmodsi4+0x34>
    8e6c:	294b883a 	add	r5,r5,r5
    8e70:	1085883a 	add	r2,r2,r2
    8e74:	293ffa36 	bltu	r5,r4,8e60 <udivmodsi4+0x18>
    8e78:	10000d26 	beq	r2,zero,8eb0 <udivmodsi4+0x68>
    8e7c:	0007883a 	mov	r3,zero
    8e80:	21400236 	bltu	r4,r5,8e8c <udivmodsi4+0x44>
    8e84:	2149c83a 	sub	r4,r4,r5
    8e88:	1886b03a 	or	r3,r3,r2
    8e8c:	1004d07a 	srli	r2,r2,1
    8e90:	280ad07a 	srli	r5,r5,1
    8e94:	103ffa1e 	bne	r2,zero,8e80 <udivmodsi4+0x38>
    8e98:	30000226 	beq	r6,zero,8ea4 <udivmodsi4+0x5c>
    8e9c:	2005883a 	mov	r2,r4
    8ea0:	f800283a 	ret
    8ea4:	1809883a 	mov	r4,r3
    8ea8:	2005883a 	mov	r2,r4
    8eac:	f800283a 	ret
    8eb0:	0007883a 	mov	r3,zero
    8eb4:	003ff806 	br	8e98 <udivmodsi4+0x50>
    8eb8:	00800044 	movi	r2,1
    8ebc:	0007883a 	mov	r3,zero
    8ec0:	003fef06 	br	8e80 <udivmodsi4+0x38>

00008ec4 <__divsi3>:
    8ec4:	defffe04 	addi	sp,sp,-8
    8ec8:	dc000015 	stw	r16,0(sp)
    8ecc:	dfc00115 	stw	ra,4(sp)
    8ed0:	0021883a 	mov	r16,zero
    8ed4:	20000c16 	blt	r4,zero,8f08 <__divsi3+0x44>
    8ed8:	000d883a 	mov	r6,zero
    8edc:	28000e16 	blt	r5,zero,8f18 <__divsi3+0x54>
    8ee0:	0008e480 	call	8e48 <udivmodsi4>
    8ee4:	1007883a 	mov	r3,r2
    8ee8:	8005003a 	cmpeq	r2,r16,zero
    8eec:	1000011e 	bne	r2,zero,8ef4 <__divsi3+0x30>
    8ef0:	00c7c83a 	sub	r3,zero,r3
    8ef4:	1805883a 	mov	r2,r3
    8ef8:	dfc00117 	ldw	ra,4(sp)
    8efc:	dc000017 	ldw	r16,0(sp)
    8f00:	dec00204 	addi	sp,sp,8
    8f04:	f800283a 	ret
    8f08:	0109c83a 	sub	r4,zero,r4
    8f0c:	04000044 	movi	r16,1
    8f10:	000d883a 	mov	r6,zero
    8f14:	283ff20e 	bge	r5,zero,8ee0 <__divsi3+0x1c>
    8f18:	014bc83a 	sub	r5,zero,r5
    8f1c:	8021003a 	cmpeq	r16,r16,zero
    8f20:	003fef06 	br	8ee0 <__divsi3+0x1c>

00008f24 <__modsi3>:
    8f24:	deffff04 	addi	sp,sp,-4
    8f28:	dfc00015 	stw	ra,0(sp)
    8f2c:	01800044 	movi	r6,1
    8f30:	2807883a 	mov	r3,r5
    8f34:	20000416 	blt	r4,zero,8f48 <__modsi3+0x24>
    8f38:	28000c16 	blt	r5,zero,8f6c <__modsi3+0x48>
    8f3c:	dfc00017 	ldw	ra,0(sp)
    8f40:	dec00104 	addi	sp,sp,4
    8f44:	0008e481 	jmpi	8e48 <udivmodsi4>
    8f48:	0109c83a 	sub	r4,zero,r4
    8f4c:	28000b16 	blt	r5,zero,8f7c <__modsi3+0x58>
    8f50:	180b883a 	mov	r5,r3
    8f54:	01800044 	movi	r6,1
    8f58:	0008e480 	call	8e48 <udivmodsi4>
    8f5c:	0085c83a 	sub	r2,zero,r2
    8f60:	dfc00017 	ldw	ra,0(sp)
    8f64:	dec00104 	addi	sp,sp,4
    8f68:	f800283a 	ret
    8f6c:	014bc83a 	sub	r5,zero,r5
    8f70:	dfc00017 	ldw	ra,0(sp)
    8f74:	dec00104 	addi	sp,sp,4
    8f78:	0008e481 	jmpi	8e48 <udivmodsi4>
    8f7c:	0147c83a 	sub	r3,zero,r5
    8f80:	003ff306 	br	8f50 <__modsi3+0x2c>

00008f84 <__udivsi3>:
    8f84:	000d883a 	mov	r6,zero
    8f88:	0008e481 	jmpi	8e48 <udivmodsi4>

00008f8c <__umodsi3>:
    8f8c:	01800044 	movi	r6,1
    8f90:	0008e481 	jmpi	8e48 <udivmodsi4>

00008f94 <__mulsi3>:
    8f94:	20000a26 	beq	r4,zero,8fc0 <__mulsi3+0x2c>
    8f98:	0007883a 	mov	r3,zero
    8f9c:	2080004c 	andi	r2,r4,1
    8fa0:	1005003a 	cmpeq	r2,r2,zero
    8fa4:	2008d07a 	srli	r4,r4,1
    8fa8:	1000011e 	bne	r2,zero,8fb0 <__mulsi3+0x1c>
    8fac:	1947883a 	add	r3,r3,r5
    8fb0:	294b883a 	add	r5,r5,r5
    8fb4:	203ff91e 	bne	r4,zero,8f9c <__mulsi3+0x8>
    8fb8:	1805883a 	mov	r2,r3
    8fbc:	f800283a 	ret
    8fc0:	0007883a 	mov	r3,zero
    8fc4:	1805883a 	mov	r2,r3
    8fc8:	f800283a 	ret

00008fcc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8fcc:	defffe04 	addi	sp,sp,-8
    8fd0:	dfc00115 	stw	ra,4(sp)
    8fd4:	df000015 	stw	fp,0(sp)
    8fd8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8fdc:	01000074 	movhi	r4,1
    8fe0:	212a9704 	addi	r4,r4,-21924
    8fe4:	01400074 	movhi	r5,1
    8fe8:	2969e204 	addi	r5,r5,-22648
    8fec:	01800074 	movhi	r6,1
    8ff0:	31aa9704 	addi	r6,r6,-21924
    8ff4:	000904c0 	call	904c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8ff8:	01000074 	movhi	r4,1
    8ffc:	21200804 	addi	r4,r4,-32736
    9000:	01400074 	movhi	r5,1
    9004:	29600804 	addi	r5,r5,-32736
    9008:	01800074 	movhi	r6,1
    900c:	31a00804 	addi	r6,r6,-32736
    9010:	000904c0 	call	904c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9014:	01000074 	movhi	r4,1
    9018:	21292304 	addi	r4,r4,-23412
    901c:	01400074 	movhi	r5,1
    9020:	29692304 	addi	r5,r5,-23412
    9024:	01800074 	movhi	r6,1
    9028:	31a9e204 	addi	r6,r6,-22648
    902c:	000904c0 	call	904c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9030:	00096fc0 	call	96fc <alt_dcache_flush_all>
  alt_icache_flush_all();
    9034:	00099200 	call	9920 <alt_icache_flush_all>
}
    9038:	e037883a 	mov	sp,fp
    903c:	dfc00117 	ldw	ra,4(sp)
    9040:	df000017 	ldw	fp,0(sp)
    9044:	dec00204 	addi	sp,sp,8
    9048:	f800283a 	ret

0000904c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    904c:	defffc04 	addi	sp,sp,-16
    9050:	df000315 	stw	fp,12(sp)
    9054:	df000304 	addi	fp,sp,12
    9058:	e13ffd15 	stw	r4,-12(fp)
    905c:	e17ffe15 	stw	r5,-8(fp)
    9060:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9064:	e0fffe17 	ldw	r3,-8(fp)
    9068:	e0bffd17 	ldw	r2,-12(fp)
    906c:	18800e26 	beq	r3,r2,90a8 <alt_load_section+0x5c>
  {
    while( to != end )
    9070:	00000a06 	br	909c <alt_load_section+0x50>
    {
      *to++ = *from++;
    9074:	e0bffd17 	ldw	r2,-12(fp)
    9078:	10c00017 	ldw	r3,0(r2)
    907c:	e0bffe17 	ldw	r2,-8(fp)
    9080:	10c00015 	stw	r3,0(r2)
    9084:	e0bffe17 	ldw	r2,-8(fp)
    9088:	10800104 	addi	r2,r2,4
    908c:	e0bffe15 	stw	r2,-8(fp)
    9090:	e0bffd17 	ldw	r2,-12(fp)
    9094:	10800104 	addi	r2,r2,4
    9098:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    909c:	e0fffe17 	ldw	r3,-8(fp)
    90a0:	e0bfff17 	ldw	r2,-4(fp)
    90a4:	18bff31e 	bne	r3,r2,9074 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    90a8:	e037883a 	mov	sp,fp
    90ac:	df000017 	ldw	fp,0(sp)
    90b0:	dec00104 	addi	sp,sp,4
    90b4:	f800283a 	ret

000090b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    90b8:	defffd04 	addi	sp,sp,-12
    90bc:	dfc00215 	stw	ra,8(sp)
    90c0:	df000115 	stw	fp,4(sp)
    90c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    90c8:	0009883a 	mov	r4,zero
    90cc:	00092a80 	call	92a8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    90d0:	00092dc0 	call	92dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    90d4:	01000074 	movhi	r4,1
    90d8:	2129d504 	addi	r4,r4,-22700
    90dc:	01400074 	movhi	r5,1
    90e0:	2969d504 	addi	r5,r5,-22700
    90e4:	01800074 	movhi	r6,1
    90e8:	31a9d504 	addi	r6,r6,-22700
    90ec:	0009a140 	call	9a14 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    90f0:	00098580 	call	9858 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    90f4:	01000074 	movhi	r4,1
    90f8:	21262f04 	addi	r4,r4,-26436
    90fc:	000a08c0 	call	a08c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    9100:	d120be17 	ldw	r4,-32008(gp)
    9104:	d160bf17 	ldw	r5,-32004(gp)
    9108:	d1a0c017 	ldw	r6,-32000(gp)
    910c:	00082b40 	call	82b4 <main>
    9110:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9114:	01000044 	movi	r4,1
    9118:	000959c0 	call	959c <close>
  exit (result);
    911c:	e13fff17 	ldw	r4,-4(fp)
    9120:	000a0a00 	call	a0a0 <exit>

00009124 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9124:	defff704 	addi	sp,sp,-36
    9128:	dfc00815 	stw	ra,32(sp)
    912c:	df000715 	stw	fp,28(sp)
    9130:	df000704 	addi	fp,sp,28
    9134:	e13ffb15 	stw	r4,-20(fp)
    9138:	e17ffc15 	stw	r5,-16(fp)
    913c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9140:	e0bffb17 	ldw	r2,-20(fp)
    9144:	1004803a 	cmplt	r2,r2,zero
    9148:	1000091e 	bne	r2,zero,9170 <write+0x4c>
    914c:	e13ffb17 	ldw	r4,-20(fp)
    9150:	01400304 	movi	r5,12
    9154:	0008f940 	call	8f94 <__mulsi3>
    9158:	1007883a 	mov	r3,r2
    915c:	00800074 	movhi	r2,1
    9160:	10aa2f04 	addi	r2,r2,-22340
    9164:	1887883a 	add	r3,r3,r2
    9168:	e0ffff15 	stw	r3,-4(fp)
    916c:	00000106 	br	9174 <write+0x50>
    9170:	e03fff15 	stw	zero,-4(fp)
    9174:	e0bfff17 	ldw	r2,-4(fp)
    9178:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    917c:	e0bffa17 	ldw	r2,-24(fp)
    9180:	1005003a 	cmpeq	r2,r2,zero
    9184:	1000241e 	bne	r2,zero,9218 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    9188:	e0bffa17 	ldw	r2,-24(fp)
    918c:	10800217 	ldw	r2,8(r2)
    9190:	108000cc 	andi	r2,r2,3
    9194:	1005003a 	cmpeq	r2,r2,zero
    9198:	10001a1e 	bne	r2,zero,9204 <write+0xe0>
    919c:	e0bffa17 	ldw	r2,-24(fp)
    91a0:	10800017 	ldw	r2,0(r2)
    91a4:	10800617 	ldw	r2,24(r2)
    91a8:	1005003a 	cmpeq	r2,r2,zero
    91ac:	1000151e 	bne	r2,zero,9204 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    91b0:	e0bffa17 	ldw	r2,-24(fp)
    91b4:	10800017 	ldw	r2,0(r2)
    91b8:	10800617 	ldw	r2,24(r2)
    91bc:	e17ffc17 	ldw	r5,-16(fp)
    91c0:	e1bffd17 	ldw	r6,-12(fp)
    91c4:	e13ffa17 	ldw	r4,-24(fp)
    91c8:	103ee83a 	callr	r2
    91cc:	e0bff915 	stw	r2,-28(fp)
    91d0:	e0bff917 	ldw	r2,-28(fp)
    91d4:	1004403a 	cmpge	r2,r2,zero
    91d8:	1000071e 	bne	r2,zero,91f8 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    91dc:	00092480 	call	9248 <alt_get_errno>
    91e0:	e0fff917 	ldw	r3,-28(fp)
    91e4:	00c7c83a 	sub	r3,zero,r3
    91e8:	10c00015 	stw	r3,0(r2)
        return -1;
    91ec:	00bfffc4 	movi	r2,-1
    91f0:	e0bffe15 	stw	r2,-8(fp)
    91f4:	00000e06 	br	9230 <write+0x10c>
      }
      return rval;
    91f8:	e0bff917 	ldw	r2,-28(fp)
    91fc:	e0bffe15 	stw	r2,-8(fp)
    9200:	00000b06 	br	9230 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9204:	00092480 	call	9248 <alt_get_errno>
    9208:	1007883a 	mov	r3,r2
    920c:	00800344 	movi	r2,13
    9210:	18800015 	stw	r2,0(r3)
    9214:	00000406 	br	9228 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9218:	00092480 	call	9248 <alt_get_errno>
    921c:	1007883a 	mov	r3,r2
    9220:	00801444 	movi	r2,81
    9224:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9228:	00bfffc4 	movi	r2,-1
    922c:	e0bffe15 	stw	r2,-8(fp)
    9230:	e0bffe17 	ldw	r2,-8(fp)
}
    9234:	e037883a 	mov	sp,fp
    9238:	dfc00117 	ldw	ra,4(sp)
    923c:	df000017 	ldw	fp,0(sp)
    9240:	dec00204 	addi	sp,sp,8
    9244:	f800283a 	ret

00009248 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9248:	defffd04 	addi	sp,sp,-12
    924c:	dfc00215 	stw	ra,8(sp)
    9250:	df000115 	stw	fp,4(sp)
    9254:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9258:	00800074 	movhi	r2,1
    925c:	10aa9604 	addi	r2,r2,-21928
    9260:	10800017 	ldw	r2,0(r2)
    9264:	1005003a 	cmpeq	r2,r2,zero
    9268:	1000061e 	bne	r2,zero,9284 <alt_get_errno+0x3c>
    926c:	00800074 	movhi	r2,1
    9270:	10aa9604 	addi	r2,r2,-21928
    9274:	10800017 	ldw	r2,0(r2)
    9278:	103ee83a 	callr	r2
    927c:	e0bfff15 	stw	r2,-4(fp)
    9280:	00000306 	br	9290 <alt_get_errno+0x48>
    9284:	00800074 	movhi	r2,1
    9288:	10ab4c04 	addi	r2,r2,-21200
    928c:	e0bfff15 	stw	r2,-4(fp)
    9290:	e0bfff17 	ldw	r2,-4(fp)
}
    9294:	e037883a 	mov	sp,fp
    9298:	dfc00117 	ldw	ra,4(sp)
    929c:	df000017 	ldw	fp,0(sp)
    92a0:	dec00204 	addi	sp,sp,8
    92a4:	f800283a 	ret

000092a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    92a8:	defffd04 	addi	sp,sp,-12
    92ac:	dfc00215 	stw	ra,8(sp)
    92b0:	df000115 	stw	fp,4(sp)
    92b4:	df000104 	addi	fp,sp,4
    92b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    92bc:	0009de80 	call	9de8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    92c0:	00800044 	movi	r2,1
    92c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    92c8:	e037883a 	mov	sp,fp
    92cc:	dfc00117 	ldw	ra,4(sp)
    92d0:	df000017 	ldw	fp,0(sp)
    92d4:	dec00204 	addi	sp,sp,8
    92d8:	f800283a 	ret

000092dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    92dc:	defffe04 	addi	sp,sp,-8
    92e0:	dfc00115 	stw	ra,4(sp)
    92e4:	df000015 	stw	fp,0(sp)
    92e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    92ec:	01000074 	movhi	r4,1
    92f0:	212a1a04 	addi	r4,r4,-22424
    92f4:	000930c0 	call	930c <alt_dev_reg>
}
    92f8:	e037883a 	mov	sp,fp
    92fc:	dfc00117 	ldw	ra,4(sp)
    9300:	df000017 	ldw	fp,0(sp)
    9304:	dec00204 	addi	sp,sp,8
    9308:	f800283a 	ret

0000930c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    930c:	defffd04 	addi	sp,sp,-12
    9310:	dfc00215 	stw	ra,8(sp)
    9314:	df000115 	stw	fp,4(sp)
    9318:	df000104 	addi	fp,sp,4
    931c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9320:	e13fff17 	ldw	r4,-4(fp)
    9324:	01400074 	movhi	r5,1
    9328:	296a9304 	addi	r5,r5,-21940
    932c:	00097440 	call	9744 <alt_dev_llist_insert>
}
    9330:	e037883a 	mov	sp,fp
    9334:	dfc00117 	ldw	ra,4(sp)
    9338:	df000017 	ldw	fp,0(sp)
    933c:	dec00204 	addi	sp,sp,8
    9340:	f800283a 	ret

00009344 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9344:	defffa04 	addi	sp,sp,-24
    9348:	dfc00515 	stw	ra,20(sp)
    934c:	df000415 	stw	fp,16(sp)
    9350:	df000404 	addi	fp,sp,16
    9354:	e13ffd15 	stw	r4,-12(fp)
    9358:	e17ffe15 	stw	r5,-8(fp)
    935c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9360:	e0bffd17 	ldw	r2,-12(fp)
    9364:	10800017 	ldw	r2,0(r2)
    9368:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    936c:	e0bffc17 	ldw	r2,-16(fp)
    9370:	11000a04 	addi	r4,r2,40
    9374:	e0bffd17 	ldw	r2,-12(fp)
    9378:	11c00217 	ldw	r7,8(r2)
    937c:	e17ffe17 	ldw	r5,-8(fp)
    9380:	e1bfff17 	ldw	r6,-4(fp)
    9384:	00093f40 	call	93f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9388:	e037883a 	mov	sp,fp
    938c:	dfc00117 	ldw	ra,4(sp)
    9390:	df000017 	ldw	fp,0(sp)
    9394:	dec00204 	addi	sp,sp,8
    9398:	f800283a 	ret

0000939c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    939c:	defffa04 	addi	sp,sp,-24
    93a0:	dfc00515 	stw	ra,20(sp)
    93a4:	df000415 	stw	fp,16(sp)
    93a8:	df000404 	addi	fp,sp,16
    93ac:	e13ffd15 	stw	r4,-12(fp)
    93b0:	e17ffe15 	stw	r5,-8(fp)
    93b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    93b8:	e0bffd17 	ldw	r2,-12(fp)
    93bc:	10800017 	ldw	r2,0(r2)
    93c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    93c4:	e0bffc17 	ldw	r2,-16(fp)
    93c8:	11000a04 	addi	r4,r2,40
    93cc:	e0bffd17 	ldw	r2,-12(fp)
    93d0:	11c00217 	ldw	r7,8(r2)
    93d4:	e17ffe17 	ldw	r5,-8(fp)
    93d8:	e1bfff17 	ldw	r6,-4(fp)
    93dc:	00094f80 	call	94f8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    93e0:	e037883a 	mov	sp,fp
    93e4:	dfc00117 	ldw	ra,4(sp)
    93e8:	df000017 	ldw	fp,0(sp)
    93ec:	dec00204 	addi	sp,sp,8
    93f0:	f800283a 	ret

000093f4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    93f4:	defff604 	addi	sp,sp,-40
    93f8:	df000915 	stw	fp,36(sp)
    93fc:	df000904 	addi	fp,sp,36
    9400:	e13ffb15 	stw	r4,-20(fp)
    9404:	e17ffc15 	stw	r5,-16(fp)
    9408:	e1bffd15 	stw	r6,-12(fp)
    940c:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    9410:	e0bffb17 	ldw	r2,-20(fp)
    9414:	10800017 	ldw	r2,0(r2)
    9418:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    941c:	e0bffc17 	ldw	r2,-16(fp)
    9420:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    9424:	e0bffd17 	ldw	r2,-12(fp)
    9428:	1007883a 	mov	r3,r2
    942c:	e0bffc17 	ldw	r2,-16(fp)
    9430:	10c5883a 	add	r2,r2,r3
    9434:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    9438:	00001606 	br	9494 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    943c:	e0bffa17 	ldw	r2,-24(fp)
    9440:	10800037 	ldwio	r2,0(r2)
    9444:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9448:	e0bff717 	ldw	r2,-36(fp)
    944c:	10a0000c 	andi	r2,r2,32768
    9450:	1005003a 	cmpeq	r2,r2,zero
    9454:	1000081e 	bne	r2,zero,9478 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9458:	e0bff717 	ldw	r2,-36(fp)
    945c:	1007883a 	mov	r3,r2
    9460:	e0bff917 	ldw	r2,-28(fp)
    9464:	10c00005 	stb	r3,0(r2)
    9468:	e0bff917 	ldw	r2,-28(fp)
    946c:	10800044 	addi	r2,r2,1
    9470:	e0bff915 	stw	r2,-28(fp)
    9474:	00000706 	br	9494 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    9478:	e0fff917 	ldw	r3,-28(fp)
    947c:	e0bffc17 	ldw	r2,-16(fp)
    9480:	1880071e 	bne	r3,r2,94a0 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    9484:	e0bffe17 	ldw	r2,-8(fp)
    9488:	1090000c 	andi	r2,r2,16384
    948c:	1004c03a 	cmpne	r2,r2,zero
    9490:	1000031e 	bne	r2,zero,94a0 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9494:	e0fff917 	ldw	r3,-28(fp)
    9498:	e0bff817 	ldw	r2,-32(fp)
    949c:	18bfe736 	bltu	r3,r2,943c <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    94a0:	e0fff917 	ldw	r3,-28(fp)
    94a4:	e0bffc17 	ldw	r2,-16(fp)
    94a8:	18800526 	beq	r3,r2,94c0 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    94ac:	e0fff917 	ldw	r3,-28(fp)
    94b0:	e0bffc17 	ldw	r2,-16(fp)
    94b4:	1887c83a 	sub	r3,r3,r2
    94b8:	e0ffff15 	stw	r3,-4(fp)
    94bc:	00000906 	br	94e4 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    94c0:	e0bffe17 	ldw	r2,-8(fp)
    94c4:	1090000c 	andi	r2,r2,16384
    94c8:	1005003a 	cmpeq	r2,r2,zero
    94cc:	1000031e 	bne	r2,zero,94dc <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    94d0:	00bffd44 	movi	r2,-11
    94d4:	e0bfff15 	stw	r2,-4(fp)
    94d8:	00000206 	br	94e4 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    94dc:	00bffec4 	movi	r2,-5
    94e0:	e0bfff15 	stw	r2,-4(fp)
    94e4:	e0bfff17 	ldw	r2,-4(fp)
}
    94e8:	e037883a 	mov	sp,fp
    94ec:	df000017 	ldw	fp,0(sp)
    94f0:	dec00104 	addi	sp,sp,4
    94f4:	f800283a 	ret

000094f8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    94f8:	defff904 	addi	sp,sp,-28
    94fc:	df000615 	stw	fp,24(sp)
    9500:	df000604 	addi	fp,sp,24
    9504:	e13ffc15 	stw	r4,-16(fp)
    9508:	e17ffd15 	stw	r5,-12(fp)
    950c:	e1bffe15 	stw	r6,-8(fp)
    9510:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9514:	e0bffc17 	ldw	r2,-16(fp)
    9518:	10800017 	ldw	r2,0(r2)
    951c:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    9520:	e0bffe17 	ldw	r2,-8(fp)
    9524:	1007883a 	mov	r3,r2
    9528:	e0bffd17 	ldw	r2,-12(fp)
    952c:	10c5883a 	add	r2,r2,r3
    9530:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9534:	00001106 	br	957c <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9538:	e0bffb17 	ldw	r2,-20(fp)
    953c:	10800104 	addi	r2,r2,4
    9540:	10800037 	ldwio	r2,0(r2)
    9544:	10bfffec 	andhi	r2,r2,65535
    9548:	1005003a 	cmpeq	r2,r2,zero
    954c:	10000b1e 	bne	r2,zero,957c <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9550:	e13ffb17 	ldw	r4,-20(fp)
    9554:	e0bffd17 	ldw	r2,-12(fp)
    9558:	10800003 	ldbu	r2,0(r2)
    955c:	10c03fcc 	andi	r3,r2,255
    9560:	18c0201c 	xori	r3,r3,128
    9564:	18ffe004 	addi	r3,r3,-128
    9568:	e0bffd17 	ldw	r2,-12(fp)
    956c:	10800044 	addi	r2,r2,1
    9570:	e0bffd15 	stw	r2,-12(fp)
    9574:	2005883a 	mov	r2,r4
    9578:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    957c:	e0fffd17 	ldw	r3,-12(fp)
    9580:	e0bffa17 	ldw	r2,-24(fp)
    9584:	18bfec36 	bltu	r3,r2,9538 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9588:	e0bffe17 	ldw	r2,-8(fp)
}
    958c:	e037883a 	mov	sp,fp
    9590:	df000017 	ldw	fp,0(sp)
    9594:	dec00104 	addi	sp,sp,4
    9598:	f800283a 	ret

0000959c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    959c:	defff804 	addi	sp,sp,-32
    95a0:	dfc00715 	stw	ra,28(sp)
    95a4:	df000615 	stw	fp,24(sp)
    95a8:	df000604 	addi	fp,sp,24
    95ac:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    95b0:	e0bffc17 	ldw	r2,-16(fp)
    95b4:	1004803a 	cmplt	r2,r2,zero
    95b8:	1000091e 	bne	r2,zero,95e0 <close+0x44>
    95bc:	e13ffc17 	ldw	r4,-16(fp)
    95c0:	01400304 	movi	r5,12
    95c4:	0008f940 	call	8f94 <__mulsi3>
    95c8:	1007883a 	mov	r3,r2
    95cc:	00800074 	movhi	r2,1
    95d0:	10aa2f04 	addi	r2,r2,-22340
    95d4:	1887883a 	add	r3,r3,r2
    95d8:	e0ffff15 	stw	r3,-4(fp)
    95dc:	00000106 	br	95e4 <close+0x48>
    95e0:	e03fff15 	stw	zero,-4(fp)
    95e4:	e0bfff17 	ldw	r2,-4(fp)
    95e8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    95ec:	e0bffb17 	ldw	r2,-20(fp)
    95f0:	1005003a 	cmpeq	r2,r2,zero
    95f4:	10001d1e 	bne	r2,zero,966c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    95f8:	e0bffb17 	ldw	r2,-20(fp)
    95fc:	10800017 	ldw	r2,0(r2)
    9600:	10800417 	ldw	r2,16(r2)
    9604:	1005003a 	cmpeq	r2,r2,zero
    9608:	1000071e 	bne	r2,zero,9628 <close+0x8c>
    960c:	e0bffb17 	ldw	r2,-20(fp)
    9610:	10800017 	ldw	r2,0(r2)
    9614:	10800417 	ldw	r2,16(r2)
    9618:	e13ffb17 	ldw	r4,-20(fp)
    961c:	103ee83a 	callr	r2
    9620:	e0bffe15 	stw	r2,-8(fp)
    9624:	00000106 	br	962c <close+0x90>
    9628:	e03ffe15 	stw	zero,-8(fp)
    962c:	e0bffe17 	ldw	r2,-8(fp)
    9630:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9634:	e13ffc17 	ldw	r4,-16(fp)
    9638:	0009d700 	call	9d70 <alt_release_fd>
    if (rval < 0)
    963c:	e0bffa17 	ldw	r2,-24(fp)
    9640:	1004403a 	cmpge	r2,r2,zero
    9644:	1000071e 	bne	r2,zero,9664 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    9648:	000969c0 	call	969c <alt_get_errno>
    964c:	e0fffa17 	ldw	r3,-24(fp)
    9650:	00c7c83a 	sub	r3,zero,r3
    9654:	10c00015 	stw	r3,0(r2)
      return -1;
    9658:	00bfffc4 	movi	r2,-1
    965c:	e0bffd15 	stw	r2,-12(fp)
    9660:	00000806 	br	9684 <close+0xe8>
    }
    return 0;
    9664:	e03ffd15 	stw	zero,-12(fp)
    9668:	00000606 	br	9684 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    966c:	000969c0 	call	969c <alt_get_errno>
    9670:	1007883a 	mov	r3,r2
    9674:	00801444 	movi	r2,81
    9678:	18800015 	stw	r2,0(r3)
    return -1;
    967c:	00bfffc4 	movi	r2,-1
    9680:	e0bffd15 	stw	r2,-12(fp)
    9684:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9688:	e037883a 	mov	sp,fp
    968c:	dfc00117 	ldw	ra,4(sp)
    9690:	df000017 	ldw	fp,0(sp)
    9694:	dec00204 	addi	sp,sp,8
    9698:	f800283a 	ret

0000969c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    969c:	defffd04 	addi	sp,sp,-12
    96a0:	dfc00215 	stw	ra,8(sp)
    96a4:	df000115 	stw	fp,4(sp)
    96a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    96ac:	00800074 	movhi	r2,1
    96b0:	10aa9604 	addi	r2,r2,-21928
    96b4:	10800017 	ldw	r2,0(r2)
    96b8:	1005003a 	cmpeq	r2,r2,zero
    96bc:	1000061e 	bne	r2,zero,96d8 <alt_get_errno+0x3c>
    96c0:	00800074 	movhi	r2,1
    96c4:	10aa9604 	addi	r2,r2,-21928
    96c8:	10800017 	ldw	r2,0(r2)
    96cc:	103ee83a 	callr	r2
    96d0:	e0bfff15 	stw	r2,-4(fp)
    96d4:	00000306 	br	96e4 <alt_get_errno+0x48>
    96d8:	00800074 	movhi	r2,1
    96dc:	10ab4c04 	addi	r2,r2,-21200
    96e0:	e0bfff15 	stw	r2,-4(fp)
    96e4:	e0bfff17 	ldw	r2,-4(fp)
}
    96e8:	e037883a 	mov	sp,fp
    96ec:	dfc00117 	ldw	ra,4(sp)
    96f0:	df000017 	ldw	fp,0(sp)
    96f4:	dec00204 	addi	sp,sp,8
    96f8:	f800283a 	ret

000096fc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    96fc:	deffff04 	addi	sp,sp,-4
    9700:	df000015 	stw	fp,0(sp)
    9704:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9708:	e037883a 	mov	sp,fp
    970c:	df000017 	ldw	fp,0(sp)
    9710:	dec00104 	addi	sp,sp,4
    9714:	f800283a 	ret

00009718 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9718:	defffc04 	addi	sp,sp,-16
    971c:	df000315 	stw	fp,12(sp)
    9720:	df000304 	addi	fp,sp,12
    9724:	e13ffd15 	stw	r4,-12(fp)
    9728:	e17ffe15 	stw	r5,-8(fp)
    972c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9730:	e0bfff17 	ldw	r2,-4(fp)
}
    9734:	e037883a 	mov	sp,fp
    9738:	df000017 	ldw	fp,0(sp)
    973c:	dec00104 	addi	sp,sp,4
    9740:	f800283a 	ret

00009744 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9744:	defff904 	addi	sp,sp,-28
    9748:	dfc00615 	stw	ra,24(sp)
    974c:	df000515 	stw	fp,20(sp)
    9750:	df000504 	addi	fp,sp,20
    9754:	e13ffd15 	stw	r4,-12(fp)
    9758:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    975c:	e0bffd17 	ldw	r2,-12(fp)
    9760:	1005003a 	cmpeq	r2,r2,zero
    9764:	1000041e 	bne	r2,zero,9778 <alt_dev_llist_insert+0x34>
    9768:	e0bffd17 	ldw	r2,-12(fp)
    976c:	10800217 	ldw	r2,8(r2)
    9770:	1004c03a 	cmpne	r2,r2,zero
    9774:	1000071e 	bne	r2,zero,9794 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    9778:	00097f80 	call	97f8 <alt_get_errno>
    977c:	1007883a 	mov	r3,r2
    9780:	00800584 	movi	r2,22
    9784:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9788:	00bffa84 	movi	r2,-22
    978c:	e0bfff15 	stw	r2,-4(fp)
    9790:	00001306 	br	97e0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9794:	e0fffd17 	ldw	r3,-12(fp)
    9798:	e0bffe17 	ldw	r2,-8(fp)
    979c:	e0bffb15 	stw	r2,-20(fp)
    97a0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    97a4:	e0fffc17 	ldw	r3,-16(fp)
    97a8:	e0bffb17 	ldw	r2,-20(fp)
    97ac:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    97b0:	e0bffb17 	ldw	r2,-20(fp)
    97b4:	10c00017 	ldw	r3,0(r2)
    97b8:	e0bffc17 	ldw	r2,-16(fp)
    97bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    97c0:	e0bffb17 	ldw	r2,-20(fp)
    97c4:	10c00017 	ldw	r3,0(r2)
    97c8:	e0bffc17 	ldw	r2,-16(fp)
    97cc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    97d0:	e0fffb17 	ldw	r3,-20(fp)
    97d4:	e0bffc17 	ldw	r2,-16(fp)
    97d8:	18800015 	stw	r2,0(r3)

  return 0;  
    97dc:	e03fff15 	stw	zero,-4(fp)
    97e0:	e0bfff17 	ldw	r2,-4(fp)
}
    97e4:	e037883a 	mov	sp,fp
    97e8:	dfc00117 	ldw	ra,4(sp)
    97ec:	df000017 	ldw	fp,0(sp)
    97f0:	dec00204 	addi	sp,sp,8
    97f4:	f800283a 	ret

000097f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    97f8:	defffd04 	addi	sp,sp,-12
    97fc:	dfc00215 	stw	ra,8(sp)
    9800:	df000115 	stw	fp,4(sp)
    9804:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9808:	00800074 	movhi	r2,1
    980c:	10aa9604 	addi	r2,r2,-21928
    9810:	10800017 	ldw	r2,0(r2)
    9814:	1005003a 	cmpeq	r2,r2,zero
    9818:	1000061e 	bne	r2,zero,9834 <alt_get_errno+0x3c>
    981c:	00800074 	movhi	r2,1
    9820:	10aa9604 	addi	r2,r2,-21928
    9824:	10800017 	ldw	r2,0(r2)
    9828:	103ee83a 	callr	r2
    982c:	e0bfff15 	stw	r2,-4(fp)
    9830:	00000306 	br	9840 <alt_get_errno+0x48>
    9834:	00800074 	movhi	r2,1
    9838:	10ab4c04 	addi	r2,r2,-21200
    983c:	e0bfff15 	stw	r2,-4(fp)
    9840:	e0bfff17 	ldw	r2,-4(fp)
}
    9844:	e037883a 	mov	sp,fp
    9848:	dfc00117 	ldw	ra,4(sp)
    984c:	df000017 	ldw	fp,0(sp)
    9850:	dec00204 	addi	sp,sp,8
    9854:	f800283a 	ret

00009858 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9858:	defffd04 	addi	sp,sp,-12
    985c:	dfc00215 	stw	ra,8(sp)
    9860:	df000115 	stw	fp,4(sp)
    9864:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9868:	00bfff04 	movi	r2,-4
    986c:	00c00074 	movhi	r3,1
    9870:	18e92304 	addi	r3,r3,-23412
    9874:	1885883a 	add	r2,r3,r2
    9878:	e0bfff15 	stw	r2,-4(fp)
    987c:	00000606 	br	9898 <_do_ctors+0x40>
        (*ctor) (); 
    9880:	e0bfff17 	ldw	r2,-4(fp)
    9884:	10800017 	ldw	r2,0(r2)
    9888:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    988c:	e0bfff17 	ldw	r2,-4(fp)
    9890:	10bfff04 	addi	r2,r2,-4
    9894:	e0bfff15 	stw	r2,-4(fp)
    9898:	e0ffff17 	ldw	r3,-4(fp)
    989c:	00800074 	movhi	r2,1
    98a0:	10a92204 	addi	r2,r2,-23416
    98a4:	18bff62e 	bgeu	r3,r2,9880 <_do_ctors+0x28>
        (*ctor) (); 
}
    98a8:	e037883a 	mov	sp,fp
    98ac:	dfc00117 	ldw	ra,4(sp)
    98b0:	df000017 	ldw	fp,0(sp)
    98b4:	dec00204 	addi	sp,sp,8
    98b8:	f800283a 	ret

000098bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    98bc:	defffd04 	addi	sp,sp,-12
    98c0:	dfc00215 	stw	ra,8(sp)
    98c4:	df000115 	stw	fp,4(sp)
    98c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    98cc:	00bfff04 	movi	r2,-4
    98d0:	00c00074 	movhi	r3,1
    98d4:	18e92304 	addi	r3,r3,-23412
    98d8:	1885883a 	add	r2,r3,r2
    98dc:	e0bfff15 	stw	r2,-4(fp)
    98e0:	00000606 	br	98fc <_do_dtors+0x40>
        (*dtor) (); 
    98e4:	e0bfff17 	ldw	r2,-4(fp)
    98e8:	10800017 	ldw	r2,0(r2)
    98ec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    98f0:	e0bfff17 	ldw	r2,-4(fp)
    98f4:	10bfff04 	addi	r2,r2,-4
    98f8:	e0bfff15 	stw	r2,-4(fp)
    98fc:	e0ffff17 	ldw	r3,-4(fp)
    9900:	00800074 	movhi	r2,1
    9904:	10a92304 	addi	r2,r2,-23412
    9908:	18bff62e 	bgeu	r3,r2,98e4 <_do_dtors+0x28>
        (*dtor) (); 
}
    990c:	e037883a 	mov	sp,fp
    9910:	dfc00117 	ldw	ra,4(sp)
    9914:	df000017 	ldw	fp,0(sp)
    9918:	dec00204 	addi	sp,sp,8
    991c:	f800283a 	ret

00009920 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9920:	deffff04 	addi	sp,sp,-4
    9924:	df000015 	stw	fp,0(sp)
    9928:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    992c:	e037883a 	mov	sp,fp
    9930:	df000017 	ldw	fp,0(sp)
    9934:	dec00104 	addi	sp,sp,4
    9938:	f800283a 	ret

0000993c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    993c:	defff804 	addi	sp,sp,-32
    9940:	dfc00715 	stw	ra,28(sp)
    9944:	df000615 	stw	fp,24(sp)
    9948:	dc000515 	stw	r16,20(sp)
    994c:	df000504 	addi	fp,sp,20
    9950:	e13ffc15 	stw	r4,-16(fp)
    9954:	e17ffd15 	stw	r5,-12(fp)
    9958:	e1bffe15 	stw	r6,-8(fp)
    995c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    9960:	e13ffd17 	ldw	r4,-12(fp)
    9964:	e17ffe17 	ldw	r5,-8(fp)
    9968:	e1bfff17 	ldw	r6,-4(fp)
    996c:	0009b840 	call	9b84 <open>
    9970:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    9974:	e0bffb17 	ldw	r2,-20(fp)
    9978:	1004803a 	cmplt	r2,r2,zero
    997c:	10001f1e 	bne	r2,zero,99fc <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    9980:	e13ffb17 	ldw	r4,-20(fp)
    9984:	04000074 	movhi	r16,1
    9988:	842a2f04 	addi	r16,r16,-22340
    998c:	01400304 	movi	r5,12
    9990:	0008f940 	call	8f94 <__mulsi3>
    9994:	1405883a 	add	r2,r2,r16
    9998:	10c00017 	ldw	r3,0(r2)
    999c:	e0bffc17 	ldw	r2,-16(fp)
    99a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    99a4:	e13ffb17 	ldw	r4,-20(fp)
    99a8:	04000074 	movhi	r16,1
    99ac:	842a2f04 	addi	r16,r16,-22340
    99b0:	01400304 	movi	r5,12
    99b4:	0008f940 	call	8f94 <__mulsi3>
    99b8:	1405883a 	add	r2,r2,r16
    99bc:	10800104 	addi	r2,r2,4
    99c0:	10c00017 	ldw	r3,0(r2)
    99c4:	e0bffc17 	ldw	r2,-16(fp)
    99c8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    99cc:	e13ffb17 	ldw	r4,-20(fp)
    99d0:	04000074 	movhi	r16,1
    99d4:	842a2f04 	addi	r16,r16,-22340
    99d8:	01400304 	movi	r5,12
    99dc:	0008f940 	call	8f94 <__mulsi3>
    99e0:	1405883a 	add	r2,r2,r16
    99e4:	10800204 	addi	r2,r2,8
    99e8:	10c00017 	ldw	r3,0(r2)
    99ec:	e0bffc17 	ldw	r2,-16(fp)
    99f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    99f4:	e13ffb17 	ldw	r4,-20(fp)
    99f8:	0009d700 	call	9d70 <alt_release_fd>
  }
} 
    99fc:	e037883a 	mov	sp,fp
    9a00:	dfc00217 	ldw	ra,8(sp)
    9a04:	df000117 	ldw	fp,4(sp)
    9a08:	dc000017 	ldw	r16,0(sp)
    9a0c:	dec00304 	addi	sp,sp,12
    9a10:	f800283a 	ret

00009a14 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9a14:	defffb04 	addi	sp,sp,-20
    9a18:	dfc00415 	stw	ra,16(sp)
    9a1c:	df000315 	stw	fp,12(sp)
    9a20:	df000304 	addi	fp,sp,12
    9a24:	e13ffd15 	stw	r4,-12(fp)
    9a28:	e17ffe15 	stw	r5,-8(fp)
    9a2c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9a30:	01000074 	movhi	r4,1
    9a34:	212a3204 	addi	r4,r4,-22328
    9a38:	e17ffd17 	ldw	r5,-12(fp)
    9a3c:	01800044 	movi	r6,1
    9a40:	01c07fc4 	movi	r7,511
    9a44:	000993c0 	call	993c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9a48:	01000074 	movhi	r4,1
    9a4c:	212a2f04 	addi	r4,r4,-22340
    9a50:	e17ffe17 	ldw	r5,-8(fp)
    9a54:	000d883a 	mov	r6,zero
    9a58:	01c07fc4 	movi	r7,511
    9a5c:	000993c0 	call	993c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9a60:	01000074 	movhi	r4,1
    9a64:	212a3504 	addi	r4,r4,-22316
    9a68:	e17fff17 	ldw	r5,-4(fp)
    9a6c:	01800044 	movi	r6,1
    9a70:	01c07fc4 	movi	r7,511
    9a74:	000993c0 	call	993c <alt_open_fd>
}  
    9a78:	e037883a 	mov	sp,fp
    9a7c:	dfc00117 	ldw	ra,4(sp)
    9a80:	df000017 	ldw	fp,0(sp)
    9a84:	dec00204 	addi	sp,sp,8
    9a88:	f800283a 	ret

00009a8c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9a8c:	defffa04 	addi	sp,sp,-24
    9a90:	dfc00515 	stw	ra,20(sp)
    9a94:	df000415 	stw	fp,16(sp)
    9a98:	dc000315 	stw	r16,12(sp)
    9a9c:	df000304 	addi	fp,sp,12
    9aa0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9aa4:	e0bffe17 	ldw	r2,-8(fp)
    9aa8:	10800217 	ldw	r2,8(r2)
    9aac:	10d00034 	orhi	r3,r2,16384
    9ab0:	e0bffe17 	ldw	r2,-8(fp)
    9ab4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9ab8:	e03ffd15 	stw	zero,-12(fp)
    9abc:	00002306 	br	9b4c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9ac0:	e13ffd17 	ldw	r4,-12(fp)
    9ac4:	04000074 	movhi	r16,1
    9ac8:	842a2f04 	addi	r16,r16,-22340
    9acc:	01400304 	movi	r5,12
    9ad0:	0008f940 	call	8f94 <__mulsi3>
    9ad4:	1405883a 	add	r2,r2,r16
    9ad8:	10c00017 	ldw	r3,0(r2)
    9adc:	e0bffe17 	ldw	r2,-8(fp)
    9ae0:	10800017 	ldw	r2,0(r2)
    9ae4:	1880161e 	bne	r3,r2,9b40 <alt_file_locked+0xb4>
    9ae8:	e13ffd17 	ldw	r4,-12(fp)
    9aec:	04000074 	movhi	r16,1
    9af0:	842a2f04 	addi	r16,r16,-22340
    9af4:	01400304 	movi	r5,12
    9af8:	0008f940 	call	8f94 <__mulsi3>
    9afc:	1405883a 	add	r2,r2,r16
    9b00:	10800204 	addi	r2,r2,8
    9b04:	10800017 	ldw	r2,0(r2)
    9b08:	1004403a 	cmpge	r2,r2,zero
    9b0c:	10000c1e 	bne	r2,zero,9b40 <alt_file_locked+0xb4>
    9b10:	e13ffd17 	ldw	r4,-12(fp)
    9b14:	01400304 	movi	r5,12
    9b18:	0008f940 	call	8f94 <__mulsi3>
    9b1c:	1007883a 	mov	r3,r2
    9b20:	00800074 	movhi	r2,1
    9b24:	10aa2f04 	addi	r2,r2,-22340
    9b28:	1887883a 	add	r3,r3,r2
    9b2c:	e0bffe17 	ldw	r2,-8(fp)
    9b30:	18800326 	beq	r3,r2,9b40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9b34:	00bffcc4 	movi	r2,-13
    9b38:	e0bfff15 	stw	r2,-4(fp)
    9b3c:	00000a06 	br	9b68 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9b40:	e0bffd17 	ldw	r2,-12(fp)
    9b44:	10800044 	addi	r2,r2,1
    9b48:	e0bffd15 	stw	r2,-12(fp)
    9b4c:	00800074 	movhi	r2,1
    9b50:	10aa9504 	addi	r2,r2,-21932
    9b54:	10800017 	ldw	r2,0(r2)
    9b58:	1007883a 	mov	r3,r2
    9b5c:	e0bffd17 	ldw	r2,-12(fp)
    9b60:	18bfd72e 	bgeu	r3,r2,9ac0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9b64:	e03fff15 	stw	zero,-4(fp)
    9b68:	e0bfff17 	ldw	r2,-4(fp)
}
    9b6c:	e037883a 	mov	sp,fp
    9b70:	dfc00217 	ldw	ra,8(sp)
    9b74:	df000117 	ldw	fp,4(sp)
    9b78:	dc000017 	ldw	r16,0(sp)
    9b7c:	dec00304 	addi	sp,sp,12
    9b80:	f800283a 	ret

00009b84 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9b84:	defff404 	addi	sp,sp,-48
    9b88:	dfc00b15 	stw	ra,44(sp)
    9b8c:	df000a15 	stw	fp,40(sp)
    9b90:	df000a04 	addi	fp,sp,40
    9b94:	e13ffb15 	stw	r4,-20(fp)
    9b98:	e17ffc15 	stw	r5,-16(fp)
    9b9c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9ba0:	00bfffc4 	movi	r2,-1
    9ba4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    9ba8:	00bffb44 	movi	r2,-19
    9bac:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    9bb0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9bb4:	e13ffb17 	ldw	r4,-20(fp)
    9bb8:	01400074 	movhi	r5,1
    9bbc:	296a9304 	addi	r5,r5,-21940
    9bc0:	0009e080 	call	9e08 <alt_find_dev>
    9bc4:	e0bffa15 	stw	r2,-24(fp)
    9bc8:	e0bffa17 	ldw	r2,-24(fp)
    9bcc:	1004c03a 	cmpne	r2,r2,zero
    9bd0:	1000051e 	bne	r2,zero,9be8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9bd4:	e13ffb17 	ldw	r4,-20(fp)
    9bd8:	0009e9c0 	call	9e9c <alt_find_file>
    9bdc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    9be0:	00800044 	movi	r2,1
    9be4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9be8:	e0bffa17 	ldw	r2,-24(fp)
    9bec:	1005003a 	cmpeq	r2,r2,zero
    9bf0:	1000311e 	bne	r2,zero,9cb8 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9bf4:	e13ffa17 	ldw	r4,-24(fp)
    9bf8:	0009fbc0 	call	9fbc <alt_get_fd>
    9bfc:	e0bff815 	stw	r2,-32(fp)
    9c00:	e0bff817 	ldw	r2,-32(fp)
    9c04:	1004403a 	cmpge	r2,r2,zero
    9c08:	1000031e 	bne	r2,zero,9c18 <open+0x94>
    {
      status = index;
    9c0c:	e0bff817 	ldw	r2,-32(fp)
    9c10:	e0bff715 	stw	r2,-36(fp)
    9c14:	00002a06 	br	9cc0 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    9c18:	e13ff817 	ldw	r4,-32(fp)
    9c1c:	01400304 	movi	r5,12
    9c20:	0008f940 	call	8f94 <__mulsi3>
    9c24:	1007883a 	mov	r3,r2
    9c28:	00800074 	movhi	r2,1
    9c2c:	10aa2f04 	addi	r2,r2,-22340
    9c30:	1885883a 	add	r2,r3,r2
    9c34:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9c38:	e0fffc17 	ldw	r3,-16(fp)
    9c3c:	00900034 	movhi	r2,16384
    9c40:	10bfffc4 	addi	r2,r2,-1
    9c44:	1886703a 	and	r3,r3,r2
    9c48:	e0bff917 	ldw	r2,-28(fp)
    9c4c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9c50:	e0bff617 	ldw	r2,-40(fp)
    9c54:	1004c03a 	cmpne	r2,r2,zero
    9c58:	1000061e 	bne	r2,zero,9c74 <open+0xf0>
    9c5c:	e13ff917 	ldw	r4,-28(fp)
    9c60:	0009a8c0 	call	9a8c <alt_file_locked>
    9c64:	e0bff715 	stw	r2,-36(fp)
    9c68:	e0bff717 	ldw	r2,-36(fp)
    9c6c:	1004803a 	cmplt	r2,r2,zero
    9c70:	1000131e 	bne	r2,zero,9cc0 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9c74:	e0bffa17 	ldw	r2,-24(fp)
    9c78:	10800317 	ldw	r2,12(r2)
    9c7c:	1005003a 	cmpeq	r2,r2,zero
    9c80:	1000091e 	bne	r2,zero,9ca8 <open+0x124>
    9c84:	e0bffa17 	ldw	r2,-24(fp)
    9c88:	10800317 	ldw	r2,12(r2)
    9c8c:	e13ff917 	ldw	r4,-28(fp)
    9c90:	e17ffb17 	ldw	r5,-20(fp)
    9c94:	e1bffc17 	ldw	r6,-16(fp)
    9c98:	e1fffd17 	ldw	r7,-12(fp)
    9c9c:	103ee83a 	callr	r2
    9ca0:	e0bfff15 	stw	r2,-4(fp)
    9ca4:	00000106 	br	9cac <open+0x128>
    9ca8:	e03fff15 	stw	zero,-4(fp)
    9cac:	e0bfff17 	ldw	r2,-4(fp)
    9cb0:	e0bff715 	stw	r2,-36(fp)
    9cb4:	00000206 	br	9cc0 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9cb8:	00bffb44 	movi	r2,-19
    9cbc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9cc0:	e0bff717 	ldw	r2,-36(fp)
    9cc4:	1004403a 	cmpge	r2,r2,zero
    9cc8:	1000091e 	bne	r2,zero,9cf0 <open+0x16c>
  {
    alt_release_fd (index);  
    9ccc:	e13ff817 	ldw	r4,-32(fp)
    9cd0:	0009d700 	call	9d70 <alt_release_fd>
    ALT_ERRNO = -status;
    9cd4:	0009d100 	call	9d10 <alt_get_errno>
    9cd8:	e0fff717 	ldw	r3,-36(fp)
    9cdc:	00c7c83a 	sub	r3,zero,r3
    9ce0:	10c00015 	stw	r3,0(r2)
    return -1;
    9ce4:	00bfffc4 	movi	r2,-1
    9ce8:	e0bffe15 	stw	r2,-8(fp)
    9cec:	00000206 	br	9cf8 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    9cf0:	e0bff817 	ldw	r2,-32(fp)
    9cf4:	e0bffe15 	stw	r2,-8(fp)
    9cf8:	e0bffe17 	ldw	r2,-8(fp)
}
    9cfc:	e037883a 	mov	sp,fp
    9d00:	dfc00117 	ldw	ra,4(sp)
    9d04:	df000017 	ldw	fp,0(sp)
    9d08:	dec00204 	addi	sp,sp,8
    9d0c:	f800283a 	ret

00009d10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9d10:	defffd04 	addi	sp,sp,-12
    9d14:	dfc00215 	stw	ra,8(sp)
    9d18:	df000115 	stw	fp,4(sp)
    9d1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9d20:	00800074 	movhi	r2,1
    9d24:	10aa9604 	addi	r2,r2,-21928
    9d28:	10800017 	ldw	r2,0(r2)
    9d2c:	1005003a 	cmpeq	r2,r2,zero
    9d30:	1000061e 	bne	r2,zero,9d4c <alt_get_errno+0x3c>
    9d34:	00800074 	movhi	r2,1
    9d38:	10aa9604 	addi	r2,r2,-21928
    9d3c:	10800017 	ldw	r2,0(r2)
    9d40:	103ee83a 	callr	r2
    9d44:	e0bfff15 	stw	r2,-4(fp)
    9d48:	00000306 	br	9d58 <alt_get_errno+0x48>
    9d4c:	00800074 	movhi	r2,1
    9d50:	10ab4c04 	addi	r2,r2,-21200
    9d54:	e0bfff15 	stw	r2,-4(fp)
    9d58:	e0bfff17 	ldw	r2,-4(fp)
}
    9d5c:	e037883a 	mov	sp,fp
    9d60:	dfc00117 	ldw	ra,4(sp)
    9d64:	df000017 	ldw	fp,0(sp)
    9d68:	dec00204 	addi	sp,sp,8
    9d6c:	f800283a 	ret

00009d70 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9d70:	defffc04 	addi	sp,sp,-16
    9d74:	dfc00315 	stw	ra,12(sp)
    9d78:	df000215 	stw	fp,8(sp)
    9d7c:	dc000115 	stw	r16,4(sp)
    9d80:	df000104 	addi	fp,sp,4
    9d84:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9d88:	e0bfff17 	ldw	r2,-4(fp)
    9d8c:	108000d0 	cmplti	r2,r2,3
    9d90:	10000f1e 	bne	r2,zero,9dd0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    9d94:	e13fff17 	ldw	r4,-4(fp)
    9d98:	04000074 	movhi	r16,1
    9d9c:	842a2f04 	addi	r16,r16,-22340
    9da0:	01400304 	movi	r5,12
    9da4:	0008f940 	call	8f94 <__mulsi3>
    9da8:	1405883a 	add	r2,r2,r16
    9dac:	10800204 	addi	r2,r2,8
    9db0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9db4:	e13fff17 	ldw	r4,-4(fp)
    9db8:	04000074 	movhi	r16,1
    9dbc:	842a2f04 	addi	r16,r16,-22340
    9dc0:	01400304 	movi	r5,12
    9dc4:	0008f940 	call	8f94 <__mulsi3>
    9dc8:	1405883a 	add	r2,r2,r16
    9dcc:	10000015 	stw	zero,0(r2)
  }
}
    9dd0:	e037883a 	mov	sp,fp
    9dd4:	dfc00217 	ldw	ra,8(sp)
    9dd8:	df000117 	ldw	fp,4(sp)
    9ddc:	dc000017 	ldw	r16,0(sp)
    9de0:	dec00304 	addi	sp,sp,12
    9de4:	f800283a 	ret

00009de8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    9de8:	deffff04 	addi	sp,sp,-4
    9dec:	df000015 	stw	fp,0(sp)
    9df0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9df4:	000170fa 	wrctl	ienable,zero
}
    9df8:	e037883a 	mov	sp,fp
    9dfc:	df000017 	ldw	fp,0(sp)
    9e00:	dec00104 	addi	sp,sp,4
    9e04:	f800283a 	ret

00009e08 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9e08:	defff904 	addi	sp,sp,-28
    9e0c:	dfc00615 	stw	ra,24(sp)
    9e10:	df000515 	stw	fp,20(sp)
    9e14:	df000504 	addi	fp,sp,20
    9e18:	e13ffd15 	stw	r4,-12(fp)
    9e1c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9e20:	e0bffe17 	ldw	r2,-8(fp)
    9e24:	10800017 	ldw	r2,0(r2)
    9e28:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9e2c:	e13ffd17 	ldw	r4,-12(fp)
    9e30:	00084d00 	call	84d0 <strlen>
    9e34:	10800044 	addi	r2,r2,1
    9e38:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9e3c:	00000d06 	br	9e74 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9e40:	e0bffc17 	ldw	r2,-16(fp)
    9e44:	11000217 	ldw	r4,8(r2)
    9e48:	e1bffb17 	ldw	r6,-20(fp)
    9e4c:	e17ffd17 	ldw	r5,-12(fp)
    9e50:	000a0c00 	call	a0c0 <memcmp>
    9e54:	1004c03a 	cmpne	r2,r2,zero
    9e58:	1000031e 	bne	r2,zero,9e68 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9e5c:	e0bffc17 	ldw	r2,-16(fp)
    9e60:	e0bfff15 	stw	r2,-4(fp)
    9e64:	00000706 	br	9e84 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9e68:	e0bffc17 	ldw	r2,-16(fp)
    9e6c:	10800017 	ldw	r2,0(r2)
    9e70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9e74:	e0fffe17 	ldw	r3,-8(fp)
    9e78:	e0bffc17 	ldw	r2,-16(fp)
    9e7c:	10fff01e 	bne	r2,r3,9e40 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9e80:	e03fff15 	stw	zero,-4(fp)
    9e84:	e0bfff17 	ldw	r2,-4(fp)
}
    9e88:	e037883a 	mov	sp,fp
    9e8c:	dfc00117 	ldw	ra,4(sp)
    9e90:	df000017 	ldw	fp,0(sp)
    9e94:	dec00204 	addi	sp,sp,8
    9e98:	f800283a 	ret

00009e9c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9e9c:	defffa04 	addi	sp,sp,-24
    9ea0:	dfc00515 	stw	ra,20(sp)
    9ea4:	df000415 	stw	fp,16(sp)
    9ea8:	df000404 	addi	fp,sp,16
    9eac:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9eb0:	00800074 	movhi	r2,1
    9eb4:	10aa9104 	addi	r2,r2,-21948
    9eb8:	10800017 	ldw	r2,0(r2)
    9ebc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9ec0:	00003306 	br	9f90 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    9ec4:	e0bffd17 	ldw	r2,-12(fp)
    9ec8:	11000217 	ldw	r4,8(r2)
    9ecc:	00084d00 	call	84d0 <strlen>
    9ed0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    9ed4:	e0bffd17 	ldw	r2,-12(fp)
    9ed8:	10c00217 	ldw	r3,8(r2)
    9edc:	e0bffc17 	ldw	r2,-16(fp)
    9ee0:	1885883a 	add	r2,r3,r2
    9ee4:	10bfffc4 	addi	r2,r2,-1
    9ee8:	10800003 	ldbu	r2,0(r2)
    9eec:	10803fcc 	andi	r2,r2,255
    9ef0:	1080201c 	xori	r2,r2,128
    9ef4:	10bfe004 	addi	r2,r2,-128
    9ef8:	10800bd8 	cmpnei	r2,r2,47
    9efc:	1000031e 	bne	r2,zero,9f0c <alt_find_file+0x70>
    {
      len -= 1;
    9f00:	e0bffc17 	ldw	r2,-16(fp)
    9f04:	10bfffc4 	addi	r2,r2,-1
    9f08:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9f0c:	e0bffc17 	ldw	r2,-16(fp)
    9f10:	1007883a 	mov	r3,r2
    9f14:	e0bffe17 	ldw	r2,-8(fp)
    9f18:	1885883a 	add	r2,r3,r2
    9f1c:	10800003 	ldbu	r2,0(r2)
    9f20:	10803fcc 	andi	r2,r2,255
    9f24:	1080201c 	xori	r2,r2,128
    9f28:	10bfe004 	addi	r2,r2,-128
    9f2c:	10800be0 	cmpeqi	r2,r2,47
    9f30:	10000a1e 	bne	r2,zero,9f5c <alt_find_file+0xc0>
    9f34:	e0bffc17 	ldw	r2,-16(fp)
    9f38:	1007883a 	mov	r3,r2
    9f3c:	e0bffe17 	ldw	r2,-8(fp)
    9f40:	1885883a 	add	r2,r3,r2
    9f44:	10800003 	ldbu	r2,0(r2)
    9f48:	10803fcc 	andi	r2,r2,255
    9f4c:	1080201c 	xori	r2,r2,128
    9f50:	10bfe004 	addi	r2,r2,-128
    9f54:	1004c03a 	cmpne	r2,r2,zero
    9f58:	10000a1e 	bne	r2,zero,9f84 <alt_find_file+0xe8>
    9f5c:	e0bffd17 	ldw	r2,-12(fp)
    9f60:	11000217 	ldw	r4,8(r2)
    9f64:	e1bffc17 	ldw	r6,-16(fp)
    9f68:	e17ffe17 	ldw	r5,-8(fp)
    9f6c:	000a0c00 	call	a0c0 <memcmp>
    9f70:	1004c03a 	cmpne	r2,r2,zero
    9f74:	1000031e 	bne	r2,zero,9f84 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9f78:	e0bffd17 	ldw	r2,-12(fp)
    9f7c:	e0bfff15 	stw	r2,-4(fp)
    9f80:	00000806 	br	9fa4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    9f84:	e0bffd17 	ldw	r2,-12(fp)
    9f88:	10800017 	ldw	r2,0(r2)
    9f8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9f90:	00c00074 	movhi	r3,1
    9f94:	18ea9104 	addi	r3,r3,-21948
    9f98:	e0bffd17 	ldw	r2,-12(fp)
    9f9c:	10ffc91e 	bne	r2,r3,9ec4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9fa0:	e03fff15 	stw	zero,-4(fp)
    9fa4:	e0bfff17 	ldw	r2,-4(fp)
}
    9fa8:	e037883a 	mov	sp,fp
    9fac:	dfc00117 	ldw	ra,4(sp)
    9fb0:	df000017 	ldw	fp,0(sp)
    9fb4:	dec00204 	addi	sp,sp,8
    9fb8:	f800283a 	ret

00009fbc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9fbc:	defffa04 	addi	sp,sp,-24
    9fc0:	dfc00515 	stw	ra,20(sp)
    9fc4:	df000415 	stw	fp,16(sp)
    9fc8:	dc000315 	stw	r16,12(sp)
    9fcc:	df000304 	addi	fp,sp,12
    9fd0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    9fd4:	00bffa04 	movi	r2,-24
    9fd8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9fdc:	e03ffe15 	stw	zero,-8(fp)
    9fe0:	00002006 	br	a064 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    9fe4:	e13ffe17 	ldw	r4,-8(fp)
    9fe8:	04000074 	movhi	r16,1
    9fec:	842a2f04 	addi	r16,r16,-22340
    9ff0:	01400304 	movi	r5,12
    9ff4:	0008f940 	call	8f94 <__mulsi3>
    9ff8:	1405883a 	add	r2,r2,r16
    9ffc:	10800017 	ldw	r2,0(r2)
    a000:	1004c03a 	cmpne	r2,r2,zero
    a004:	1000141e 	bne	r2,zero,a058 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    a008:	e13ffe17 	ldw	r4,-8(fp)
    a00c:	04000074 	movhi	r16,1
    a010:	842a2f04 	addi	r16,r16,-22340
    a014:	01400304 	movi	r5,12
    a018:	0008f940 	call	8f94 <__mulsi3>
    a01c:	1407883a 	add	r3,r2,r16
    a020:	e0bfff17 	ldw	r2,-4(fp)
    a024:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    a028:	00800074 	movhi	r2,1
    a02c:	10aa9504 	addi	r2,r2,-21932
    a030:	10c00017 	ldw	r3,0(r2)
    a034:	e0bffe17 	ldw	r2,-8(fp)
    a038:	1880040e 	bge	r3,r2,a04c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    a03c:	00c00074 	movhi	r3,1
    a040:	18ea9504 	addi	r3,r3,-21932
    a044:	e0bffe17 	ldw	r2,-8(fp)
    a048:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    a04c:	e0bffe17 	ldw	r2,-8(fp)
    a050:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a054:	00000606 	br	a070 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a058:	e0bffe17 	ldw	r2,-8(fp)
    a05c:	10800044 	addi	r2,r2,1
    a060:	e0bffe15 	stw	r2,-8(fp)
    a064:	e0bffe17 	ldw	r2,-8(fp)
    a068:	10800810 	cmplti	r2,r2,32
    a06c:	103fdd1e 	bne	r2,zero,9fe4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a070:	e0bffd17 	ldw	r2,-12(fp)
}
    a074:	e037883a 	mov	sp,fp
    a078:	dfc00217 	ldw	ra,8(sp)
    a07c:	df000117 	ldw	fp,4(sp)
    a080:	dc000017 	ldw	r16,0(sp)
    a084:	dec00304 	addi	sp,sp,12
    a088:	f800283a 	ret

0000a08c <atexit>:
    a08c:	200b883a 	mov	r5,r4
    a090:	000d883a 	mov	r6,zero
    a094:	0009883a 	mov	r4,zero
    a098:	000f883a 	mov	r7,zero
    a09c:	000a0fc1 	jmpi	a0fc <__register_exitproc>

0000a0a0 <exit>:
    a0a0:	defffe04 	addi	sp,sp,-8
    a0a4:	dc400015 	stw	r17,0(sp)
    a0a8:	000b883a 	mov	r5,zero
    a0ac:	2023883a 	mov	r17,r4
    a0b0:	dfc00115 	stw	ra,4(sp)
    a0b4:	000a26c0 	call	a26c <__call_exitprocs>
    a0b8:	8809883a 	mov	r4,r17
    a0bc:	000a4680 	call	a468 <_exit>

0000a0c0 <memcmp>:
    a0c0:	31ffffc4 	addi	r7,r6,-1
    a0c4:	3000061e 	bne	r6,zero,a0e0 <memcmp+0x20>
    a0c8:	00000a06 	br	a0f4 <memcmp+0x34>
    a0cc:	39ffffc4 	addi	r7,r7,-1
    a0d0:	00bfffc4 	movi	r2,-1
    a0d4:	21000044 	addi	r4,r4,1
    a0d8:	29400044 	addi	r5,r5,1
    a0dc:	38800526 	beq	r7,r2,a0f4 <memcmp+0x34>
    a0e0:	20c00003 	ldbu	r3,0(r4)
    a0e4:	28800003 	ldbu	r2,0(r5)
    a0e8:	18bff826 	beq	r3,r2,a0cc <memcmp+0xc>
    a0ec:	1885c83a 	sub	r2,r3,r2
    a0f0:	f800283a 	ret
    a0f4:	0005883a 	mov	r2,zero
    a0f8:	f800283a 	ret

0000a0fc <__register_exitproc>:
    a0fc:	defff904 	addi	sp,sp,-28
    a100:	00800074 	movhi	r2,1
    a104:	10aa9004 	addi	r2,r2,-21952
    a108:	dc400115 	stw	r17,4(sp)
    a10c:	14400017 	ldw	r17,0(r2)
    a110:	dc000015 	stw	r16,0(sp)
    a114:	dd400515 	stw	r21,20(sp)
    a118:	8c000c17 	ldw	r16,48(r17)
    a11c:	dd000415 	stw	r20,16(sp)
    a120:	dcc00315 	stw	r19,12(sp)
    a124:	dc800215 	stw	r18,8(sp)
    a128:	dfc00615 	stw	ra,24(sp)
    a12c:	2025883a 	mov	r18,r4
    a130:	282b883a 	mov	r21,r5
    a134:	3029883a 	mov	r20,r6
    a138:	3827883a 	mov	r19,r7
    a13c:	80002626 	beq	r16,zero,a1d8 <__register_exitproc+0xdc>
    a140:	81400117 	ldw	r5,4(r16)
    a144:	008007c4 	movi	r2,31
    a148:	11403716 	blt	r2,r5,a228 <__register_exitproc+0x12c>
    a14c:	90002026 	beq	r18,zero,a1d0 <__register_exitproc+0xd4>
    a150:	81802217 	ldw	r6,136(r16)
    a154:	30002926 	beq	r6,zero,a1fc <__register_exitproc+0x100>
    a158:	81400117 	ldw	r5,4(r16)
    a15c:	00c00044 	movi	r3,1
    a160:	31004017 	ldw	r4,256(r6)
    a164:	1946983a 	sll	r3,r3,r5
    a168:	2945883a 	add	r2,r5,r5
    a16c:	1085883a 	add	r2,r2,r2
    a170:	1185883a 	add	r2,r2,r6
    a174:	20c8b03a 	or	r4,r4,r3
    a178:	14c02015 	stw	r19,128(r2)
    a17c:	15000015 	stw	r20,0(r2)
    a180:	00800084 	movi	r2,2
    a184:	31004015 	stw	r4,256(r6)
    a188:	90801826 	beq	r18,r2,a1ec <__register_exitproc+0xf0>
    a18c:	2945883a 	add	r2,r5,r5
    a190:	1085883a 	add	r2,r2,r2
    a194:	1405883a 	add	r2,r2,r16
    a198:	28c00044 	addi	r3,r5,1
    a19c:	0009883a 	mov	r4,zero
    a1a0:	15400215 	stw	r21,8(r2)
    a1a4:	80c00115 	stw	r3,4(r16)
    a1a8:	2005883a 	mov	r2,r4
    a1ac:	dfc00617 	ldw	ra,24(sp)
    a1b0:	dd400517 	ldw	r21,20(sp)
    a1b4:	dd000417 	ldw	r20,16(sp)
    a1b8:	dcc00317 	ldw	r19,12(sp)
    a1bc:	dc800217 	ldw	r18,8(sp)
    a1c0:	dc400117 	ldw	r17,4(sp)
    a1c4:	dc000017 	ldw	r16,0(sp)
    a1c8:	dec00704 	addi	sp,sp,28
    a1cc:	f800283a 	ret
    a1d0:	81400117 	ldw	r5,4(r16)
    a1d4:	003fed06 	br	a18c <__register_exitproc+0x90>
    a1d8:	00800074 	movhi	r2,1
    a1dc:	10ab5004 	addi	r2,r2,-21184
    a1e0:	1021883a 	mov	r16,r2
    a1e4:	88800c15 	stw	r2,48(r17)
    a1e8:	003fd506 	br	a140 <__register_exitproc+0x44>
    a1ec:	30804117 	ldw	r2,260(r6)
    a1f0:	10c4b03a 	or	r2,r2,r3
    a1f4:	30804115 	stw	r2,260(r6)
    a1f8:	003fe406 	br	a18c <__register_exitproc+0x90>
    a1fc:	00800034 	movhi	r2,0
    a200:	10800004 	addi	r2,r2,0
    a204:	10000b26 	beq	r2,zero,a234 <__register_exitproc+0x138>
    a208:	01004204 	movi	r4,264
    a20c:	103ee83a 	callr	r2
    a210:	10000826 	beq	r2,zero,a234 <__register_exitproc+0x138>
    a214:	100d883a 	mov	r6,r2
    a218:	10004015 	stw	zero,256(r2)
    a21c:	10004115 	stw	zero,260(r2)
    a220:	80802215 	stw	r2,136(r16)
    a224:	003fcc06 	br	a158 <__register_exitproc+0x5c>
    a228:	00800034 	movhi	r2,0
    a22c:	10800004 	addi	r2,r2,0
    a230:	1000021e 	bne	r2,zero,a23c <__register_exitproc+0x140>
    a234:	013fffc4 	movi	r4,-1
    a238:	003fdb06 	br	a1a8 <__register_exitproc+0xac>
    a23c:	01002304 	movi	r4,140
    a240:	103ee83a 	callr	r2
    a244:	1007883a 	mov	r3,r2
    a248:	103ffa26 	beq	r2,zero,a234 <__register_exitproc+0x138>
    a24c:	88800c17 	ldw	r2,48(r17)
    a250:	1821883a 	mov	r16,r3
    a254:	18000115 	stw	zero,4(r3)
    a258:	18800015 	stw	r2,0(r3)
    a25c:	88c00c15 	stw	r3,48(r17)
    a260:	903fdb26 	beq	r18,zero,a1d0 <__register_exitproc+0xd4>
    a264:	003fba06 	br	a150 <__register_exitproc+0x54>

0000a268 <register_fini>:
    a268:	f800283a 	ret

0000a26c <__call_exitprocs>:
    a26c:	defff304 	addi	sp,sp,-52
    a270:	00800074 	movhi	r2,1
    a274:	10aa9004 	addi	r2,r2,-21952
    a278:	df000b15 	stw	fp,44(sp)
    a27c:	17000017 	ldw	fp,0(r2)
    a280:	00800034 	movhi	r2,0
    a284:	10800004 	addi	r2,r2,0
    a288:	1005003a 	cmpeq	r2,r2,zero
    a28c:	d8800215 	stw	r2,8(sp)
    a290:	e0800c04 	addi	r2,fp,48
    a294:	dd800915 	stw	r22,36(sp)
    a298:	dd400815 	stw	r21,32(sp)
    a29c:	dfc00c15 	stw	ra,48(sp)
    a2a0:	ddc00a15 	stw	r23,40(sp)
    a2a4:	dd000715 	stw	r20,28(sp)
    a2a8:	dcc00615 	stw	r19,24(sp)
    a2ac:	dc800515 	stw	r18,20(sp)
    a2b0:	dc400415 	stw	r17,16(sp)
    a2b4:	dc000315 	stw	r16,12(sp)
    a2b8:	282d883a 	mov	r22,r5
    a2bc:	d9000115 	stw	r4,4(sp)
    a2c0:	d8800015 	stw	r2,0(sp)
    a2c4:	282b003a 	cmpeq	r21,r5,zero
    a2c8:	e4400c17 	ldw	r17,48(fp)
    a2cc:	88001226 	beq	r17,zero,a318 <__call_exitprocs+0xac>
    a2d0:	ddc00017 	ldw	r23,0(sp)
    a2d4:	88800117 	ldw	r2,4(r17)
    a2d8:	8c802217 	ldw	r18,136(r17)
    a2dc:	143fffc4 	addi	r16,r2,-1
    a2e0:	80000b16 	blt	r16,zero,a310 <__call_exitprocs+0xa4>
    a2e4:	9027003a 	cmpeq	r19,r18,zero
    a2e8:	a800171e 	bne	r21,zero,a348 <__call_exitprocs+0xdc>
    a2ec:	9800051e 	bne	r19,zero,a304 <__call_exitprocs+0x98>
    a2f0:	8409883a 	add	r4,r16,r16
    a2f4:	2105883a 	add	r2,r4,r4
    a2f8:	1485883a 	add	r2,r2,r18
    a2fc:	10c02017 	ldw	r3,128(r2)
    a300:	b0c01226 	beq	r22,r3,a34c <__call_exitprocs+0xe0>
    a304:	843fffc4 	addi	r16,r16,-1
    a308:	00bfffc4 	movi	r2,-1
    a30c:	80bff61e 	bne	r16,r2,a2e8 <__call_exitprocs+0x7c>
    a310:	d8800217 	ldw	r2,8(sp)
    a314:	10003226 	beq	r2,zero,a3e0 <__call_exitprocs+0x174>
    a318:	dfc00c17 	ldw	ra,48(sp)
    a31c:	df000b17 	ldw	fp,44(sp)
    a320:	ddc00a17 	ldw	r23,40(sp)
    a324:	dd800917 	ldw	r22,36(sp)
    a328:	dd400817 	ldw	r21,32(sp)
    a32c:	dd000717 	ldw	r20,28(sp)
    a330:	dcc00617 	ldw	r19,24(sp)
    a334:	dc800517 	ldw	r18,20(sp)
    a338:	dc400417 	ldw	r17,16(sp)
    a33c:	dc000317 	ldw	r16,12(sp)
    a340:	dec00d04 	addi	sp,sp,52
    a344:	f800283a 	ret
    a348:	8409883a 	add	r4,r16,r16
    a34c:	88c00117 	ldw	r3,4(r17)
    a350:	2105883a 	add	r2,r4,r4
    a354:	1445883a 	add	r2,r2,r17
    a358:	18ffffc4 	addi	r3,r3,-1
    a35c:	11800217 	ldw	r6,8(r2)
    a360:	1c001826 	beq	r3,r16,a3c4 <__call_exitprocs+0x158>
    a364:	10000215 	stw	zero,8(r2)
    a368:	303fe626 	beq	r6,zero,a304 <__call_exitprocs+0x98>
    a36c:	8d000117 	ldw	r20,4(r17)
    a370:	9800121e 	bne	r19,zero,a3bc <__call_exitprocs+0x150>
    a374:	00c00044 	movi	r3,1
    a378:	1c06983a 	sll	r3,r3,r16
    a37c:	90804017 	ldw	r2,256(r18)
    a380:	1884703a 	and	r2,r3,r2
    a384:	10000d26 	beq	r2,zero,a3bc <__call_exitprocs+0x150>
    a388:	90804117 	ldw	r2,260(r18)
    a38c:	1884703a 	and	r2,r3,r2
    a390:	10000e1e 	bne	r2,zero,a3cc <__call_exitprocs+0x160>
    a394:	2105883a 	add	r2,r4,r4
    a398:	1485883a 	add	r2,r2,r18
    a39c:	11400017 	ldw	r5,0(r2)
    a3a0:	d9000117 	ldw	r4,4(sp)
    a3a4:	303ee83a 	callr	r6
    a3a8:	88800117 	ldw	r2,4(r17)
    a3ac:	a0bfc61e 	bne	r20,r2,a2c8 <__call_exitprocs+0x5c>
    a3b0:	b8800017 	ldw	r2,0(r23)
    a3b4:	147fd326 	beq	r2,r17,a304 <__call_exitprocs+0x98>
    a3b8:	003fc306 	br	a2c8 <__call_exitprocs+0x5c>
    a3bc:	303ee83a 	callr	r6
    a3c0:	003ff906 	br	a3a8 <__call_exitprocs+0x13c>
    a3c4:	8c000115 	stw	r16,4(r17)
    a3c8:	003fe706 	br	a368 <__call_exitprocs+0xfc>
    a3cc:	2105883a 	add	r2,r4,r4
    a3d0:	1485883a 	add	r2,r2,r18
    a3d4:	11000017 	ldw	r4,0(r2)
    a3d8:	303ee83a 	callr	r6
    a3dc:	003ff206 	br	a3a8 <__call_exitprocs+0x13c>
    a3e0:	88800117 	ldw	r2,4(r17)
    a3e4:	10000b1e 	bne	r2,zero,a414 <__call_exitprocs+0x1a8>
    a3e8:	89000017 	ldw	r4,0(r17)
    a3ec:	20000a26 	beq	r4,zero,a418 <__call_exitprocs+0x1ac>
    a3f0:	b9000015 	stw	r4,0(r23)
    a3f4:	90000226 	beq	r18,zero,a400 <__call_exitprocs+0x194>
    a3f8:	9009883a 	mov	r4,r18
    a3fc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a400:	8809883a 	mov	r4,r17
    a404:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a408:	bc400017 	ldw	r17,0(r23)
    a40c:	883fb11e 	bne	r17,zero,a2d4 <__call_exitprocs+0x68>
    a410:	003fc106 	br	a318 <__call_exitprocs+0xac>
    a414:	89000017 	ldw	r4,0(r17)
    a418:	882f883a 	mov	r23,r17
    a41c:	2023883a 	mov	r17,r4
    a420:	883fac1e 	bne	r17,zero,a2d4 <__call_exitprocs+0x68>
    a424:	003fbc06 	br	a318 <__call_exitprocs+0xac>

0000a428 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    a428:	defffd04 	addi	sp,sp,-12
    a42c:	df000215 	stw	fp,8(sp)
    a430:	df000204 	addi	fp,sp,8
    a434:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    a438:	e0bfff17 	ldw	r2,-4(fp)
    a43c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a440:	e0bffe17 	ldw	r2,-8(fp)
    a444:	1005003a 	cmpeq	r2,r2,zero
    a448:	1000021e 	bne	r2,zero,a454 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    a44c:	002af070 	cmpltui	zero,zero,43969
    a450:	00000106 	br	a458 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    a454:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    a458:	e037883a 	mov	sp,fp
    a45c:	df000017 	ldw	fp,0(sp)
    a460:	dec00104 	addi	sp,sp,4
    a464:	f800283a 	ret

0000a468 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a468:	defffd04 	addi	sp,sp,-12
    a46c:	dfc00215 	stw	ra,8(sp)
    a470:	df000115 	stw	fp,4(sp)
    a474:	df000104 	addi	fp,sp,4
    a478:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    a47c:	e13fff17 	ldw	r4,-4(fp)
    a480:	000a4280 	call	a428 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a484:	003fff06 	br	a484 <_exit+0x1c>
    a488:	0000a268 	cmpgeui	zero,zero,649
