
sha256.elf:     file format elf32-littlenios2
sha256.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002788 memsz 0x00002788 flags r-x
    LOAD off    0x000037a8 vaddr 0x0000a7a8 paddr 0x0000aa7c align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00003d50 vaddr 0x0000ad50 paddr 0x0000ad50 align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000256c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  0000a58c  0000a58c  0000358c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  0000a7a8  0000aa7c  000037a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  0000ad50  0000ad50  00003d50  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00003a7c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000004e8  00000000  00000000  00003aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000006ce  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009c66  00000000  00000000  0000465e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000023e5  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000620d  00000000  00000000  000106a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000888  00000000  00000000  000168b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000e16  00000000  00000000  00017140  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000187a  00000000  00000000  00017f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  000197d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  000197e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001b149  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0001b14c  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001b158  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0001b159  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  0001b15a  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0001b165  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  0001b170  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  0001b17b  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000023  00000000  00000000  0001b181  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0002a922  00000000  00000000  0001b1a4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
0000a58c l    d  .rodata	00000000 .rodata
0000a7a8 l    d  .rwdata	00000000 .rwdata
0000ad50 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 source.c
0000a58c l     O .rodata	00000040 input_block_2.2202
0000a5cc l     O .rodata	00000040 input_block_1.2201
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000085f0 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a7a8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008f48 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
0000914c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00009348 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000a888 l     O .rwdata	0000002c jtag_uart_0
0000940c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
0000979c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009818 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000098f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009a3c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00009b8c l     F .text	000000f8 alt_file_locked
00009e10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000a368 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000a528 l     F .text	00000040 alt_sim_halt
00008508 g     F .text	0000001c putchar
000091b8 g     F .text	0000006c alt_main
0000852c g     F .text	00000090 _puts_r
0000aa7c g       *ABS*	00000000 __flash_rwdata_start
00008470 g     F .text	00000054 printf
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ad50 g     O .bss	00000004 errno
0000ad58 g     O .bss	00000004 alt_argv
00012a5c g       *ABS*	00000000 _gp
0000a8dc g     O .rwdata	00000180 alt_fd_list
00008524 g     F .text	00000008 _putchar_r
00009f08 g     F .text	00000094 alt_find_dev
00009b14 g     F .text	00000078 alt_io_redirect
0000a58c g       *ABS*	00000000 __DTOR_END__
000085bc g     F .text	00000014 puts
000094f4 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000084c4 g     F .text	00000044 _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00009084 g     F .text	00000008 __udivsi3
0000aa74 g     O .rwdata	00000004 alt_max_fd
0000aa60 g     O .rwdata	00000004 _global_impure_ptr
0000adec g       *ABS*	00000000 __bss_end
0000a8b4 g     O .rwdata	00000028 alt_dev_null
000097fc g     F .text	0000001c alt_dcache_flush_all
0000aa7c g       *ABS*	00000000 __ram_rwdata_end
0000aa6c g     O .rwdata	00000008 alt_dev_list
00009224 g     F .text	00000124 write
00008e5c g     F .text	00000074 _putc_r
0000a7a8 g       *ABS*	00000000 __ram_rodata_end
0000908c g     F .text	00000008 __umodsi3
0000adec g       *ABS*	00000000 end
0000a588 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
000095f8 g     F .text	000000a4 altera_avalon_jtag_uart_write
00008670 g     F .text	0000069c ___vfprintf_internal_r
0000a36c g     F .text	000001bc __call_exitprocs
00008020 g     F .text	0000003c _start
000093dc g     F .text	00000030 alt_sys_init
0000a1fc g     F .text	0000016c __register_exitproc
00009094 g     F .text	00000038 __mulsi3
0000a7a8 g       *ABS*	00000000 __ram_rwdata_start
0000a58c g       *ABS*	00000000 __ram_rodata_start
00009444 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000a0bc g     F .text	000000d0 alt_get_fd
0000a1c0 g     F .text	0000003c memcmp
0000adec g       *ABS*	00000000 __alt_stack_base
00009f9c g     F .text	00000120 alt_find_file
00009844 g     F .text	000000b4 alt_dev_llist_insert
00008d30 g     F .text	000000bc __sfvwrite_small_dev
0000ad50 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000414 main
0000ad5c g     O .bss	00000004 alt_envp
0000949c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000ad60 g     O .bss	0000008c _atexit0
0000aa78 g     O .rwdata	00000004 alt_errno
00008dec g     F .text	00000070 putc
00008fc4 g     F .text	00000060 __divsi3
0000a58c g       *ABS*	00000000 __CTOR_END__
0000a58c g       *ABS*	00000000 __flash_rodata_start
0000a58c g       *ABS*	00000000 __DTOR_LIST__
000093a8 g     F .text	00000034 alt_irq_init
00009e70 g     F .text	00000078 alt_release_fd
0000a18c g     F .text	00000014 atexit
00008ed0 g     F .text	00000078 _write_r
0000aa5c g     O .rwdata	00000004 _impure_ptr
0000ad54 g     O .bss	00000004 alt_argc
000099bc g     F .text	00000064 _do_dtors
0000aa64 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000aa7c g       *ABS*	00000000 _edata
0000adec g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009ee8 g     F .text	00000020 altera_nios2_qsys_irq_init
0000a1a0 g     F .text	00000020 exit
00009024 g     F .text	00000060 __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000a568 g     F .text	00000020 _exit
000085d0 g     F .text	00000020 strlen
00009c84 g     F .text	0000018c open
00009a20 g     F .text	0000001c alt_icache_flush_all
00008d0c g     F .text	00000024 __vfprintf_internal
00009958 g     F .text	00000064 _do_ctors
0000969c g     F .text	00000100 close
000090cc g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d68a9714 	ori	gp,gp,10844
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10ab5414 	ori	r2,r2,44368

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18eb7b14 	ori	r3,r3,44524

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00090cc0 	call	90cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00091b80 	call	91b8 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#define SHA256_HASH_OUT_0_OFFSET     (0x12 * 4)


#define SHA256_CONTROL_START_BIT     0x00000001

int main() {
    805c:	defff304 	addi	sp,sp,-52
    8060:	dfc00c15 	stw	ra,48(sp)
    8064:	df000b15 	stw	fp,44(sp)
    8068:	df000b04 	addi	fp,sp,44

    uint32_t status, control;

    uint32_t calculated_hash[8];

    printf("Nios II SHA-256 Test\n");
    806c:	01000074 	movhi	r4,1
    8070:	21298304 	addi	r4,r4,-23028
    8074:	00085bc0 	call	85bc <puts>
    printf("IP Base Address: 0x%08lx\n", (unsigned long)SHA_256_IP_0_BASE);
    8078:	01000074 	movhi	r4,1
    807c:	21298904 	addi	r4,r4,-23004
    8080:	01400074 	movhi	r5,1
    8084:	29442004 	addi	r5,r5,4224
    8088:	00084700 	call	8470 <printf>

    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000000);
    808c:	00800074 	movhi	r2,1
    8090:	10842004 	addi	r2,r2,4224
    8094:	10000035 	stwio	zero,0(r2)
    control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);
    8098:	00800074 	movhi	r2,1
    809c:	10842004 	addi	r2,r2,4224
    80a0:	10800037 	ldwio	r2,0(r2)
    80a4:	e0bff615 	stw	r2,-40(fp)
    printf("control luc moi bat he thong: 0x%08lx\n", (unsigned long)control);
    80a8:	01000074 	movhi	r4,1
    80ac:	21299004 	addi	r4,r4,-22976
    80b0:	e17ff617 	ldw	r5,-40(fp)
    80b4:	00084700 	call	8470 <printf>

    //START IP
    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000001);
    80b8:	00c00074 	movhi	r3,1
    80bc:	18c42004 	addi	r3,r3,4224
    80c0:	00800044 	movi	r2,1
    80c4:	18800035 	stwio	r2,0(r3)

    //doc 2 thanh ghi control, status
    control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);
    80c8:	00800074 	movhi	r2,1
    80cc:	10842004 	addi	r2,r2,4224
    80d0:	10800037 	ldwio	r2,0(r2)
    80d4:	e0bff615 	stw	r2,-40(fp)
    status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
    80d8:	00800074 	movhi	r2,1
    80dc:	10843a04 	addi	r2,r2,4328
    80e0:	10800037 	ldwio	r2,0(r2)
    80e4:	e0bff715 	stw	r2,-36(fp)

    printf("\n--- Block 1 ---\n");
    80e8:	01000074 	movhi	r4,1
    80ec:	21299a04 	addi	r4,r4,-22936
    80f0:	00085bc0 	call	85bc <puts>

    //doc ket qua neu status la done
    printf("control sau khi duoc start: 0x%08lx\n", (unsigned long)control);
    80f4:	01000074 	movhi	r4,1
    80f8:	21299f04 	addi	r4,r4,-22916
    80fc:	e17ff617 	ldw	r5,-40(fp)
    8100:	00084700 	call	8470 <printf>
    printf("status:  0x%08lx\n", (unsigned long)status);
    8104:	01000074 	movhi	r4,1
    8108:	2129a904 	addi	r4,r4,-22876
    810c:	e17ff717 	ldw	r5,-36(fp)
    8110:	00084700 	call	8470 <printf>

    //nap 16 word
    int i = 0;
    8114:	e03ff515 	stw	zero,-44(fp)
    for (i = 0; i < 16; i++) {
    8118:	e03ff515 	stw	zero,-44(fp)
    811c:	00001406 	br	8170 <main+0x114>
          IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_DATA_IN_REG_OFFSET + (i * 4), input_block_1[i]);
    8120:	e0bff517 	ldw	r2,-44(fp)
    8124:	1085883a 	add	r2,r2,r2
    8128:	1085883a 	add	r2,r2,r2
    812c:	1007883a 	mov	r3,r2
    8130:	00800074 	movhi	r2,1
    8134:	10842104 	addi	r2,r2,4228
    8138:	1889883a 	add	r4,r3,r2
    813c:	e0bff517 	ldw	r2,-44(fp)
    8140:	00c00074 	movhi	r3,1
    8144:	18e97304 	addi	r3,r3,-23092
    8148:	1085883a 	add	r2,r2,r2
    814c:	1085883a 	add	r2,r2,r2
    8150:	10c5883a 	add	r2,r2,r3
    8154:	10800017 	ldw	r2,0(r2)
    8158:	1007883a 	mov	r3,r2
    815c:	2005883a 	mov	r2,r4
    8160:	10c00035 	stwio	r3,0(r2)
    printf("control sau khi duoc start: 0x%08lx\n", (unsigned long)control);
    printf("status:  0x%08lx\n", (unsigned long)status);

    //nap 16 word
    int i = 0;
    for (i = 0; i < 16; i++) {
    8164:	e0bff517 	ldw	r2,-44(fp)
    8168:	10800044 	addi	r2,r2,1
    816c:	e0bff515 	stw	r2,-44(fp)
    8170:	e0bff517 	ldw	r2,-44(fp)
    8174:	10800410 	cmplti	r2,r2,16
    8178:	103fe91e 	bne	r2,zero,8120 <main+0xc4>
          IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_DATA_IN_REG_OFFSET + (i * 4), input_block_1[i]);
      }
    printf("Nap xong 16 word block 1.\n");
    817c:	01000074 	movhi	r4,1
    8180:	2129ae04 	addi	r4,r4,-22856
    8184:	00085bc0 	call	85bc <puts>

    while (1) {
    	status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
    8188:	00800074 	movhi	r2,1
    818c:	10843a04 	addi	r2,r2,4328
    8190:	10800037 	ldwio	r2,0(r2)
    8194:	e0bff715 	stw	r2,-36(fp)
    	if (status == 0x00000001) {
    8198:	e0bff717 	ldw	r2,-36(fp)
    819c:	10800058 	cmpnei	r2,r2,1
    81a0:	103ff91e 	bne	r2,zero,8188 <main+0x12c>
    		printf("IP da tinh xong, DONE = 1\n");
    81a4:	01000074 	movhi	r4,1
    81a8:	2129b504 	addi	r4,r4,-22828
    81ac:	00085bc0 	call	85bc <puts>
    		break;
    	}
    }

    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000010);
    81b0:	00c00074 	movhi	r3,1
    81b4:	18c42004 	addi	r3,r3,4224
    81b8:	00800404 	movi	r2,16
    81bc:	18800035 	stwio	r2,0(r3)
    control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);
    81c0:	00800074 	movhi	r2,1
    81c4:	10842004 	addi	r2,r2,4224
    81c8:	10800037 	ldwio	r2,0(r2)
    81cc:	e0bff615 	stw	r2,-40(fp)

    printf("control: 0x%08lx\n", (unsigned long)control);
    81d0:	01000074 	movhi	r4,1
    81d4:	2129bc04 	addi	r4,r4,-22800
    81d8:	e17ff617 	ldw	r5,-40(fp)
    81dc:	00084700 	call	8470 <printf>

    //print ket qua

    i = 0;
    81e0:	e03ff515 	stw	zero,-44(fp)
    for (i = 0; i < 8; i++) {
    81e4:	e03ff515 	stw	zero,-44(fp)
    81e8:	00001306 	br	8238 <main+0x1dc>
		calculated_hash[i] = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_HASH_OUT_0_OFFSET + (i * 4));
    81ec:	e13ff517 	ldw	r4,-44(fp)
    81f0:	e0bff517 	ldw	r2,-44(fp)
    81f4:	1085883a 	add	r2,r2,r2
    81f8:	1085883a 	add	r2,r2,r2
    81fc:	1007883a 	mov	r3,r2
    8200:	00800074 	movhi	r2,1
    8204:	10843204 	addi	r2,r2,4296
    8208:	1885883a 	add	r2,r3,r2
    820c:	10800037 	ldwio	r2,0(r2)
    8210:	1007883a 	mov	r3,r2
    8214:	2105883a 	add	r2,r4,r4
    8218:	1085883a 	add	r2,r2,r2
    821c:	e13ff504 	addi	r4,fp,-44
    8220:	1105883a 	add	r2,r2,r4
    8224:	10800304 	addi	r2,r2,12
    8228:	10c00015 	stw	r3,0(r2)
    printf("control: 0x%08lx\n", (unsigned long)control);

    //print ket qua

    i = 0;
    for (i = 0; i < 8; i++) {
    822c:	e0bff517 	ldw	r2,-44(fp)
    8230:	10800044 	addi	r2,r2,1
    8234:	e0bff515 	stw	r2,-44(fp)
    8238:	e0bff517 	ldw	r2,-44(fp)
    823c:	10800210 	cmplti	r2,r2,8
    8240:	103fea1e 	bne	r2,zero,81ec <main+0x190>
		calculated_hash[i] = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_HASH_OUT_0_OFFSET + (i * 4));
	}

    printf("Ket qua hash: ");
    8244:	01000074 	movhi	r4,1
    8248:	2129c104 	addi	r4,r4,-22780
    824c:	00084700 	call	8470 <printf>

	for (i = 0; i < 8; i++) {
    8250:	e03ff515 	stw	zero,-44(fp)
    8254:	00000d06 	br	828c <main+0x230>
		printf("%08lx", (unsigned long)calculated_hash[i]);
    8258:	e0bff517 	ldw	r2,-44(fp)
    825c:	1085883a 	add	r2,r2,r2
    8260:	1085883a 	add	r2,r2,r2
    8264:	e0fff504 	addi	r3,fp,-44
    8268:	10c5883a 	add	r2,r2,r3
    826c:	10800304 	addi	r2,r2,12
    8270:	11400017 	ldw	r5,0(r2)
    8274:	01000074 	movhi	r4,1
    8278:	2129c504 	addi	r4,r4,-22764
    827c:	00084700 	call	8470 <printf>
		calculated_hash[i] = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_HASH_OUT_0_OFFSET + (i * 4));
	}

    printf("Ket qua hash: ");

	for (i = 0; i < 8; i++) {
    8280:	e0bff517 	ldw	r2,-44(fp)
    8284:	10800044 	addi	r2,r2,1
    8288:	e0bff515 	stw	r2,-44(fp)
    828c:	e0bff517 	ldw	r2,-44(fp)
    8290:	10800210 	cmplti	r2,r2,8
    8294:	103ff01e 	bne	r2,zero,8258 <main+0x1fc>
		printf("%08lx", (unsigned long)calculated_hash[i]);
	}
	printf("\n");
    8298:	01000284 	movi	r4,10
    829c:	00085080 	call	8508 <putchar>



     //Bat dau block 2
     printf("\n--- Block 2 ---\n");
    82a0:	01000074 	movhi	r4,1
    82a4:	2129c704 	addi	r4,r4,-22756
    82a8:	00085bc0 	call	85bc <puts>

     IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000011);
    82ac:	00c00074 	movhi	r3,1
    82b0:	18c42004 	addi	r3,r3,4224
    82b4:	00800444 	movi	r2,17
    82b8:	18800035 	stwio	r2,0(r3)

     control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);
    82bc:	00800074 	movhi	r2,1
    82c0:	10842004 	addi	r2,r2,4224
    82c4:	10800037 	ldwio	r2,0(r2)
    82c8:	e0bff615 	stw	r2,-40(fp)

     printf("control block tiep theo: 0x%08lx\n", (unsigned long)control);  //sau nay sua thanh neu la input thi sua text lai
    82cc:	01000074 	movhi	r4,1
    82d0:	2129cc04 	addi	r4,r4,-22736
    82d4:	e17ff617 	ldw	r5,-40(fp)
    82d8:	00084700 	call	8470 <printf>

     i = 0;
    82dc:	e03ff515 	stw	zero,-44(fp)
     for (i = 0; i < 16; i++) {
    82e0:	e03ff515 	stw	zero,-44(fp)
    82e4:	00001406 	br	8338 <main+0x2dc>
           IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_DATA_IN_REG_OFFSET + (i * 4), input_block_2[i]);
    82e8:	e0bff517 	ldw	r2,-44(fp)
    82ec:	1085883a 	add	r2,r2,r2
    82f0:	1085883a 	add	r2,r2,r2
    82f4:	1007883a 	mov	r3,r2
    82f8:	00800074 	movhi	r2,1
    82fc:	10842104 	addi	r2,r2,4228
    8300:	1889883a 	add	r4,r3,r2
    8304:	e0bff517 	ldw	r2,-44(fp)
    8308:	00c00074 	movhi	r3,1
    830c:	18e96304 	addi	r3,r3,-23156
    8310:	1085883a 	add	r2,r2,r2
    8314:	1085883a 	add	r2,r2,r2
    8318:	10c5883a 	add	r2,r2,r3
    831c:	10800017 	ldw	r2,0(r2)
    8320:	1007883a 	mov	r3,r2
    8324:	2005883a 	mov	r2,r4
    8328:	10c00035 	stwio	r3,0(r2)
     control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);

     printf("control block tiep theo: 0x%08lx\n", (unsigned long)control);  //sau nay sua thanh neu la input thi sua text lai

     i = 0;
     for (i = 0; i < 16; i++) {
    832c:	e0bff517 	ldw	r2,-44(fp)
    8330:	10800044 	addi	r2,r2,1
    8334:	e0bff515 	stw	r2,-44(fp)
    8338:	e0bff517 	ldw	r2,-44(fp)
    833c:	10800410 	cmplti	r2,r2,16
    8340:	103fe91e 	bne	r2,zero,82e8 <main+0x28c>
           IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_DATA_IN_REG_OFFSET + (i * 4), input_block_2[i]);
       }
     printf("Nap xong 16 word block 2.\n");
    8344:	01000074 	movhi	r4,1
    8348:	2129d504 	addi	r4,r4,-22700
    834c:	00085bc0 	call	85bc <puts>



     while (1) {
     	status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
    8350:	00800074 	movhi	r2,1
    8354:	10843a04 	addi	r2,r2,4328
    8358:	10800037 	ldwio	r2,0(r2)
    835c:	e0bff715 	stw	r2,-36(fp)
     	if (status == 0x00000001) {
    8360:	e0bff717 	ldw	r2,-36(fp)
    8364:	10800058 	cmpnei	r2,r2,1
    8368:	103ff91e 	bne	r2,zero,8350 <main+0x2f4>
     		printf("IP da tinh xong, DONE = 1\n");
    836c:	01000074 	movhi	r4,1
    8370:	2129b504 	addi	r4,r4,-22828
    8374:	00085bc0 	call	85bc <puts>
     		break;
     	}
     }


     control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);
    8378:	00800074 	movhi	r2,1
    837c:	10842004 	addi	r2,r2,4224
    8380:	10800037 	ldwio	r2,0(r2)
    8384:	e0bff615 	stw	r2,-40(fp)

     printf("control: 0x%08lx\n", (unsigned long)control);
    8388:	01000074 	movhi	r4,1
    838c:	2129bc04 	addi	r4,r4,-22800
    8390:	e17ff617 	ldw	r5,-40(fp)
    8394:	00084700 	call	8470 <printf>



     i = 0;
    8398:	e03ff515 	stw	zero,-44(fp)
     for (i = 0; i < 8; i++) {
    839c:	e03ff515 	stw	zero,-44(fp)
    83a0:	00001306 	br	83f0 <main+0x394>
	 	calculated_hash[i] = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_HASH_OUT_0_OFFSET + (i * 4));
    83a4:	e13ff517 	ldw	r4,-44(fp)
    83a8:	e0bff517 	ldw	r2,-44(fp)
    83ac:	1085883a 	add	r2,r2,r2
    83b0:	1085883a 	add	r2,r2,r2
    83b4:	1007883a 	mov	r3,r2
    83b8:	00800074 	movhi	r2,1
    83bc:	10843204 	addi	r2,r2,4296
    83c0:	1885883a 	add	r2,r3,r2
    83c4:	10800037 	ldwio	r2,0(r2)
    83c8:	1007883a 	mov	r3,r2
    83cc:	2105883a 	add	r2,r4,r4
    83d0:	1085883a 	add	r2,r2,r2
    83d4:	e13ff504 	addi	r4,fp,-44
    83d8:	1105883a 	add	r2,r2,r4
    83dc:	10800304 	addi	r2,r2,12
    83e0:	10c00015 	stw	r3,0(r2)
     printf("control: 0x%08lx\n", (unsigned long)control);



     i = 0;
     for (i = 0; i < 8; i++) {
    83e4:	e0bff517 	ldw	r2,-44(fp)
    83e8:	10800044 	addi	r2,r2,1
    83ec:	e0bff515 	stw	r2,-44(fp)
    83f0:	e0bff517 	ldw	r2,-44(fp)
    83f4:	10800210 	cmplti	r2,r2,8
    83f8:	103fea1e 	bne	r2,zero,83a4 <main+0x348>
	 	calculated_hash[i] = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_HASH_OUT_0_OFFSET + (i * 4));
	 }

     printf("Ket qua hash: ");
    83fc:	01000074 	movhi	r4,1
    8400:	2129c104 	addi	r4,r4,-22780
    8404:	00084700 	call	8470 <printf>

	 for (i = 0; i < 8; i++) {
    8408:	e03ff515 	stw	zero,-44(fp)
    840c:	00000d06 	br	8444 <main+0x3e8>
	 	printf("%08lx", (unsigned long)calculated_hash[i]);
    8410:	e0bff517 	ldw	r2,-44(fp)
    8414:	1085883a 	add	r2,r2,r2
    8418:	1085883a 	add	r2,r2,r2
    841c:	e0fff504 	addi	r3,fp,-44
    8420:	10c5883a 	add	r2,r2,r3
    8424:	10800304 	addi	r2,r2,12
    8428:	11400017 	ldw	r5,0(r2)
    842c:	01000074 	movhi	r4,1
    8430:	2129c504 	addi	r4,r4,-22764
    8434:	00084700 	call	8470 <printf>
	 	calculated_hash[i] = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_HASH_OUT_0_OFFSET + (i * 4));
	 }

     printf("Ket qua hash: ");

	 for (i = 0; i < 8; i++) {
    8438:	e0bff517 	ldw	r2,-44(fp)
    843c:	10800044 	addi	r2,r2,1
    8440:	e0bff515 	stw	r2,-44(fp)
    8444:	e0bff517 	ldw	r2,-44(fp)
    8448:	10800210 	cmplti	r2,r2,8
    844c:	103ff01e 	bne	r2,zero,8410 <main+0x3b4>
	 	printf("%08lx", (unsigned long)calculated_hash[i]);
	 }
	 printf("\n");
    8450:	01000284 	movi	r4,10
    8454:	00085080 	call	8508 <putchar>
    return 0;
    8458:	0005883a 	mov	r2,zero
}
    845c:	e037883a 	mov	sp,fp
    8460:	dfc00117 	ldw	ra,4(sp)
    8464:	df000017 	ldw	fp,0(sp)
    8468:	dec00204 	addi	sp,sp,8
    846c:	f800283a 	ret

00008470 <printf>:
    8470:	defffb04 	addi	sp,sp,-20
    8474:	dfc00115 	stw	ra,4(sp)
    8478:	d9400215 	stw	r5,8(sp)
    847c:	d9800315 	stw	r6,12(sp)
    8480:	d9c00415 	stw	r7,16(sp)
    8484:	00800074 	movhi	r2,1
    8488:	10aa9704 	addi	r2,r2,-21924
    848c:	11400017 	ldw	r5,0(r2)
    8490:	d8800204 	addi	r2,sp,8
    8494:	d8800015 	stw	r2,0(sp)
    8498:	29c00217 	ldw	r7,8(r5)
    849c:	100d883a 	mov	r6,r2
    84a0:	00800074 	movhi	r2,1
    84a4:	10a34c04 	addi	r2,r2,-29392
    84a8:	200b883a 	mov	r5,r4
    84ac:	38800115 	stw	r2,4(r7)
    84b0:	3809883a 	mov	r4,r7
    84b4:	0008d0c0 	call	8d0c <__vfprintf_internal>
    84b8:	dfc00117 	ldw	ra,4(sp)
    84bc:	dec00504 	addi	sp,sp,20
    84c0:	f800283a 	ret

000084c4 <_printf_r>:
    84c4:	defffc04 	addi	sp,sp,-16
    84c8:	dfc00115 	stw	ra,4(sp)
    84cc:	d9800215 	stw	r6,8(sp)
    84d0:	d9c00315 	stw	r7,12(sp)
    84d4:	22000217 	ldw	r8,8(r4)
    84d8:	d8800204 	addi	r2,sp,8
    84dc:	d8800015 	stw	r2,0(sp)
    84e0:	100f883a 	mov	r7,r2
    84e4:	00800074 	movhi	r2,1
    84e8:	10a34c04 	addi	r2,r2,-29392
    84ec:	280d883a 	mov	r6,r5
    84f0:	40800115 	stw	r2,4(r8)
    84f4:	400b883a 	mov	r5,r8
    84f8:	00086700 	call	8670 <___vfprintf_internal_r>
    84fc:	dfc00117 	ldw	ra,4(sp)
    8500:	dec00404 	addi	sp,sp,16
    8504:	f800283a 	ret

00008508 <putchar>:
    8508:	00800074 	movhi	r2,1
    850c:	10aa9704 	addi	r2,r2,-21924
    8510:	11800017 	ldw	r6,0(r2)
    8514:	200b883a 	mov	r5,r4
    8518:	3009883a 	mov	r4,r6
    851c:	31800217 	ldw	r6,8(r6)
    8520:	0008e5c1 	jmpi	8e5c <_putc_r>

00008524 <_putchar_r>:
    8524:	21800217 	ldw	r6,8(r4)
    8528:	0008e5c1 	jmpi	8e5c <_putc_r>

0000852c <_puts_r>:
    852c:	defffd04 	addi	sp,sp,-12
    8530:	dc000015 	stw	r16,0(sp)
    8534:	2021883a 	mov	r16,r4
    8538:	2809883a 	mov	r4,r5
    853c:	dfc00215 	stw	ra,8(sp)
    8540:	dc400115 	stw	r17,4(sp)
    8544:	2823883a 	mov	r17,r5
    8548:	00085d00 	call	85d0 <strlen>
    854c:	80c00217 	ldw	r3,8(r16)
    8550:	02000074 	movhi	r8,1
    8554:	42234c04 	addi	r8,r8,-29392
    8558:	880d883a 	mov	r6,r17
    855c:	100f883a 	mov	r7,r2
    8560:	8009883a 	mov	r4,r16
    8564:	180b883a 	mov	r5,r3
    8568:	1a000115 	stw	r8,4(r3)
    856c:	403ee83a 	callr	r8
    8570:	047fffc4 	movi	r17,-1
    8574:	8009883a 	mov	r4,r16
    8578:	01800074 	movhi	r6,1
    857c:	31a9dc04 	addi	r6,r6,-22672
    8580:	01c00044 	movi	r7,1
    8584:	1440071e 	bne	r2,r17,85a4 <_puts_r+0x78>
    8588:	00ffffc4 	movi	r3,-1
    858c:	1805883a 	mov	r2,r3
    8590:	dfc00217 	ldw	ra,8(sp)
    8594:	dc400117 	ldw	r17,4(sp)
    8598:	dc000017 	ldw	r16,0(sp)
    859c:	dec00304 	addi	sp,sp,12
    85a0:	f800283a 	ret
    85a4:	81400217 	ldw	r5,8(r16)
    85a8:	28c00117 	ldw	r3,4(r5)
    85ac:	183ee83a 	callr	r3
    85b0:	0007883a 	mov	r3,zero
    85b4:	147ff51e 	bne	r2,r17,858c <_puts_r+0x60>
    85b8:	003ff306 	br	8588 <_puts_r+0x5c>

000085bc <puts>:
    85bc:	00800074 	movhi	r2,1
    85c0:	10aa9704 	addi	r2,r2,-21924
    85c4:	200b883a 	mov	r5,r4
    85c8:	11000017 	ldw	r4,0(r2)
    85cc:	000852c1 	jmpi	852c <_puts_r>

000085d0 <strlen>:
    85d0:	20800007 	ldb	r2,0(r4)
    85d4:	10000526 	beq	r2,zero,85ec <strlen+0x1c>
    85d8:	2007883a 	mov	r3,r4
    85dc:	18c00044 	addi	r3,r3,1
    85e0:	18800007 	ldb	r2,0(r3)
    85e4:	103ffd1e 	bne	r2,zero,85dc <strlen+0xc>
    85e8:	1905c83a 	sub	r2,r3,r4
    85ec:	f800283a 	ret

000085f0 <print_repeat>:
    85f0:	defffb04 	addi	sp,sp,-20
    85f4:	dc800315 	stw	r18,12(sp)
    85f8:	dc400215 	stw	r17,8(sp)
    85fc:	dc000115 	stw	r16,4(sp)
    8600:	dfc00415 	stw	ra,16(sp)
    8604:	2025883a 	mov	r18,r4
    8608:	2823883a 	mov	r17,r5
    860c:	3821883a 	mov	r16,r7
    8610:	d9800005 	stb	r6,0(sp)
    8614:	9009883a 	mov	r4,r18
    8618:	880b883a 	mov	r5,r17
    861c:	d80d883a 	mov	r6,sp
    8620:	01c00044 	movi	r7,1
    8624:	04000b0e 	bge	zero,r16,8654 <print_repeat+0x64>
    8628:	88c00117 	ldw	r3,4(r17)
    862c:	843fffc4 	addi	r16,r16,-1
    8630:	183ee83a 	callr	r3
    8634:	103ff726 	beq	r2,zero,8614 <print_repeat+0x24>
    8638:	00bfffc4 	movi	r2,-1
    863c:	dfc00417 	ldw	ra,16(sp)
    8640:	dc800317 	ldw	r18,12(sp)
    8644:	dc400217 	ldw	r17,8(sp)
    8648:	dc000117 	ldw	r16,4(sp)
    864c:	dec00504 	addi	sp,sp,20
    8650:	f800283a 	ret
    8654:	0005883a 	mov	r2,zero
    8658:	dfc00417 	ldw	ra,16(sp)
    865c:	dc800317 	ldw	r18,12(sp)
    8660:	dc400217 	ldw	r17,8(sp)
    8664:	dc000117 	ldw	r16,4(sp)
    8668:	dec00504 	addi	sp,sp,20
    866c:	f800283a 	ret

00008670 <___vfprintf_internal_r>:
    8670:	deffe304 	addi	sp,sp,-116
    8674:	df001b15 	stw	fp,108(sp)
    8678:	ddc01a15 	stw	r23,104(sp)
    867c:	dd001715 	stw	r20,92(sp)
    8680:	dc801515 	stw	r18,84(sp)
    8684:	dc001315 	stw	r16,76(sp)
    8688:	dfc01c15 	stw	ra,112(sp)
    868c:	dd801915 	stw	r22,100(sp)
    8690:	dd401815 	stw	r21,96(sp)
    8694:	dcc01615 	stw	r19,88(sp)
    8698:	dc401415 	stw	r17,80(sp)
    869c:	d9001015 	stw	r4,64(sp)
    86a0:	2829883a 	mov	r20,r5
    86a4:	d9c01115 	stw	r7,68(sp)
    86a8:	3025883a 	mov	r18,r6
    86ac:	0021883a 	mov	r16,zero
    86b0:	d8000f15 	stw	zero,60(sp)
    86b4:	d8000e15 	stw	zero,56(sp)
    86b8:	0039883a 	mov	fp,zero
    86bc:	d8000915 	stw	zero,36(sp)
    86c0:	d8000d15 	stw	zero,52(sp)
    86c4:	d8000c15 	stw	zero,48(sp)
    86c8:	d8000b15 	stw	zero,44(sp)
    86cc:	002f883a 	mov	r23,zero
    86d0:	91400003 	ldbu	r5,0(r18)
    86d4:	01c00044 	movi	r7,1
    86d8:	94800044 	addi	r18,r18,1
    86dc:	29003fcc 	andi	r4,r5,255
    86e0:	2100201c 	xori	r4,r4,128
    86e4:	213fe004 	addi	r4,r4,-128
    86e8:	20001526 	beq	r4,zero,8740 <___vfprintf_internal_r+0xd0>
    86ec:	81c03526 	beq	r16,r7,87c4 <___vfprintf_internal_r+0x154>
    86f0:	3c002016 	blt	r7,r16,8774 <___vfprintf_internal_r+0x104>
    86f4:	803ff61e 	bne	r16,zero,86d0 <___vfprintf_internal_r+0x60>
    86f8:	00800944 	movi	r2,37
    86fc:	2081501e 	bne	r4,r2,8c40 <___vfprintf_internal_r+0x5d0>
    8700:	073fffc4 	movi	fp,-1
    8704:	00800284 	movi	r2,10
    8708:	d9c00c15 	stw	r7,48(sp)
    870c:	d8000f15 	stw	zero,60(sp)
    8710:	d8000e15 	stw	zero,56(sp)
    8714:	df000915 	stw	fp,36(sp)
    8718:	d8800d15 	stw	r2,52(sp)
    871c:	d8000b15 	stw	zero,44(sp)
    8720:	91400003 	ldbu	r5,0(r18)
    8724:	3821883a 	mov	r16,r7
    8728:	94800044 	addi	r18,r18,1
    872c:	29003fcc 	andi	r4,r5,255
    8730:	2100201c 	xori	r4,r4,128
    8734:	213fe004 	addi	r4,r4,-128
    8738:	01c00044 	movi	r7,1
    873c:	203feb1e 	bne	r4,zero,86ec <___vfprintf_internal_r+0x7c>
    8740:	b805883a 	mov	r2,r23
    8744:	dfc01c17 	ldw	ra,112(sp)
    8748:	df001b17 	ldw	fp,108(sp)
    874c:	ddc01a17 	ldw	r23,104(sp)
    8750:	dd801917 	ldw	r22,100(sp)
    8754:	dd401817 	ldw	r21,96(sp)
    8758:	dd001717 	ldw	r20,92(sp)
    875c:	dcc01617 	ldw	r19,88(sp)
    8760:	dc801517 	ldw	r18,84(sp)
    8764:	dc401417 	ldw	r17,80(sp)
    8768:	dc001317 	ldw	r16,76(sp)
    876c:	dec01d04 	addi	sp,sp,116
    8770:	f800283a 	ret
    8774:	00800084 	movi	r2,2
    8778:	80801726 	beq	r16,r2,87d8 <___vfprintf_internal_r+0x168>
    877c:	008000c4 	movi	r2,3
    8780:	80bfd31e 	bne	r16,r2,86d0 <___vfprintf_internal_r+0x60>
    8784:	2c7ff404 	addi	r17,r5,-48
    8788:	88c03fcc 	andi	r3,r17,255
    878c:	00800244 	movi	r2,9
    8790:	10c02136 	bltu	r2,r3,8818 <___vfprintf_internal_r+0x1a8>
    8794:	d8c00917 	ldw	r3,36(sp)
    8798:	18012716 	blt	r3,zero,8c38 <___vfprintf_internal_r+0x5c8>
    879c:	d9000917 	ldw	r4,36(sp)
    87a0:	01400284 	movi	r5,10
    87a4:	00090940 	call	9094 <__mulsi3>
    87a8:	1007883a 	mov	r3,r2
    87ac:	88803fcc 	andi	r2,r17,255
    87b0:	1080201c 	xori	r2,r2,128
    87b4:	10bfe004 	addi	r2,r2,-128
    87b8:	1887883a 	add	r3,r3,r2
    87bc:	d8c00915 	stw	r3,36(sp)
    87c0:	003fc306 	br	86d0 <___vfprintf_internal_r+0x60>
    87c4:	00800c04 	movi	r2,48
    87c8:	2080b326 	beq	r4,r2,8a98 <___vfprintf_internal_r+0x428>
    87cc:	00800944 	movi	r2,37
    87d0:	20812726 	beq	r4,r2,8c70 <___vfprintf_internal_r+0x600>
    87d4:	04000084 	movi	r16,2
    87d8:	2c7ff404 	addi	r17,r5,-48
    87dc:	88c03fcc 	andi	r3,r17,255
    87e0:	00800244 	movi	r2,9
    87e4:	10c00a36 	bltu	r2,r3,8810 <___vfprintf_internal_r+0x1a0>
    87e8:	e000b416 	blt	fp,zero,8abc <___vfprintf_internal_r+0x44c>
    87ec:	e009883a 	mov	r4,fp
    87f0:	01400284 	movi	r5,10
    87f4:	00090940 	call	9094 <__mulsi3>
    87f8:	1007883a 	mov	r3,r2
    87fc:	88803fcc 	andi	r2,r17,255
    8800:	1080201c 	xori	r2,r2,128
    8804:	10bfe004 	addi	r2,r2,-128
    8808:	18b9883a 	add	fp,r3,r2
    880c:	003fb006 	br	86d0 <___vfprintf_internal_r+0x60>
    8810:	00800b84 	movi	r2,46
    8814:	2080a326 	beq	r4,r2,8aa4 <___vfprintf_internal_r+0x434>
    8818:	00801b04 	movi	r2,108
    881c:	2080a326 	beq	r4,r2,8aac <___vfprintf_internal_r+0x43c>
    8820:	d8c00917 	ldw	r3,36(sp)
    8824:	1800a716 	blt	r3,zero,8ac4 <___vfprintf_internal_r+0x454>
    8828:	d8000f15 	stw	zero,60(sp)
    882c:	28bfea04 	addi	r2,r5,-88
    8830:	10803fcc 	andi	r2,r2,255
    8834:	00c00804 	movi	r3,32
    8838:	18802836 	bltu	r3,r2,88dc <___vfprintf_internal_r+0x26c>
    883c:	1085883a 	add	r2,r2,r2
    8840:	1085883a 	add	r2,r2,r2
    8844:	00c00074 	movhi	r3,1
    8848:	18e21604 	addi	r3,r3,-30632
    884c:	10c5883a 	add	r2,r2,r3
    8850:	11000017 	ldw	r4,0(r2)
    8854:	2000683a 	jmp	r4
    8858:	000088e4 	muli	zero,zero,547
    885c:	000088dc 	xori	zero,zero,547
    8860:	000088dc 	xori	zero,zero,547
    8864:	000088dc 	xori	zero,zero,547
    8868:	000088dc 	xori	zero,zero,547
    886c:	000088dc 	xori	zero,zero,547
    8870:	000088dc 	xori	zero,zero,547
    8874:	000088dc 	xori	zero,zero,547
    8878:	000088dc 	xori	zero,zero,547
    887c:	000088dc 	xori	zero,zero,547
    8880:	000088dc 	xori	zero,zero,547
    8884:	00008b10 	cmplti	zero,zero,556
    8888:	000088f8 	rdprs	zero,zero,547
    888c:	000088dc 	xori	zero,zero,547
    8890:	000088dc 	xori	zero,zero,547
    8894:	000088dc 	xori	zero,zero,547
    8898:	000088dc 	xori	zero,zero,547
    889c:	000088f8 	rdprs	zero,zero,547
    88a0:	000088dc 	xori	zero,zero,547
    88a4:	000088dc 	xori	zero,zero,547
    88a8:	000088dc 	xori	zero,zero,547
    88ac:	000088dc 	xori	zero,zero,547
    88b0:	000088dc 	xori	zero,zero,547
    88b4:	00008b78 	rdprs	zero,zero,557
    88b8:	000088dc 	xori	zero,zero,547
    88bc:	000088dc 	xori	zero,zero,547
    88c0:	000088dc 	xori	zero,zero,547
    88c4:	00008b88 	cmpgei	zero,zero,558
    88c8:	000088dc 	xori	zero,zero,547
    88cc:	00008a5c 	xori	zero,zero,553
    88d0:	000088dc 	xori	zero,zero,547
    88d4:	000088dc 	xori	zero,zero,547
    88d8:	00008a54 	movui	zero,553
    88dc:	0021883a 	mov	r16,zero
    88e0:	003f7b06 	br	86d0 <___vfprintf_internal_r+0x60>
    88e4:	00c00404 	movi	r3,16
    88e8:	00800044 	movi	r2,1
    88ec:	d8c00d15 	stw	r3,52(sp)
    88f0:	d8000c15 	stw	zero,48(sp)
    88f4:	d8800b15 	stw	r2,44(sp)
    88f8:	d8c00e17 	ldw	r3,56(sp)
    88fc:	1805003a 	cmpeq	r2,r3,zero
    8900:	10005a1e 	bne	r2,zero,8a6c <___vfprintf_internal_r+0x3fc>
    8904:	d8800c17 	ldw	r2,48(sp)
    8908:	1000781e 	bne	r2,zero,8aec <___vfprintf_internal_r+0x47c>
    890c:	d8801117 	ldw	r2,68(sp)
    8910:	d8000a15 	stw	zero,40(sp)
    8914:	14400017 	ldw	r17,0(r2)
    8918:	11c00104 	addi	r7,r2,4
    891c:	d9c01115 	stw	r7,68(sp)
    8920:	88005a26 	beq	r17,zero,8a8c <___vfprintf_internal_r+0x41c>
    8924:	d8c00b17 	ldw	r3,44(sp)
    8928:	dcc00044 	addi	r19,sp,1
    892c:	05800244 	movi	r22,9
    8930:	182b003a 	cmpeq	r21,r3,zero
    8934:	dcc01215 	stw	r19,72(sp)
    8938:	00000506 	br	8950 <___vfprintf_internal_r+0x2e0>
    893c:	21000c04 	addi	r4,r4,48
    8940:	99000005 	stb	r4,0(r19)
    8944:	9cc00044 	addi	r19,r19,1
    8948:	80000f26 	beq	r16,zero,8988 <___vfprintf_internal_r+0x318>
    894c:	8023883a 	mov	r17,r16
    8950:	d9400d17 	ldw	r5,52(sp)
    8954:	8809883a 	mov	r4,r17
    8958:	00090840 	call	9084 <__udivsi3>
    895c:	d9000d17 	ldw	r4,52(sp)
    8960:	100b883a 	mov	r5,r2
    8964:	1021883a 	mov	r16,r2
    8968:	00090940 	call	9094 <__mulsi3>
    896c:	8889c83a 	sub	r4,r17,r2
    8970:	b13ff20e 	bge	r22,r4,893c <___vfprintf_internal_r+0x2cc>
    8974:	a8009f1e 	bne	r21,zero,8bf4 <___vfprintf_internal_r+0x584>
    8978:	21000dc4 	addi	r4,r4,55
    897c:	99000005 	stb	r4,0(r19)
    8980:	9cc00044 	addi	r19,r19,1
    8984:	803ff11e 	bne	r16,zero,894c <___vfprintf_internal_r+0x2dc>
    8988:	d8801217 	ldw	r2,72(sp)
    898c:	98a3c83a 	sub	r17,r19,r2
    8990:	d8c00917 	ldw	r3,36(sp)
    8994:	1c4bc83a 	sub	r5,r3,r17
    8998:	0140130e 	bge	zero,r5,89e8 <___vfprintf_internal_r+0x378>
    899c:	d8c00044 	addi	r3,sp,1
    89a0:	18800804 	addi	r2,r3,32
    89a4:	9880102e 	bgeu	r19,r2,89e8 <___vfprintf_internal_r+0x378>
    89a8:	00800c04 	movi	r2,48
    89ac:	28ffffc4 	addi	r3,r5,-1
    89b0:	98800005 	stb	r2,0(r19)
    89b4:	99000044 	addi	r4,r19,1
    89b8:	00c0080e 	bge	zero,r3,89dc <___vfprintf_internal_r+0x36c>
    89bc:	d8c00044 	addi	r3,sp,1
    89c0:	18800804 	addi	r2,r3,32
    89c4:	2080052e 	bgeu	r4,r2,89dc <___vfprintf_internal_r+0x36c>
    89c8:	00800c04 	movi	r2,48
    89cc:	20800005 	stb	r2,0(r4)
    89d0:	21000044 	addi	r4,r4,1
    89d4:	9945883a 	add	r2,r19,r5
    89d8:	20bff81e 	bne	r4,r2,89bc <___vfprintf_internal_r+0x34c>
    89dc:	d8801217 	ldw	r2,72(sp)
    89e0:	2027883a 	mov	r19,r4
    89e4:	20a3c83a 	sub	r17,r4,r2
    89e8:	d8c00a17 	ldw	r3,40(sp)
    89ec:	1c45883a 	add	r2,r3,r17
    89f0:	e0a1c83a 	sub	r16,fp,r2
    89f4:	d8800f17 	ldw	r2,60(sp)
    89f8:	10008026 	beq	r2,zero,8bfc <___vfprintf_internal_r+0x58c>
    89fc:	1805003a 	cmpeq	r2,r3,zero
    8a00:	1000ae26 	beq	r2,zero,8cbc <___vfprintf_internal_r+0x64c>
    8a04:	0400a516 	blt	zero,r16,8c9c <___vfprintf_internal_r+0x62c>
    8a08:	b805883a 	mov	r2,r23
    8a0c:	0440950e 	bge	zero,r17,8c64 <___vfprintf_internal_r+0x5f4>
    8a10:	102f883a 	mov	r23,r2
    8a14:	1461883a 	add	r16,r2,r17
    8a18:	00000206 	br	8a24 <___vfprintf_internal_r+0x3b4>
    8a1c:	bdc00044 	addi	r23,r23,1
    8a20:	85ffae26 	beq	r16,r23,88dc <___vfprintf_internal_r+0x26c>
    8a24:	9cffffc4 	addi	r19,r19,-1
    8a28:	98800003 	ldbu	r2,0(r19)
    8a2c:	a0c00117 	ldw	r3,4(r20)
    8a30:	d9001017 	ldw	r4,64(sp)
    8a34:	d8800005 	stb	r2,0(sp)
    8a38:	a00b883a 	mov	r5,r20
    8a3c:	d80d883a 	mov	r6,sp
    8a40:	01c00044 	movi	r7,1
    8a44:	183ee83a 	callr	r3
    8a48:	103ff426 	beq	r2,zero,8a1c <___vfprintf_internal_r+0x3ac>
    8a4c:	05ffffc4 	movi	r23,-1
    8a50:	003f3b06 	br	8740 <___vfprintf_internal_r+0xd0>
    8a54:	00c00404 	movi	r3,16
    8a58:	d8c00d15 	stw	r3,52(sp)
    8a5c:	d8000c15 	stw	zero,48(sp)
    8a60:	d8c00e17 	ldw	r3,56(sp)
    8a64:	1805003a 	cmpeq	r2,r3,zero
    8a68:	103fa626 	beq	r2,zero,8904 <___vfprintf_internal_r+0x294>
    8a6c:	d8c00c17 	ldw	r3,48(sp)
    8a70:	1800171e 	bne	r3,zero,8ad0 <___vfprintf_internal_r+0x460>
    8a74:	d8c01117 	ldw	r3,68(sp)
    8a78:	d8000a15 	stw	zero,40(sp)
    8a7c:	1c400017 	ldw	r17,0(r3)
    8a80:	19c00104 	addi	r7,r3,4
    8a84:	d9c01115 	stw	r7,68(sp)
    8a88:	883fa61e 	bne	r17,zero,8924 <___vfprintf_internal_r+0x2b4>
    8a8c:	dcc00044 	addi	r19,sp,1
    8a90:	dcc01215 	stw	r19,72(sp)
    8a94:	003fbe06 	br	8990 <___vfprintf_internal_r+0x320>
    8a98:	04000084 	movi	r16,2
    8a9c:	d9c00f15 	stw	r7,60(sp)
    8aa0:	003f0b06 	br	86d0 <___vfprintf_internal_r+0x60>
    8aa4:	040000c4 	movi	r16,3
    8aa8:	003f0906 	br	86d0 <___vfprintf_internal_r+0x60>
    8aac:	00800044 	movi	r2,1
    8ab0:	040000c4 	movi	r16,3
    8ab4:	d8800e15 	stw	r2,56(sp)
    8ab8:	003f0506 	br	86d0 <___vfprintf_internal_r+0x60>
    8abc:	0007883a 	mov	r3,zero
    8ac0:	003f4e06 	br	87fc <___vfprintf_internal_r+0x18c>
    8ac4:	00800044 	movi	r2,1
    8ac8:	d8800915 	stw	r2,36(sp)
    8acc:	003f5706 	br	882c <___vfprintf_internal_r+0x1bc>
    8ad0:	d8801117 	ldw	r2,68(sp)
    8ad4:	14400017 	ldw	r17,0(r2)
    8ad8:	10800104 	addi	r2,r2,4
    8adc:	d8801115 	stw	r2,68(sp)
    8ae0:	88000716 	blt	r17,zero,8b00 <___vfprintf_internal_r+0x490>
    8ae4:	d8000a15 	stw	zero,40(sp)
    8ae8:	003f8d06 	br	8920 <___vfprintf_internal_r+0x2b0>
    8aec:	d8c01117 	ldw	r3,68(sp)
    8af0:	1c400017 	ldw	r17,0(r3)
    8af4:	18c00104 	addi	r3,r3,4
    8af8:	d8c01115 	stw	r3,68(sp)
    8afc:	883ff90e 	bge	r17,zero,8ae4 <___vfprintf_internal_r+0x474>
    8b00:	00800044 	movi	r2,1
    8b04:	0463c83a 	sub	r17,zero,r17
    8b08:	d8800a15 	stw	r2,40(sp)
    8b0c:	003f8406 	br	8920 <___vfprintf_internal_r+0x2b0>
    8b10:	04000044 	movi	r16,1
    8b14:	8700080e 	bge	r16,fp,8b38 <___vfprintf_internal_r+0x4c8>
    8b18:	d9001017 	ldw	r4,64(sp)
    8b1c:	a00b883a 	mov	r5,r20
    8b20:	01800804 	movi	r6,32
    8b24:	e1ffffc4 	addi	r7,fp,-1
    8b28:	00085f00 	call	85f0 <print_repeat>
    8b2c:	103fc71e 	bne	r2,zero,8a4c <___vfprintf_internal_r+0x3dc>
    8b30:	e5c5883a 	add	r2,fp,r23
    8b34:	15ffffc4 	addi	r23,r2,-1
    8b38:	d8c01117 	ldw	r3,68(sp)
    8b3c:	d9001017 	ldw	r4,64(sp)
    8b40:	800f883a 	mov	r7,r16
    8b44:	18800017 	ldw	r2,0(r3)
    8b48:	a0c00117 	ldw	r3,4(r20)
    8b4c:	a00b883a 	mov	r5,r20
    8b50:	d8800005 	stb	r2,0(sp)
    8b54:	d80d883a 	mov	r6,sp
    8b58:	183ee83a 	callr	r3
    8b5c:	103fbb1e 	bne	r2,zero,8a4c <___vfprintf_internal_r+0x3dc>
    8b60:	d8801117 	ldw	r2,68(sp)
    8b64:	bdc00044 	addi	r23,r23,1
    8b68:	0021883a 	mov	r16,zero
    8b6c:	10800104 	addi	r2,r2,4
    8b70:	d8801115 	stw	r2,68(sp)
    8b74:	003ed606 	br	86d0 <___vfprintf_internal_r+0x60>
    8b78:	00800204 	movi	r2,8
    8b7c:	d8800d15 	stw	r2,52(sp)
    8b80:	d8000c15 	stw	zero,48(sp)
    8b84:	003fb606 	br	8a60 <___vfprintf_internal_r+0x3f0>
    8b88:	d8c01117 	ldw	r3,68(sp)
    8b8c:	1cc00017 	ldw	r19,0(r3)
    8b90:	9809883a 	mov	r4,r19
    8b94:	00085d00 	call	85d0 <strlen>
    8b98:	e0a1c83a 	sub	r16,fp,r2
    8b9c:	1023883a 	mov	r17,r2
    8ba0:	0400070e 	bge	zero,r16,8bc0 <___vfprintf_internal_r+0x550>
    8ba4:	d9001017 	ldw	r4,64(sp)
    8ba8:	a00b883a 	mov	r5,r20
    8bac:	01800804 	movi	r6,32
    8bb0:	800f883a 	mov	r7,r16
    8bb4:	00085f00 	call	85f0 <print_repeat>
    8bb8:	103fa41e 	bne	r2,zero,8a4c <___vfprintf_internal_r+0x3dc>
    8bbc:	bc2f883a 	add	r23,r23,r16
    8bc0:	a0c00117 	ldw	r3,4(r20)
    8bc4:	d9001017 	ldw	r4,64(sp)
    8bc8:	980d883a 	mov	r6,r19
    8bcc:	a00b883a 	mov	r5,r20
    8bd0:	880f883a 	mov	r7,r17
    8bd4:	183ee83a 	callr	r3
    8bd8:	103f9c1e 	bne	r2,zero,8a4c <___vfprintf_internal_r+0x3dc>
    8bdc:	d8801117 	ldw	r2,68(sp)
    8be0:	bc6f883a 	add	r23,r23,r17
    8be4:	0021883a 	mov	r16,zero
    8be8:	10800104 	addi	r2,r2,4
    8bec:	d8801115 	stw	r2,68(sp)
    8bf0:	003eb706 	br	86d0 <___vfprintf_internal_r+0x60>
    8bf4:	210015c4 	addi	r4,r4,87
    8bf8:	003f5106 	br	8940 <___vfprintf_internal_r+0x2d0>
    8bfc:	04003b16 	blt	zero,r16,8cec <___vfprintf_internal_r+0x67c>
    8c00:	d8c00a17 	ldw	r3,40(sp)
    8c04:	1805003a 	cmpeq	r2,r3,zero
    8c08:	103f7f1e 	bne	r2,zero,8a08 <___vfprintf_internal_r+0x398>
    8c0c:	a0c00117 	ldw	r3,4(r20)
    8c10:	d9001017 	ldw	r4,64(sp)
    8c14:	00800b44 	movi	r2,45
    8c18:	d8800005 	stb	r2,0(sp)
    8c1c:	a00b883a 	mov	r5,r20
    8c20:	d80d883a 	mov	r6,sp
    8c24:	01c00044 	movi	r7,1
    8c28:	183ee83a 	callr	r3
    8c2c:	103f871e 	bne	r2,zero,8a4c <___vfprintf_internal_r+0x3dc>
    8c30:	b8800044 	addi	r2,r23,1
    8c34:	003f7506 	br	8a0c <___vfprintf_internal_r+0x39c>
    8c38:	0007883a 	mov	r3,zero
    8c3c:	003edb06 	br	87ac <___vfprintf_internal_r+0x13c>
    8c40:	a0c00117 	ldw	r3,4(r20)
    8c44:	d9001017 	ldw	r4,64(sp)
    8c48:	d9400005 	stb	r5,0(sp)
    8c4c:	d80d883a 	mov	r6,sp
    8c50:	a00b883a 	mov	r5,r20
    8c54:	183ee83a 	callr	r3
    8c58:	103f7c1e 	bne	r2,zero,8a4c <___vfprintf_internal_r+0x3dc>
    8c5c:	bdc00044 	addi	r23,r23,1
    8c60:	003e9b06 	br	86d0 <___vfprintf_internal_r+0x60>
    8c64:	102f883a 	mov	r23,r2
    8c68:	0021883a 	mov	r16,zero
    8c6c:	003e9806 	br	86d0 <___vfprintf_internal_r+0x60>
    8c70:	a0c00117 	ldw	r3,4(r20)
    8c74:	d9000005 	stb	r4,0(sp)
    8c78:	d9001017 	ldw	r4,64(sp)
    8c7c:	a00b883a 	mov	r5,r20
    8c80:	d80d883a 	mov	r6,sp
    8c84:	800f883a 	mov	r7,r16
    8c88:	183ee83a 	callr	r3
    8c8c:	103f6f1e 	bne	r2,zero,8a4c <___vfprintf_internal_r+0x3dc>
    8c90:	bc2f883a 	add	r23,r23,r16
    8c94:	0021883a 	mov	r16,zero
    8c98:	003e8d06 	br	86d0 <___vfprintf_internal_r+0x60>
    8c9c:	d9001017 	ldw	r4,64(sp)
    8ca0:	a00b883a 	mov	r5,r20
    8ca4:	01800c04 	movi	r6,48
    8ca8:	800f883a 	mov	r7,r16
    8cac:	00085f00 	call	85f0 <print_repeat>
    8cb0:	103f661e 	bne	r2,zero,8a4c <___vfprintf_internal_r+0x3dc>
    8cb4:	bc05883a 	add	r2,r23,r16
    8cb8:	003f5406 	br	8a0c <___vfprintf_internal_r+0x39c>
    8cbc:	a0c00117 	ldw	r3,4(r20)
    8cc0:	d9001017 	ldw	r4,64(sp)
    8cc4:	00800b44 	movi	r2,45
    8cc8:	d8800005 	stb	r2,0(sp)
    8ccc:	a00b883a 	mov	r5,r20
    8cd0:	d80d883a 	mov	r6,sp
    8cd4:	01c00044 	movi	r7,1
    8cd8:	183ee83a 	callr	r3
    8cdc:	103f5b1e 	bne	r2,zero,8a4c <___vfprintf_internal_r+0x3dc>
    8ce0:	bdc00044 	addi	r23,r23,1
    8ce4:	043f480e 	bge	zero,r16,8a08 <___vfprintf_internal_r+0x398>
    8ce8:	003fec06 	br	8c9c <___vfprintf_internal_r+0x62c>
    8cec:	d9001017 	ldw	r4,64(sp)
    8cf0:	a00b883a 	mov	r5,r20
    8cf4:	01800804 	movi	r6,32
    8cf8:	800f883a 	mov	r7,r16
    8cfc:	00085f00 	call	85f0 <print_repeat>
    8d00:	103f521e 	bne	r2,zero,8a4c <___vfprintf_internal_r+0x3dc>
    8d04:	bc2f883a 	add	r23,r23,r16
    8d08:	003fbd06 	br	8c00 <___vfprintf_internal_r+0x590>

00008d0c <__vfprintf_internal>:
    8d0c:	00800074 	movhi	r2,1
    8d10:	10aa9704 	addi	r2,r2,-21924
    8d14:	2013883a 	mov	r9,r4
    8d18:	11000017 	ldw	r4,0(r2)
    8d1c:	2805883a 	mov	r2,r5
    8d20:	300f883a 	mov	r7,r6
    8d24:	480b883a 	mov	r5,r9
    8d28:	100d883a 	mov	r6,r2
    8d2c:	00086701 	jmpi	8670 <___vfprintf_internal_r>

00008d30 <__sfvwrite_small_dev>:
    8d30:	2880000b 	ldhu	r2,0(r5)
    8d34:	defffa04 	addi	sp,sp,-24
    8d38:	dcc00315 	stw	r19,12(sp)
    8d3c:	1080020c 	andi	r2,r2,8
    8d40:	dc800215 	stw	r18,8(sp)
    8d44:	dc400115 	stw	r17,4(sp)
    8d48:	dfc00515 	stw	ra,20(sp)
    8d4c:	dd000415 	stw	r20,16(sp)
    8d50:	dc000015 	stw	r16,0(sp)
    8d54:	2825883a 	mov	r18,r5
    8d58:	2027883a 	mov	r19,r4
    8d5c:	3023883a 	mov	r17,r6
    8d60:	10002026 	beq	r2,zero,8de4 <__sfvwrite_small_dev+0xb4>
    8d64:	2940008f 	ldh	r5,2(r5)
    8d68:	28000f16 	blt	r5,zero,8da8 <__sfvwrite_small_dev+0x78>
    8d6c:	01c01b0e 	bge	zero,r7,8ddc <__sfvwrite_small_dev+0xac>
    8d70:	3821883a 	mov	r16,r7
    8d74:	05010004 	movi	r20,1024
    8d78:	00000206 	br	8d84 <__sfvwrite_small_dev+0x54>
    8d7c:	0400170e 	bge	zero,r16,8ddc <__sfvwrite_small_dev+0xac>
    8d80:	9140008f 	ldh	r5,2(r18)
    8d84:	880d883a 	mov	r6,r17
    8d88:	9809883a 	mov	r4,r19
    8d8c:	800f883a 	mov	r7,r16
    8d90:	a400010e 	bge	r20,r16,8d98 <__sfvwrite_small_dev+0x68>
    8d94:	01c10004 	movi	r7,1024
    8d98:	0008ed00 	call	8ed0 <_write_r>
    8d9c:	88a3883a 	add	r17,r17,r2
    8da0:	80a1c83a 	sub	r16,r16,r2
    8da4:	00bff516 	blt	zero,r2,8d7c <__sfvwrite_small_dev+0x4c>
    8da8:	9080000b 	ldhu	r2,0(r18)
    8dac:	00ffffc4 	movi	r3,-1
    8db0:	10801014 	ori	r2,r2,64
    8db4:	9080000d 	sth	r2,0(r18)
    8db8:	1805883a 	mov	r2,r3
    8dbc:	dfc00517 	ldw	ra,20(sp)
    8dc0:	dd000417 	ldw	r20,16(sp)
    8dc4:	dcc00317 	ldw	r19,12(sp)
    8dc8:	dc800217 	ldw	r18,8(sp)
    8dcc:	dc400117 	ldw	r17,4(sp)
    8dd0:	dc000017 	ldw	r16,0(sp)
    8dd4:	dec00604 	addi	sp,sp,24
    8dd8:	f800283a 	ret
    8ddc:	0007883a 	mov	r3,zero
    8de0:	003ff506 	br	8db8 <__sfvwrite_small_dev+0x88>
    8de4:	00ffffc4 	movi	r3,-1
    8de8:	003ff306 	br	8db8 <__sfvwrite_small_dev+0x88>

00008dec <putc>:
    8dec:	defffd04 	addi	sp,sp,-12
    8df0:	00800074 	movhi	r2,1
    8df4:	10aa9704 	addi	r2,r2,-21924
    8df8:	dc000115 	stw	r16,4(sp)
    8dfc:	2021883a 	mov	r16,r4
    8e00:	11000017 	ldw	r4,0(r2)
    8e04:	dc000005 	stb	r16,0(sp)
    8e08:	00800074 	movhi	r2,1
    8e0c:	10a34c04 	addi	r2,r2,-29392
    8e10:	dfc00215 	stw	ra,8(sp)
    8e14:	28800115 	stw	r2,4(r5)
    8e18:	d80d883a 	mov	r6,sp
    8e1c:	01c00044 	movi	r7,1
    8e20:	103ee83a 	callr	r2
    8e24:	1007883a 	mov	r3,r2
    8e28:	00bfffc4 	movi	r2,-1
    8e2c:	18800526 	beq	r3,r2,8e44 <putc+0x58>
    8e30:	8005883a 	mov	r2,r16
    8e34:	dfc00217 	ldw	ra,8(sp)
    8e38:	dc000117 	ldw	r16,4(sp)
    8e3c:	dec00304 	addi	sp,sp,12
    8e40:	f800283a 	ret
    8e44:	1821883a 	mov	r16,r3
    8e48:	8005883a 	mov	r2,r16
    8e4c:	dfc00217 	ldw	ra,8(sp)
    8e50:	dc000117 	ldw	r16,4(sp)
    8e54:	dec00304 	addi	sp,sp,12
    8e58:	f800283a 	ret

00008e5c <_putc_r>:
    8e5c:	00800074 	movhi	r2,1
    8e60:	10aa9704 	addi	r2,r2,-21924
    8e64:	defffd04 	addi	sp,sp,-12
    8e68:	11000017 	ldw	r4,0(r2)
    8e6c:	00800074 	movhi	r2,1
    8e70:	10a34c04 	addi	r2,r2,-29392
    8e74:	30800115 	stw	r2,4(r6)
    8e78:	dc000115 	stw	r16,4(sp)
    8e7c:	2821883a 	mov	r16,r5
    8e80:	dfc00215 	stw	ra,8(sp)
    8e84:	300b883a 	mov	r5,r6
    8e88:	01c00044 	movi	r7,1
    8e8c:	d80d883a 	mov	r6,sp
    8e90:	dc000005 	stb	r16,0(sp)
    8e94:	103ee83a 	callr	r2
    8e98:	1007883a 	mov	r3,r2
    8e9c:	00bfffc4 	movi	r2,-1
    8ea0:	18800526 	beq	r3,r2,8eb8 <_putc_r+0x5c>
    8ea4:	8005883a 	mov	r2,r16
    8ea8:	dfc00217 	ldw	ra,8(sp)
    8eac:	dc000117 	ldw	r16,4(sp)
    8eb0:	dec00304 	addi	sp,sp,12
    8eb4:	f800283a 	ret
    8eb8:	1821883a 	mov	r16,r3
    8ebc:	8005883a 	mov	r2,r16
    8ec0:	dfc00217 	ldw	ra,8(sp)
    8ec4:	dc000117 	ldw	r16,4(sp)
    8ec8:	dec00304 	addi	sp,sp,12
    8ecc:	f800283a 	ret

00008ed0 <_write_r>:
    8ed0:	defffd04 	addi	sp,sp,-12
    8ed4:	dc000015 	stw	r16,0(sp)
    8ed8:	04000074 	movhi	r16,1
    8edc:	842b5404 	addi	r16,r16,-21168
    8ee0:	dc400115 	stw	r17,4(sp)
    8ee4:	80000015 	stw	zero,0(r16)
    8ee8:	2023883a 	mov	r17,r4
    8eec:	2809883a 	mov	r4,r5
    8ef0:	300b883a 	mov	r5,r6
    8ef4:	380d883a 	mov	r6,r7
    8ef8:	dfc00215 	stw	ra,8(sp)
    8efc:	00092240 	call	9224 <write>
    8f00:	1007883a 	mov	r3,r2
    8f04:	00bfffc4 	movi	r2,-1
    8f08:	18800626 	beq	r3,r2,8f24 <_write_r+0x54>
    8f0c:	1805883a 	mov	r2,r3
    8f10:	dfc00217 	ldw	ra,8(sp)
    8f14:	dc400117 	ldw	r17,4(sp)
    8f18:	dc000017 	ldw	r16,0(sp)
    8f1c:	dec00304 	addi	sp,sp,12
    8f20:	f800283a 	ret
    8f24:	80800017 	ldw	r2,0(r16)
    8f28:	103ff826 	beq	r2,zero,8f0c <_write_r+0x3c>
    8f2c:	88800015 	stw	r2,0(r17)
    8f30:	1805883a 	mov	r2,r3
    8f34:	dfc00217 	ldw	ra,8(sp)
    8f38:	dc400117 	ldw	r17,4(sp)
    8f3c:	dc000017 	ldw	r16,0(sp)
    8f40:	dec00304 	addi	sp,sp,12
    8f44:	f800283a 	ret

00008f48 <udivmodsi4>:
    8f48:	29001b2e 	bgeu	r5,r4,8fb8 <udivmodsi4+0x70>
    8f4c:	28001a16 	blt	r5,zero,8fb8 <udivmodsi4+0x70>
    8f50:	00800044 	movi	r2,1
    8f54:	0007883a 	mov	r3,zero
    8f58:	01c007c4 	movi	r7,31
    8f5c:	00000306 	br	8f6c <udivmodsi4+0x24>
    8f60:	19c01326 	beq	r3,r7,8fb0 <udivmodsi4+0x68>
    8f64:	18c00044 	addi	r3,r3,1
    8f68:	28000416 	blt	r5,zero,8f7c <udivmodsi4+0x34>
    8f6c:	294b883a 	add	r5,r5,r5
    8f70:	1085883a 	add	r2,r2,r2
    8f74:	293ffa36 	bltu	r5,r4,8f60 <udivmodsi4+0x18>
    8f78:	10000d26 	beq	r2,zero,8fb0 <udivmodsi4+0x68>
    8f7c:	0007883a 	mov	r3,zero
    8f80:	21400236 	bltu	r4,r5,8f8c <udivmodsi4+0x44>
    8f84:	2149c83a 	sub	r4,r4,r5
    8f88:	1886b03a 	or	r3,r3,r2
    8f8c:	1004d07a 	srli	r2,r2,1
    8f90:	280ad07a 	srli	r5,r5,1
    8f94:	103ffa1e 	bne	r2,zero,8f80 <udivmodsi4+0x38>
    8f98:	30000226 	beq	r6,zero,8fa4 <udivmodsi4+0x5c>
    8f9c:	2005883a 	mov	r2,r4
    8fa0:	f800283a 	ret
    8fa4:	1809883a 	mov	r4,r3
    8fa8:	2005883a 	mov	r2,r4
    8fac:	f800283a 	ret
    8fb0:	0007883a 	mov	r3,zero
    8fb4:	003ff806 	br	8f98 <udivmodsi4+0x50>
    8fb8:	00800044 	movi	r2,1
    8fbc:	0007883a 	mov	r3,zero
    8fc0:	003fef06 	br	8f80 <udivmodsi4+0x38>

00008fc4 <__divsi3>:
    8fc4:	defffe04 	addi	sp,sp,-8
    8fc8:	dc000015 	stw	r16,0(sp)
    8fcc:	dfc00115 	stw	ra,4(sp)
    8fd0:	0021883a 	mov	r16,zero
    8fd4:	20000c16 	blt	r4,zero,9008 <__divsi3+0x44>
    8fd8:	000d883a 	mov	r6,zero
    8fdc:	28000e16 	blt	r5,zero,9018 <__divsi3+0x54>
    8fe0:	0008f480 	call	8f48 <udivmodsi4>
    8fe4:	1007883a 	mov	r3,r2
    8fe8:	8005003a 	cmpeq	r2,r16,zero
    8fec:	1000011e 	bne	r2,zero,8ff4 <__divsi3+0x30>
    8ff0:	00c7c83a 	sub	r3,zero,r3
    8ff4:	1805883a 	mov	r2,r3
    8ff8:	dfc00117 	ldw	ra,4(sp)
    8ffc:	dc000017 	ldw	r16,0(sp)
    9000:	dec00204 	addi	sp,sp,8
    9004:	f800283a 	ret
    9008:	0109c83a 	sub	r4,zero,r4
    900c:	04000044 	movi	r16,1
    9010:	000d883a 	mov	r6,zero
    9014:	283ff20e 	bge	r5,zero,8fe0 <__divsi3+0x1c>
    9018:	014bc83a 	sub	r5,zero,r5
    901c:	8021003a 	cmpeq	r16,r16,zero
    9020:	003fef06 	br	8fe0 <__divsi3+0x1c>

00009024 <__modsi3>:
    9024:	deffff04 	addi	sp,sp,-4
    9028:	dfc00015 	stw	ra,0(sp)
    902c:	01800044 	movi	r6,1
    9030:	2807883a 	mov	r3,r5
    9034:	20000416 	blt	r4,zero,9048 <__modsi3+0x24>
    9038:	28000c16 	blt	r5,zero,906c <__modsi3+0x48>
    903c:	dfc00017 	ldw	ra,0(sp)
    9040:	dec00104 	addi	sp,sp,4
    9044:	0008f481 	jmpi	8f48 <udivmodsi4>
    9048:	0109c83a 	sub	r4,zero,r4
    904c:	28000b16 	blt	r5,zero,907c <__modsi3+0x58>
    9050:	180b883a 	mov	r5,r3
    9054:	01800044 	movi	r6,1
    9058:	0008f480 	call	8f48 <udivmodsi4>
    905c:	0085c83a 	sub	r2,zero,r2
    9060:	dfc00017 	ldw	ra,0(sp)
    9064:	dec00104 	addi	sp,sp,4
    9068:	f800283a 	ret
    906c:	014bc83a 	sub	r5,zero,r5
    9070:	dfc00017 	ldw	ra,0(sp)
    9074:	dec00104 	addi	sp,sp,4
    9078:	0008f481 	jmpi	8f48 <udivmodsi4>
    907c:	0147c83a 	sub	r3,zero,r5
    9080:	003ff306 	br	9050 <__modsi3+0x2c>

00009084 <__udivsi3>:
    9084:	000d883a 	mov	r6,zero
    9088:	0008f481 	jmpi	8f48 <udivmodsi4>

0000908c <__umodsi3>:
    908c:	01800044 	movi	r6,1
    9090:	0008f481 	jmpi	8f48 <udivmodsi4>

00009094 <__mulsi3>:
    9094:	20000a26 	beq	r4,zero,90c0 <__mulsi3+0x2c>
    9098:	0007883a 	mov	r3,zero
    909c:	2080004c 	andi	r2,r4,1
    90a0:	1005003a 	cmpeq	r2,r2,zero
    90a4:	2008d07a 	srli	r4,r4,1
    90a8:	1000011e 	bne	r2,zero,90b0 <__mulsi3+0x1c>
    90ac:	1947883a 	add	r3,r3,r5
    90b0:	294b883a 	add	r5,r5,r5
    90b4:	203ff91e 	bne	r4,zero,909c <__mulsi3+0x8>
    90b8:	1805883a 	mov	r2,r3
    90bc:	f800283a 	ret
    90c0:	0007883a 	mov	r3,zero
    90c4:	1805883a 	mov	r2,r3
    90c8:	f800283a 	ret

000090cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    90cc:	defffe04 	addi	sp,sp,-8
    90d0:	dfc00115 	stw	ra,4(sp)
    90d4:	df000015 	stw	fp,0(sp)
    90d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    90dc:	01000074 	movhi	r4,1
    90e0:	212a9f04 	addi	r4,r4,-21892
    90e4:	01400074 	movhi	r5,1
    90e8:	2969ea04 	addi	r5,r5,-22616
    90ec:	01800074 	movhi	r6,1
    90f0:	31aa9f04 	addi	r6,r6,-21892
    90f4:	000914c0 	call	914c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    90f8:	01000074 	movhi	r4,1
    90fc:	21200804 	addi	r4,r4,-32736
    9100:	01400074 	movhi	r5,1
    9104:	29600804 	addi	r5,r5,-32736
    9108:	01800074 	movhi	r6,1
    910c:	31a00804 	addi	r6,r6,-32736
    9110:	000914c0 	call	914c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9114:	01000074 	movhi	r4,1
    9118:	21296304 	addi	r4,r4,-23156
    911c:	01400074 	movhi	r5,1
    9120:	29696304 	addi	r5,r5,-23156
    9124:	01800074 	movhi	r6,1
    9128:	31a9ea04 	addi	r6,r6,-22616
    912c:	000914c0 	call	914c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9130:	00097fc0 	call	97fc <alt_dcache_flush_all>
  alt_icache_flush_all();
    9134:	0009a200 	call	9a20 <alt_icache_flush_all>
}
    9138:	e037883a 	mov	sp,fp
    913c:	dfc00117 	ldw	ra,4(sp)
    9140:	df000017 	ldw	fp,0(sp)
    9144:	dec00204 	addi	sp,sp,8
    9148:	f800283a 	ret

0000914c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    914c:	defffc04 	addi	sp,sp,-16
    9150:	df000315 	stw	fp,12(sp)
    9154:	df000304 	addi	fp,sp,12
    9158:	e13ffd15 	stw	r4,-12(fp)
    915c:	e17ffe15 	stw	r5,-8(fp)
    9160:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9164:	e0fffe17 	ldw	r3,-8(fp)
    9168:	e0bffd17 	ldw	r2,-12(fp)
    916c:	18800e26 	beq	r3,r2,91a8 <alt_load_section+0x5c>
  {
    while( to != end )
    9170:	00000a06 	br	919c <alt_load_section+0x50>
    {
      *to++ = *from++;
    9174:	e0bffd17 	ldw	r2,-12(fp)
    9178:	10c00017 	ldw	r3,0(r2)
    917c:	e0bffe17 	ldw	r2,-8(fp)
    9180:	10c00015 	stw	r3,0(r2)
    9184:	e0bffe17 	ldw	r2,-8(fp)
    9188:	10800104 	addi	r2,r2,4
    918c:	e0bffe15 	stw	r2,-8(fp)
    9190:	e0bffd17 	ldw	r2,-12(fp)
    9194:	10800104 	addi	r2,r2,4
    9198:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    919c:	e0fffe17 	ldw	r3,-8(fp)
    91a0:	e0bfff17 	ldw	r2,-4(fp)
    91a4:	18bff31e 	bne	r3,r2,9174 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    91a8:	e037883a 	mov	sp,fp
    91ac:	df000017 	ldw	fp,0(sp)
    91b0:	dec00104 	addi	sp,sp,4
    91b4:	f800283a 	ret

000091b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    91b8:	defffd04 	addi	sp,sp,-12
    91bc:	dfc00215 	stw	ra,8(sp)
    91c0:	df000115 	stw	fp,4(sp)
    91c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    91c8:	0009883a 	mov	r4,zero
    91cc:	00093a80 	call	93a8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    91d0:	00093dc0 	call	93dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    91d4:	01000074 	movhi	r4,1
    91d8:	2129dd04 	addi	r4,r4,-22668
    91dc:	01400074 	movhi	r5,1
    91e0:	2969dd04 	addi	r5,r5,-22668
    91e4:	01800074 	movhi	r6,1
    91e8:	31a9dd04 	addi	r6,r6,-22668
    91ec:	0009b140 	call	9b14 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    91f0:	00099580 	call	9958 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    91f4:	01000074 	movhi	r4,1
    91f8:	21266f04 	addi	r4,r4,-26180
    91fc:	000a18c0 	call	a18c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    9200:	d120be17 	ldw	r4,-32008(gp)
    9204:	d160bf17 	ldw	r5,-32004(gp)
    9208:	d1a0c017 	ldw	r6,-32000(gp)
    920c:	000805c0 	call	805c <main>
    9210:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9214:	01000044 	movi	r4,1
    9218:	000969c0 	call	969c <close>
  exit (result);
    921c:	e13fff17 	ldw	r4,-4(fp)
    9220:	000a1a00 	call	a1a0 <exit>

00009224 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9224:	defff704 	addi	sp,sp,-36
    9228:	dfc00815 	stw	ra,32(sp)
    922c:	df000715 	stw	fp,28(sp)
    9230:	df000704 	addi	fp,sp,28
    9234:	e13ffb15 	stw	r4,-20(fp)
    9238:	e17ffc15 	stw	r5,-16(fp)
    923c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9240:	e0bffb17 	ldw	r2,-20(fp)
    9244:	1004803a 	cmplt	r2,r2,zero
    9248:	1000091e 	bne	r2,zero,9270 <write+0x4c>
    924c:	e13ffb17 	ldw	r4,-20(fp)
    9250:	01400304 	movi	r5,12
    9254:	00090940 	call	9094 <__mulsi3>
    9258:	1007883a 	mov	r3,r2
    925c:	00800074 	movhi	r2,1
    9260:	10aa3704 	addi	r2,r2,-22308
    9264:	1887883a 	add	r3,r3,r2
    9268:	e0ffff15 	stw	r3,-4(fp)
    926c:	00000106 	br	9274 <write+0x50>
    9270:	e03fff15 	stw	zero,-4(fp)
    9274:	e0bfff17 	ldw	r2,-4(fp)
    9278:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    927c:	e0bffa17 	ldw	r2,-24(fp)
    9280:	1005003a 	cmpeq	r2,r2,zero
    9284:	1000241e 	bne	r2,zero,9318 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    9288:	e0bffa17 	ldw	r2,-24(fp)
    928c:	10800217 	ldw	r2,8(r2)
    9290:	108000cc 	andi	r2,r2,3
    9294:	1005003a 	cmpeq	r2,r2,zero
    9298:	10001a1e 	bne	r2,zero,9304 <write+0xe0>
    929c:	e0bffa17 	ldw	r2,-24(fp)
    92a0:	10800017 	ldw	r2,0(r2)
    92a4:	10800617 	ldw	r2,24(r2)
    92a8:	1005003a 	cmpeq	r2,r2,zero
    92ac:	1000151e 	bne	r2,zero,9304 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    92b0:	e0bffa17 	ldw	r2,-24(fp)
    92b4:	10800017 	ldw	r2,0(r2)
    92b8:	10800617 	ldw	r2,24(r2)
    92bc:	e17ffc17 	ldw	r5,-16(fp)
    92c0:	e1bffd17 	ldw	r6,-12(fp)
    92c4:	e13ffa17 	ldw	r4,-24(fp)
    92c8:	103ee83a 	callr	r2
    92cc:	e0bff915 	stw	r2,-28(fp)
    92d0:	e0bff917 	ldw	r2,-28(fp)
    92d4:	1004403a 	cmpge	r2,r2,zero
    92d8:	1000071e 	bne	r2,zero,92f8 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    92dc:	00093480 	call	9348 <alt_get_errno>
    92e0:	e0fff917 	ldw	r3,-28(fp)
    92e4:	00c7c83a 	sub	r3,zero,r3
    92e8:	10c00015 	stw	r3,0(r2)
        return -1;
    92ec:	00bfffc4 	movi	r2,-1
    92f0:	e0bffe15 	stw	r2,-8(fp)
    92f4:	00000e06 	br	9330 <write+0x10c>
      }
      return rval;
    92f8:	e0bff917 	ldw	r2,-28(fp)
    92fc:	e0bffe15 	stw	r2,-8(fp)
    9300:	00000b06 	br	9330 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9304:	00093480 	call	9348 <alt_get_errno>
    9308:	1007883a 	mov	r3,r2
    930c:	00800344 	movi	r2,13
    9310:	18800015 	stw	r2,0(r3)
    9314:	00000406 	br	9328 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9318:	00093480 	call	9348 <alt_get_errno>
    931c:	1007883a 	mov	r3,r2
    9320:	00801444 	movi	r2,81
    9324:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9328:	00bfffc4 	movi	r2,-1
    932c:	e0bffe15 	stw	r2,-8(fp)
    9330:	e0bffe17 	ldw	r2,-8(fp)
}
    9334:	e037883a 	mov	sp,fp
    9338:	dfc00117 	ldw	ra,4(sp)
    933c:	df000017 	ldw	fp,0(sp)
    9340:	dec00204 	addi	sp,sp,8
    9344:	f800283a 	ret

00009348 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9348:	defffd04 	addi	sp,sp,-12
    934c:	dfc00215 	stw	ra,8(sp)
    9350:	df000115 	stw	fp,4(sp)
    9354:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9358:	00800074 	movhi	r2,1
    935c:	10aa9e04 	addi	r2,r2,-21896
    9360:	10800017 	ldw	r2,0(r2)
    9364:	1005003a 	cmpeq	r2,r2,zero
    9368:	1000061e 	bne	r2,zero,9384 <alt_get_errno+0x3c>
    936c:	00800074 	movhi	r2,1
    9370:	10aa9e04 	addi	r2,r2,-21896
    9374:	10800017 	ldw	r2,0(r2)
    9378:	103ee83a 	callr	r2
    937c:	e0bfff15 	stw	r2,-4(fp)
    9380:	00000306 	br	9390 <alt_get_errno+0x48>
    9384:	00800074 	movhi	r2,1
    9388:	10ab5404 	addi	r2,r2,-21168
    938c:	e0bfff15 	stw	r2,-4(fp)
    9390:	e0bfff17 	ldw	r2,-4(fp)
}
    9394:	e037883a 	mov	sp,fp
    9398:	dfc00117 	ldw	ra,4(sp)
    939c:	df000017 	ldw	fp,0(sp)
    93a0:	dec00204 	addi	sp,sp,8
    93a4:	f800283a 	ret

000093a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    93a8:	defffd04 	addi	sp,sp,-12
    93ac:	dfc00215 	stw	ra,8(sp)
    93b0:	df000115 	stw	fp,4(sp)
    93b4:	df000104 	addi	fp,sp,4
    93b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    93bc:	0009ee80 	call	9ee8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    93c0:	00800044 	movi	r2,1
    93c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    93c8:	e037883a 	mov	sp,fp
    93cc:	dfc00117 	ldw	ra,4(sp)
    93d0:	df000017 	ldw	fp,0(sp)
    93d4:	dec00204 	addi	sp,sp,8
    93d8:	f800283a 	ret

000093dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    93dc:	defffe04 	addi	sp,sp,-8
    93e0:	dfc00115 	stw	ra,4(sp)
    93e4:	df000015 	stw	fp,0(sp)
    93e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    93ec:	01000074 	movhi	r4,1
    93f0:	212a2204 	addi	r4,r4,-22392
    93f4:	000940c0 	call	940c <alt_dev_reg>
}
    93f8:	e037883a 	mov	sp,fp
    93fc:	dfc00117 	ldw	ra,4(sp)
    9400:	df000017 	ldw	fp,0(sp)
    9404:	dec00204 	addi	sp,sp,8
    9408:	f800283a 	ret

0000940c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    940c:	defffd04 	addi	sp,sp,-12
    9410:	dfc00215 	stw	ra,8(sp)
    9414:	df000115 	stw	fp,4(sp)
    9418:	df000104 	addi	fp,sp,4
    941c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9420:	e13fff17 	ldw	r4,-4(fp)
    9424:	01400074 	movhi	r5,1
    9428:	296a9b04 	addi	r5,r5,-21908
    942c:	00098440 	call	9844 <alt_dev_llist_insert>
}
    9430:	e037883a 	mov	sp,fp
    9434:	dfc00117 	ldw	ra,4(sp)
    9438:	df000017 	ldw	fp,0(sp)
    943c:	dec00204 	addi	sp,sp,8
    9440:	f800283a 	ret

00009444 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9444:	defffa04 	addi	sp,sp,-24
    9448:	dfc00515 	stw	ra,20(sp)
    944c:	df000415 	stw	fp,16(sp)
    9450:	df000404 	addi	fp,sp,16
    9454:	e13ffd15 	stw	r4,-12(fp)
    9458:	e17ffe15 	stw	r5,-8(fp)
    945c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9460:	e0bffd17 	ldw	r2,-12(fp)
    9464:	10800017 	ldw	r2,0(r2)
    9468:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    946c:	e0bffc17 	ldw	r2,-16(fp)
    9470:	11000a04 	addi	r4,r2,40
    9474:	e0bffd17 	ldw	r2,-12(fp)
    9478:	11c00217 	ldw	r7,8(r2)
    947c:	e17ffe17 	ldw	r5,-8(fp)
    9480:	e1bfff17 	ldw	r6,-4(fp)
    9484:	00094f40 	call	94f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9488:	e037883a 	mov	sp,fp
    948c:	dfc00117 	ldw	ra,4(sp)
    9490:	df000017 	ldw	fp,0(sp)
    9494:	dec00204 	addi	sp,sp,8
    9498:	f800283a 	ret

0000949c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    949c:	defffa04 	addi	sp,sp,-24
    94a0:	dfc00515 	stw	ra,20(sp)
    94a4:	df000415 	stw	fp,16(sp)
    94a8:	df000404 	addi	fp,sp,16
    94ac:	e13ffd15 	stw	r4,-12(fp)
    94b0:	e17ffe15 	stw	r5,-8(fp)
    94b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    94b8:	e0bffd17 	ldw	r2,-12(fp)
    94bc:	10800017 	ldw	r2,0(r2)
    94c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    94c4:	e0bffc17 	ldw	r2,-16(fp)
    94c8:	11000a04 	addi	r4,r2,40
    94cc:	e0bffd17 	ldw	r2,-12(fp)
    94d0:	11c00217 	ldw	r7,8(r2)
    94d4:	e17ffe17 	ldw	r5,-8(fp)
    94d8:	e1bfff17 	ldw	r6,-4(fp)
    94dc:	00095f80 	call	95f8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    94e0:	e037883a 	mov	sp,fp
    94e4:	dfc00117 	ldw	ra,4(sp)
    94e8:	df000017 	ldw	fp,0(sp)
    94ec:	dec00204 	addi	sp,sp,8
    94f0:	f800283a 	ret

000094f4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    94f4:	defff604 	addi	sp,sp,-40
    94f8:	df000915 	stw	fp,36(sp)
    94fc:	df000904 	addi	fp,sp,36
    9500:	e13ffb15 	stw	r4,-20(fp)
    9504:	e17ffc15 	stw	r5,-16(fp)
    9508:	e1bffd15 	stw	r6,-12(fp)
    950c:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    9510:	e0bffb17 	ldw	r2,-20(fp)
    9514:	10800017 	ldw	r2,0(r2)
    9518:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    951c:	e0bffc17 	ldw	r2,-16(fp)
    9520:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    9524:	e0bffd17 	ldw	r2,-12(fp)
    9528:	1007883a 	mov	r3,r2
    952c:	e0bffc17 	ldw	r2,-16(fp)
    9530:	10c5883a 	add	r2,r2,r3
    9534:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    9538:	00001606 	br	9594 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    953c:	e0bffa17 	ldw	r2,-24(fp)
    9540:	10800037 	ldwio	r2,0(r2)
    9544:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9548:	e0bff717 	ldw	r2,-36(fp)
    954c:	10a0000c 	andi	r2,r2,32768
    9550:	1005003a 	cmpeq	r2,r2,zero
    9554:	1000081e 	bne	r2,zero,9578 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9558:	e0bff717 	ldw	r2,-36(fp)
    955c:	1007883a 	mov	r3,r2
    9560:	e0bff917 	ldw	r2,-28(fp)
    9564:	10c00005 	stb	r3,0(r2)
    9568:	e0bff917 	ldw	r2,-28(fp)
    956c:	10800044 	addi	r2,r2,1
    9570:	e0bff915 	stw	r2,-28(fp)
    9574:	00000706 	br	9594 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    9578:	e0fff917 	ldw	r3,-28(fp)
    957c:	e0bffc17 	ldw	r2,-16(fp)
    9580:	1880071e 	bne	r3,r2,95a0 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    9584:	e0bffe17 	ldw	r2,-8(fp)
    9588:	1090000c 	andi	r2,r2,16384
    958c:	1004c03a 	cmpne	r2,r2,zero
    9590:	1000031e 	bne	r2,zero,95a0 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9594:	e0fff917 	ldw	r3,-28(fp)
    9598:	e0bff817 	ldw	r2,-32(fp)
    959c:	18bfe736 	bltu	r3,r2,953c <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    95a0:	e0fff917 	ldw	r3,-28(fp)
    95a4:	e0bffc17 	ldw	r2,-16(fp)
    95a8:	18800526 	beq	r3,r2,95c0 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    95ac:	e0fff917 	ldw	r3,-28(fp)
    95b0:	e0bffc17 	ldw	r2,-16(fp)
    95b4:	1887c83a 	sub	r3,r3,r2
    95b8:	e0ffff15 	stw	r3,-4(fp)
    95bc:	00000906 	br	95e4 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    95c0:	e0bffe17 	ldw	r2,-8(fp)
    95c4:	1090000c 	andi	r2,r2,16384
    95c8:	1005003a 	cmpeq	r2,r2,zero
    95cc:	1000031e 	bne	r2,zero,95dc <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    95d0:	00bffd44 	movi	r2,-11
    95d4:	e0bfff15 	stw	r2,-4(fp)
    95d8:	00000206 	br	95e4 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    95dc:	00bffec4 	movi	r2,-5
    95e0:	e0bfff15 	stw	r2,-4(fp)
    95e4:	e0bfff17 	ldw	r2,-4(fp)
}
    95e8:	e037883a 	mov	sp,fp
    95ec:	df000017 	ldw	fp,0(sp)
    95f0:	dec00104 	addi	sp,sp,4
    95f4:	f800283a 	ret

000095f8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    95f8:	defff904 	addi	sp,sp,-28
    95fc:	df000615 	stw	fp,24(sp)
    9600:	df000604 	addi	fp,sp,24
    9604:	e13ffc15 	stw	r4,-16(fp)
    9608:	e17ffd15 	stw	r5,-12(fp)
    960c:	e1bffe15 	stw	r6,-8(fp)
    9610:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9614:	e0bffc17 	ldw	r2,-16(fp)
    9618:	10800017 	ldw	r2,0(r2)
    961c:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    9620:	e0bffe17 	ldw	r2,-8(fp)
    9624:	1007883a 	mov	r3,r2
    9628:	e0bffd17 	ldw	r2,-12(fp)
    962c:	10c5883a 	add	r2,r2,r3
    9630:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9634:	00001106 	br	967c <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9638:	e0bffb17 	ldw	r2,-20(fp)
    963c:	10800104 	addi	r2,r2,4
    9640:	10800037 	ldwio	r2,0(r2)
    9644:	10bfffec 	andhi	r2,r2,65535
    9648:	1005003a 	cmpeq	r2,r2,zero
    964c:	10000b1e 	bne	r2,zero,967c <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9650:	e13ffb17 	ldw	r4,-20(fp)
    9654:	e0bffd17 	ldw	r2,-12(fp)
    9658:	10800003 	ldbu	r2,0(r2)
    965c:	10c03fcc 	andi	r3,r2,255
    9660:	18c0201c 	xori	r3,r3,128
    9664:	18ffe004 	addi	r3,r3,-128
    9668:	e0bffd17 	ldw	r2,-12(fp)
    966c:	10800044 	addi	r2,r2,1
    9670:	e0bffd15 	stw	r2,-12(fp)
    9674:	2005883a 	mov	r2,r4
    9678:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    967c:	e0fffd17 	ldw	r3,-12(fp)
    9680:	e0bffa17 	ldw	r2,-24(fp)
    9684:	18bfec36 	bltu	r3,r2,9638 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9688:	e0bffe17 	ldw	r2,-8(fp)
}
    968c:	e037883a 	mov	sp,fp
    9690:	df000017 	ldw	fp,0(sp)
    9694:	dec00104 	addi	sp,sp,4
    9698:	f800283a 	ret

0000969c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    969c:	defff804 	addi	sp,sp,-32
    96a0:	dfc00715 	stw	ra,28(sp)
    96a4:	df000615 	stw	fp,24(sp)
    96a8:	df000604 	addi	fp,sp,24
    96ac:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    96b0:	e0bffc17 	ldw	r2,-16(fp)
    96b4:	1004803a 	cmplt	r2,r2,zero
    96b8:	1000091e 	bne	r2,zero,96e0 <close+0x44>
    96bc:	e13ffc17 	ldw	r4,-16(fp)
    96c0:	01400304 	movi	r5,12
    96c4:	00090940 	call	9094 <__mulsi3>
    96c8:	1007883a 	mov	r3,r2
    96cc:	00800074 	movhi	r2,1
    96d0:	10aa3704 	addi	r2,r2,-22308
    96d4:	1887883a 	add	r3,r3,r2
    96d8:	e0ffff15 	stw	r3,-4(fp)
    96dc:	00000106 	br	96e4 <close+0x48>
    96e0:	e03fff15 	stw	zero,-4(fp)
    96e4:	e0bfff17 	ldw	r2,-4(fp)
    96e8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    96ec:	e0bffb17 	ldw	r2,-20(fp)
    96f0:	1005003a 	cmpeq	r2,r2,zero
    96f4:	10001d1e 	bne	r2,zero,976c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    96f8:	e0bffb17 	ldw	r2,-20(fp)
    96fc:	10800017 	ldw	r2,0(r2)
    9700:	10800417 	ldw	r2,16(r2)
    9704:	1005003a 	cmpeq	r2,r2,zero
    9708:	1000071e 	bne	r2,zero,9728 <close+0x8c>
    970c:	e0bffb17 	ldw	r2,-20(fp)
    9710:	10800017 	ldw	r2,0(r2)
    9714:	10800417 	ldw	r2,16(r2)
    9718:	e13ffb17 	ldw	r4,-20(fp)
    971c:	103ee83a 	callr	r2
    9720:	e0bffe15 	stw	r2,-8(fp)
    9724:	00000106 	br	972c <close+0x90>
    9728:	e03ffe15 	stw	zero,-8(fp)
    972c:	e0bffe17 	ldw	r2,-8(fp)
    9730:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9734:	e13ffc17 	ldw	r4,-16(fp)
    9738:	0009e700 	call	9e70 <alt_release_fd>
    if (rval < 0)
    973c:	e0bffa17 	ldw	r2,-24(fp)
    9740:	1004403a 	cmpge	r2,r2,zero
    9744:	1000071e 	bne	r2,zero,9764 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    9748:	000979c0 	call	979c <alt_get_errno>
    974c:	e0fffa17 	ldw	r3,-24(fp)
    9750:	00c7c83a 	sub	r3,zero,r3
    9754:	10c00015 	stw	r3,0(r2)
      return -1;
    9758:	00bfffc4 	movi	r2,-1
    975c:	e0bffd15 	stw	r2,-12(fp)
    9760:	00000806 	br	9784 <close+0xe8>
    }
    return 0;
    9764:	e03ffd15 	stw	zero,-12(fp)
    9768:	00000606 	br	9784 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    976c:	000979c0 	call	979c <alt_get_errno>
    9770:	1007883a 	mov	r3,r2
    9774:	00801444 	movi	r2,81
    9778:	18800015 	stw	r2,0(r3)
    return -1;
    977c:	00bfffc4 	movi	r2,-1
    9780:	e0bffd15 	stw	r2,-12(fp)
    9784:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9788:	e037883a 	mov	sp,fp
    978c:	dfc00117 	ldw	ra,4(sp)
    9790:	df000017 	ldw	fp,0(sp)
    9794:	dec00204 	addi	sp,sp,8
    9798:	f800283a 	ret

0000979c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    979c:	defffd04 	addi	sp,sp,-12
    97a0:	dfc00215 	stw	ra,8(sp)
    97a4:	df000115 	stw	fp,4(sp)
    97a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    97ac:	00800074 	movhi	r2,1
    97b0:	10aa9e04 	addi	r2,r2,-21896
    97b4:	10800017 	ldw	r2,0(r2)
    97b8:	1005003a 	cmpeq	r2,r2,zero
    97bc:	1000061e 	bne	r2,zero,97d8 <alt_get_errno+0x3c>
    97c0:	00800074 	movhi	r2,1
    97c4:	10aa9e04 	addi	r2,r2,-21896
    97c8:	10800017 	ldw	r2,0(r2)
    97cc:	103ee83a 	callr	r2
    97d0:	e0bfff15 	stw	r2,-4(fp)
    97d4:	00000306 	br	97e4 <alt_get_errno+0x48>
    97d8:	00800074 	movhi	r2,1
    97dc:	10ab5404 	addi	r2,r2,-21168
    97e0:	e0bfff15 	stw	r2,-4(fp)
    97e4:	e0bfff17 	ldw	r2,-4(fp)
}
    97e8:	e037883a 	mov	sp,fp
    97ec:	dfc00117 	ldw	ra,4(sp)
    97f0:	df000017 	ldw	fp,0(sp)
    97f4:	dec00204 	addi	sp,sp,8
    97f8:	f800283a 	ret

000097fc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    97fc:	deffff04 	addi	sp,sp,-4
    9800:	df000015 	stw	fp,0(sp)
    9804:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9808:	e037883a 	mov	sp,fp
    980c:	df000017 	ldw	fp,0(sp)
    9810:	dec00104 	addi	sp,sp,4
    9814:	f800283a 	ret

00009818 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9818:	defffc04 	addi	sp,sp,-16
    981c:	df000315 	stw	fp,12(sp)
    9820:	df000304 	addi	fp,sp,12
    9824:	e13ffd15 	stw	r4,-12(fp)
    9828:	e17ffe15 	stw	r5,-8(fp)
    982c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9830:	e0bfff17 	ldw	r2,-4(fp)
}
    9834:	e037883a 	mov	sp,fp
    9838:	df000017 	ldw	fp,0(sp)
    983c:	dec00104 	addi	sp,sp,4
    9840:	f800283a 	ret

00009844 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9844:	defff904 	addi	sp,sp,-28
    9848:	dfc00615 	stw	ra,24(sp)
    984c:	df000515 	stw	fp,20(sp)
    9850:	df000504 	addi	fp,sp,20
    9854:	e13ffd15 	stw	r4,-12(fp)
    9858:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    985c:	e0bffd17 	ldw	r2,-12(fp)
    9860:	1005003a 	cmpeq	r2,r2,zero
    9864:	1000041e 	bne	r2,zero,9878 <alt_dev_llist_insert+0x34>
    9868:	e0bffd17 	ldw	r2,-12(fp)
    986c:	10800217 	ldw	r2,8(r2)
    9870:	1004c03a 	cmpne	r2,r2,zero
    9874:	1000071e 	bne	r2,zero,9894 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    9878:	00098f80 	call	98f8 <alt_get_errno>
    987c:	1007883a 	mov	r3,r2
    9880:	00800584 	movi	r2,22
    9884:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9888:	00bffa84 	movi	r2,-22
    988c:	e0bfff15 	stw	r2,-4(fp)
    9890:	00001306 	br	98e0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9894:	e0fffd17 	ldw	r3,-12(fp)
    9898:	e0bffe17 	ldw	r2,-8(fp)
    989c:	e0bffb15 	stw	r2,-20(fp)
    98a0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    98a4:	e0fffc17 	ldw	r3,-16(fp)
    98a8:	e0bffb17 	ldw	r2,-20(fp)
    98ac:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    98b0:	e0bffb17 	ldw	r2,-20(fp)
    98b4:	10c00017 	ldw	r3,0(r2)
    98b8:	e0bffc17 	ldw	r2,-16(fp)
    98bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    98c0:	e0bffb17 	ldw	r2,-20(fp)
    98c4:	10c00017 	ldw	r3,0(r2)
    98c8:	e0bffc17 	ldw	r2,-16(fp)
    98cc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    98d0:	e0fffb17 	ldw	r3,-20(fp)
    98d4:	e0bffc17 	ldw	r2,-16(fp)
    98d8:	18800015 	stw	r2,0(r3)

  return 0;  
    98dc:	e03fff15 	stw	zero,-4(fp)
    98e0:	e0bfff17 	ldw	r2,-4(fp)
}
    98e4:	e037883a 	mov	sp,fp
    98e8:	dfc00117 	ldw	ra,4(sp)
    98ec:	df000017 	ldw	fp,0(sp)
    98f0:	dec00204 	addi	sp,sp,8
    98f4:	f800283a 	ret

000098f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    98f8:	defffd04 	addi	sp,sp,-12
    98fc:	dfc00215 	stw	ra,8(sp)
    9900:	df000115 	stw	fp,4(sp)
    9904:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9908:	00800074 	movhi	r2,1
    990c:	10aa9e04 	addi	r2,r2,-21896
    9910:	10800017 	ldw	r2,0(r2)
    9914:	1005003a 	cmpeq	r2,r2,zero
    9918:	1000061e 	bne	r2,zero,9934 <alt_get_errno+0x3c>
    991c:	00800074 	movhi	r2,1
    9920:	10aa9e04 	addi	r2,r2,-21896
    9924:	10800017 	ldw	r2,0(r2)
    9928:	103ee83a 	callr	r2
    992c:	e0bfff15 	stw	r2,-4(fp)
    9930:	00000306 	br	9940 <alt_get_errno+0x48>
    9934:	00800074 	movhi	r2,1
    9938:	10ab5404 	addi	r2,r2,-21168
    993c:	e0bfff15 	stw	r2,-4(fp)
    9940:	e0bfff17 	ldw	r2,-4(fp)
}
    9944:	e037883a 	mov	sp,fp
    9948:	dfc00117 	ldw	ra,4(sp)
    994c:	df000017 	ldw	fp,0(sp)
    9950:	dec00204 	addi	sp,sp,8
    9954:	f800283a 	ret

00009958 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9958:	defffd04 	addi	sp,sp,-12
    995c:	dfc00215 	stw	ra,8(sp)
    9960:	df000115 	stw	fp,4(sp)
    9964:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9968:	00bfff04 	movi	r2,-4
    996c:	00c00074 	movhi	r3,1
    9970:	18e96304 	addi	r3,r3,-23156
    9974:	1885883a 	add	r2,r3,r2
    9978:	e0bfff15 	stw	r2,-4(fp)
    997c:	00000606 	br	9998 <_do_ctors+0x40>
        (*ctor) (); 
    9980:	e0bfff17 	ldw	r2,-4(fp)
    9984:	10800017 	ldw	r2,0(r2)
    9988:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    998c:	e0bfff17 	ldw	r2,-4(fp)
    9990:	10bfff04 	addi	r2,r2,-4
    9994:	e0bfff15 	stw	r2,-4(fp)
    9998:	e0ffff17 	ldw	r3,-4(fp)
    999c:	00800074 	movhi	r2,1
    99a0:	10a96204 	addi	r2,r2,-23160
    99a4:	18bff62e 	bgeu	r3,r2,9980 <_do_ctors+0x28>
        (*ctor) (); 
}
    99a8:	e037883a 	mov	sp,fp
    99ac:	dfc00117 	ldw	ra,4(sp)
    99b0:	df000017 	ldw	fp,0(sp)
    99b4:	dec00204 	addi	sp,sp,8
    99b8:	f800283a 	ret

000099bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    99bc:	defffd04 	addi	sp,sp,-12
    99c0:	dfc00215 	stw	ra,8(sp)
    99c4:	df000115 	stw	fp,4(sp)
    99c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    99cc:	00bfff04 	movi	r2,-4
    99d0:	00c00074 	movhi	r3,1
    99d4:	18e96304 	addi	r3,r3,-23156
    99d8:	1885883a 	add	r2,r3,r2
    99dc:	e0bfff15 	stw	r2,-4(fp)
    99e0:	00000606 	br	99fc <_do_dtors+0x40>
        (*dtor) (); 
    99e4:	e0bfff17 	ldw	r2,-4(fp)
    99e8:	10800017 	ldw	r2,0(r2)
    99ec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    99f0:	e0bfff17 	ldw	r2,-4(fp)
    99f4:	10bfff04 	addi	r2,r2,-4
    99f8:	e0bfff15 	stw	r2,-4(fp)
    99fc:	e0ffff17 	ldw	r3,-4(fp)
    9a00:	00800074 	movhi	r2,1
    9a04:	10a96304 	addi	r2,r2,-23156
    9a08:	18bff62e 	bgeu	r3,r2,99e4 <_do_dtors+0x28>
        (*dtor) (); 
}
    9a0c:	e037883a 	mov	sp,fp
    9a10:	dfc00117 	ldw	ra,4(sp)
    9a14:	df000017 	ldw	fp,0(sp)
    9a18:	dec00204 	addi	sp,sp,8
    9a1c:	f800283a 	ret

00009a20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9a20:	deffff04 	addi	sp,sp,-4
    9a24:	df000015 	stw	fp,0(sp)
    9a28:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9a2c:	e037883a 	mov	sp,fp
    9a30:	df000017 	ldw	fp,0(sp)
    9a34:	dec00104 	addi	sp,sp,4
    9a38:	f800283a 	ret

00009a3c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9a3c:	defff804 	addi	sp,sp,-32
    9a40:	dfc00715 	stw	ra,28(sp)
    9a44:	df000615 	stw	fp,24(sp)
    9a48:	dc000515 	stw	r16,20(sp)
    9a4c:	df000504 	addi	fp,sp,20
    9a50:	e13ffc15 	stw	r4,-16(fp)
    9a54:	e17ffd15 	stw	r5,-12(fp)
    9a58:	e1bffe15 	stw	r6,-8(fp)
    9a5c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    9a60:	e13ffd17 	ldw	r4,-12(fp)
    9a64:	e17ffe17 	ldw	r5,-8(fp)
    9a68:	e1bfff17 	ldw	r6,-4(fp)
    9a6c:	0009c840 	call	9c84 <open>
    9a70:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    9a74:	e0bffb17 	ldw	r2,-20(fp)
    9a78:	1004803a 	cmplt	r2,r2,zero
    9a7c:	10001f1e 	bne	r2,zero,9afc <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    9a80:	e13ffb17 	ldw	r4,-20(fp)
    9a84:	04000074 	movhi	r16,1
    9a88:	842a3704 	addi	r16,r16,-22308
    9a8c:	01400304 	movi	r5,12
    9a90:	00090940 	call	9094 <__mulsi3>
    9a94:	1405883a 	add	r2,r2,r16
    9a98:	10c00017 	ldw	r3,0(r2)
    9a9c:	e0bffc17 	ldw	r2,-16(fp)
    9aa0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9aa4:	e13ffb17 	ldw	r4,-20(fp)
    9aa8:	04000074 	movhi	r16,1
    9aac:	842a3704 	addi	r16,r16,-22308
    9ab0:	01400304 	movi	r5,12
    9ab4:	00090940 	call	9094 <__mulsi3>
    9ab8:	1405883a 	add	r2,r2,r16
    9abc:	10800104 	addi	r2,r2,4
    9ac0:	10c00017 	ldw	r3,0(r2)
    9ac4:	e0bffc17 	ldw	r2,-16(fp)
    9ac8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9acc:	e13ffb17 	ldw	r4,-20(fp)
    9ad0:	04000074 	movhi	r16,1
    9ad4:	842a3704 	addi	r16,r16,-22308
    9ad8:	01400304 	movi	r5,12
    9adc:	00090940 	call	9094 <__mulsi3>
    9ae0:	1405883a 	add	r2,r2,r16
    9ae4:	10800204 	addi	r2,r2,8
    9ae8:	10c00017 	ldw	r3,0(r2)
    9aec:	e0bffc17 	ldw	r2,-16(fp)
    9af0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9af4:	e13ffb17 	ldw	r4,-20(fp)
    9af8:	0009e700 	call	9e70 <alt_release_fd>
  }
} 
    9afc:	e037883a 	mov	sp,fp
    9b00:	dfc00217 	ldw	ra,8(sp)
    9b04:	df000117 	ldw	fp,4(sp)
    9b08:	dc000017 	ldw	r16,0(sp)
    9b0c:	dec00304 	addi	sp,sp,12
    9b10:	f800283a 	ret

00009b14 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9b14:	defffb04 	addi	sp,sp,-20
    9b18:	dfc00415 	stw	ra,16(sp)
    9b1c:	df000315 	stw	fp,12(sp)
    9b20:	df000304 	addi	fp,sp,12
    9b24:	e13ffd15 	stw	r4,-12(fp)
    9b28:	e17ffe15 	stw	r5,-8(fp)
    9b2c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9b30:	01000074 	movhi	r4,1
    9b34:	212a3a04 	addi	r4,r4,-22296
    9b38:	e17ffd17 	ldw	r5,-12(fp)
    9b3c:	01800044 	movi	r6,1
    9b40:	01c07fc4 	movi	r7,511
    9b44:	0009a3c0 	call	9a3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9b48:	01000074 	movhi	r4,1
    9b4c:	212a3704 	addi	r4,r4,-22308
    9b50:	e17ffe17 	ldw	r5,-8(fp)
    9b54:	000d883a 	mov	r6,zero
    9b58:	01c07fc4 	movi	r7,511
    9b5c:	0009a3c0 	call	9a3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9b60:	01000074 	movhi	r4,1
    9b64:	212a3d04 	addi	r4,r4,-22284
    9b68:	e17fff17 	ldw	r5,-4(fp)
    9b6c:	01800044 	movi	r6,1
    9b70:	01c07fc4 	movi	r7,511
    9b74:	0009a3c0 	call	9a3c <alt_open_fd>
}  
    9b78:	e037883a 	mov	sp,fp
    9b7c:	dfc00117 	ldw	ra,4(sp)
    9b80:	df000017 	ldw	fp,0(sp)
    9b84:	dec00204 	addi	sp,sp,8
    9b88:	f800283a 	ret

00009b8c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9b8c:	defffa04 	addi	sp,sp,-24
    9b90:	dfc00515 	stw	ra,20(sp)
    9b94:	df000415 	stw	fp,16(sp)
    9b98:	dc000315 	stw	r16,12(sp)
    9b9c:	df000304 	addi	fp,sp,12
    9ba0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9ba4:	e0bffe17 	ldw	r2,-8(fp)
    9ba8:	10800217 	ldw	r2,8(r2)
    9bac:	10d00034 	orhi	r3,r2,16384
    9bb0:	e0bffe17 	ldw	r2,-8(fp)
    9bb4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9bb8:	e03ffd15 	stw	zero,-12(fp)
    9bbc:	00002306 	br	9c4c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9bc0:	e13ffd17 	ldw	r4,-12(fp)
    9bc4:	04000074 	movhi	r16,1
    9bc8:	842a3704 	addi	r16,r16,-22308
    9bcc:	01400304 	movi	r5,12
    9bd0:	00090940 	call	9094 <__mulsi3>
    9bd4:	1405883a 	add	r2,r2,r16
    9bd8:	10c00017 	ldw	r3,0(r2)
    9bdc:	e0bffe17 	ldw	r2,-8(fp)
    9be0:	10800017 	ldw	r2,0(r2)
    9be4:	1880161e 	bne	r3,r2,9c40 <alt_file_locked+0xb4>
    9be8:	e13ffd17 	ldw	r4,-12(fp)
    9bec:	04000074 	movhi	r16,1
    9bf0:	842a3704 	addi	r16,r16,-22308
    9bf4:	01400304 	movi	r5,12
    9bf8:	00090940 	call	9094 <__mulsi3>
    9bfc:	1405883a 	add	r2,r2,r16
    9c00:	10800204 	addi	r2,r2,8
    9c04:	10800017 	ldw	r2,0(r2)
    9c08:	1004403a 	cmpge	r2,r2,zero
    9c0c:	10000c1e 	bne	r2,zero,9c40 <alt_file_locked+0xb4>
    9c10:	e13ffd17 	ldw	r4,-12(fp)
    9c14:	01400304 	movi	r5,12
    9c18:	00090940 	call	9094 <__mulsi3>
    9c1c:	1007883a 	mov	r3,r2
    9c20:	00800074 	movhi	r2,1
    9c24:	10aa3704 	addi	r2,r2,-22308
    9c28:	1887883a 	add	r3,r3,r2
    9c2c:	e0bffe17 	ldw	r2,-8(fp)
    9c30:	18800326 	beq	r3,r2,9c40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9c34:	00bffcc4 	movi	r2,-13
    9c38:	e0bfff15 	stw	r2,-4(fp)
    9c3c:	00000a06 	br	9c68 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9c40:	e0bffd17 	ldw	r2,-12(fp)
    9c44:	10800044 	addi	r2,r2,1
    9c48:	e0bffd15 	stw	r2,-12(fp)
    9c4c:	00800074 	movhi	r2,1
    9c50:	10aa9d04 	addi	r2,r2,-21900
    9c54:	10800017 	ldw	r2,0(r2)
    9c58:	1007883a 	mov	r3,r2
    9c5c:	e0bffd17 	ldw	r2,-12(fp)
    9c60:	18bfd72e 	bgeu	r3,r2,9bc0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9c64:	e03fff15 	stw	zero,-4(fp)
    9c68:	e0bfff17 	ldw	r2,-4(fp)
}
    9c6c:	e037883a 	mov	sp,fp
    9c70:	dfc00217 	ldw	ra,8(sp)
    9c74:	df000117 	ldw	fp,4(sp)
    9c78:	dc000017 	ldw	r16,0(sp)
    9c7c:	dec00304 	addi	sp,sp,12
    9c80:	f800283a 	ret

00009c84 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9c84:	defff404 	addi	sp,sp,-48
    9c88:	dfc00b15 	stw	ra,44(sp)
    9c8c:	df000a15 	stw	fp,40(sp)
    9c90:	df000a04 	addi	fp,sp,40
    9c94:	e13ffb15 	stw	r4,-20(fp)
    9c98:	e17ffc15 	stw	r5,-16(fp)
    9c9c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9ca0:	00bfffc4 	movi	r2,-1
    9ca4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    9ca8:	00bffb44 	movi	r2,-19
    9cac:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    9cb0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9cb4:	e13ffb17 	ldw	r4,-20(fp)
    9cb8:	01400074 	movhi	r5,1
    9cbc:	296a9b04 	addi	r5,r5,-21908
    9cc0:	0009f080 	call	9f08 <alt_find_dev>
    9cc4:	e0bffa15 	stw	r2,-24(fp)
    9cc8:	e0bffa17 	ldw	r2,-24(fp)
    9ccc:	1004c03a 	cmpne	r2,r2,zero
    9cd0:	1000051e 	bne	r2,zero,9ce8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9cd4:	e13ffb17 	ldw	r4,-20(fp)
    9cd8:	0009f9c0 	call	9f9c <alt_find_file>
    9cdc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    9ce0:	00800044 	movi	r2,1
    9ce4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9ce8:	e0bffa17 	ldw	r2,-24(fp)
    9cec:	1005003a 	cmpeq	r2,r2,zero
    9cf0:	1000311e 	bne	r2,zero,9db8 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9cf4:	e13ffa17 	ldw	r4,-24(fp)
    9cf8:	000a0bc0 	call	a0bc <alt_get_fd>
    9cfc:	e0bff815 	stw	r2,-32(fp)
    9d00:	e0bff817 	ldw	r2,-32(fp)
    9d04:	1004403a 	cmpge	r2,r2,zero
    9d08:	1000031e 	bne	r2,zero,9d18 <open+0x94>
    {
      status = index;
    9d0c:	e0bff817 	ldw	r2,-32(fp)
    9d10:	e0bff715 	stw	r2,-36(fp)
    9d14:	00002a06 	br	9dc0 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    9d18:	e13ff817 	ldw	r4,-32(fp)
    9d1c:	01400304 	movi	r5,12
    9d20:	00090940 	call	9094 <__mulsi3>
    9d24:	1007883a 	mov	r3,r2
    9d28:	00800074 	movhi	r2,1
    9d2c:	10aa3704 	addi	r2,r2,-22308
    9d30:	1885883a 	add	r2,r3,r2
    9d34:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9d38:	e0fffc17 	ldw	r3,-16(fp)
    9d3c:	00900034 	movhi	r2,16384
    9d40:	10bfffc4 	addi	r2,r2,-1
    9d44:	1886703a 	and	r3,r3,r2
    9d48:	e0bff917 	ldw	r2,-28(fp)
    9d4c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9d50:	e0bff617 	ldw	r2,-40(fp)
    9d54:	1004c03a 	cmpne	r2,r2,zero
    9d58:	1000061e 	bne	r2,zero,9d74 <open+0xf0>
    9d5c:	e13ff917 	ldw	r4,-28(fp)
    9d60:	0009b8c0 	call	9b8c <alt_file_locked>
    9d64:	e0bff715 	stw	r2,-36(fp)
    9d68:	e0bff717 	ldw	r2,-36(fp)
    9d6c:	1004803a 	cmplt	r2,r2,zero
    9d70:	1000131e 	bne	r2,zero,9dc0 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9d74:	e0bffa17 	ldw	r2,-24(fp)
    9d78:	10800317 	ldw	r2,12(r2)
    9d7c:	1005003a 	cmpeq	r2,r2,zero
    9d80:	1000091e 	bne	r2,zero,9da8 <open+0x124>
    9d84:	e0bffa17 	ldw	r2,-24(fp)
    9d88:	10800317 	ldw	r2,12(r2)
    9d8c:	e13ff917 	ldw	r4,-28(fp)
    9d90:	e17ffb17 	ldw	r5,-20(fp)
    9d94:	e1bffc17 	ldw	r6,-16(fp)
    9d98:	e1fffd17 	ldw	r7,-12(fp)
    9d9c:	103ee83a 	callr	r2
    9da0:	e0bfff15 	stw	r2,-4(fp)
    9da4:	00000106 	br	9dac <open+0x128>
    9da8:	e03fff15 	stw	zero,-4(fp)
    9dac:	e0bfff17 	ldw	r2,-4(fp)
    9db0:	e0bff715 	stw	r2,-36(fp)
    9db4:	00000206 	br	9dc0 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9db8:	00bffb44 	movi	r2,-19
    9dbc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9dc0:	e0bff717 	ldw	r2,-36(fp)
    9dc4:	1004403a 	cmpge	r2,r2,zero
    9dc8:	1000091e 	bne	r2,zero,9df0 <open+0x16c>
  {
    alt_release_fd (index);  
    9dcc:	e13ff817 	ldw	r4,-32(fp)
    9dd0:	0009e700 	call	9e70 <alt_release_fd>
    ALT_ERRNO = -status;
    9dd4:	0009e100 	call	9e10 <alt_get_errno>
    9dd8:	e0fff717 	ldw	r3,-36(fp)
    9ddc:	00c7c83a 	sub	r3,zero,r3
    9de0:	10c00015 	stw	r3,0(r2)
    return -1;
    9de4:	00bfffc4 	movi	r2,-1
    9de8:	e0bffe15 	stw	r2,-8(fp)
    9dec:	00000206 	br	9df8 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    9df0:	e0bff817 	ldw	r2,-32(fp)
    9df4:	e0bffe15 	stw	r2,-8(fp)
    9df8:	e0bffe17 	ldw	r2,-8(fp)
}
    9dfc:	e037883a 	mov	sp,fp
    9e00:	dfc00117 	ldw	ra,4(sp)
    9e04:	df000017 	ldw	fp,0(sp)
    9e08:	dec00204 	addi	sp,sp,8
    9e0c:	f800283a 	ret

00009e10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9e10:	defffd04 	addi	sp,sp,-12
    9e14:	dfc00215 	stw	ra,8(sp)
    9e18:	df000115 	stw	fp,4(sp)
    9e1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9e20:	00800074 	movhi	r2,1
    9e24:	10aa9e04 	addi	r2,r2,-21896
    9e28:	10800017 	ldw	r2,0(r2)
    9e2c:	1005003a 	cmpeq	r2,r2,zero
    9e30:	1000061e 	bne	r2,zero,9e4c <alt_get_errno+0x3c>
    9e34:	00800074 	movhi	r2,1
    9e38:	10aa9e04 	addi	r2,r2,-21896
    9e3c:	10800017 	ldw	r2,0(r2)
    9e40:	103ee83a 	callr	r2
    9e44:	e0bfff15 	stw	r2,-4(fp)
    9e48:	00000306 	br	9e58 <alt_get_errno+0x48>
    9e4c:	00800074 	movhi	r2,1
    9e50:	10ab5404 	addi	r2,r2,-21168
    9e54:	e0bfff15 	stw	r2,-4(fp)
    9e58:	e0bfff17 	ldw	r2,-4(fp)
}
    9e5c:	e037883a 	mov	sp,fp
    9e60:	dfc00117 	ldw	ra,4(sp)
    9e64:	df000017 	ldw	fp,0(sp)
    9e68:	dec00204 	addi	sp,sp,8
    9e6c:	f800283a 	ret

00009e70 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9e70:	defffc04 	addi	sp,sp,-16
    9e74:	dfc00315 	stw	ra,12(sp)
    9e78:	df000215 	stw	fp,8(sp)
    9e7c:	dc000115 	stw	r16,4(sp)
    9e80:	df000104 	addi	fp,sp,4
    9e84:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9e88:	e0bfff17 	ldw	r2,-4(fp)
    9e8c:	108000d0 	cmplti	r2,r2,3
    9e90:	10000f1e 	bne	r2,zero,9ed0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    9e94:	e13fff17 	ldw	r4,-4(fp)
    9e98:	04000074 	movhi	r16,1
    9e9c:	842a3704 	addi	r16,r16,-22308
    9ea0:	01400304 	movi	r5,12
    9ea4:	00090940 	call	9094 <__mulsi3>
    9ea8:	1405883a 	add	r2,r2,r16
    9eac:	10800204 	addi	r2,r2,8
    9eb0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9eb4:	e13fff17 	ldw	r4,-4(fp)
    9eb8:	04000074 	movhi	r16,1
    9ebc:	842a3704 	addi	r16,r16,-22308
    9ec0:	01400304 	movi	r5,12
    9ec4:	00090940 	call	9094 <__mulsi3>
    9ec8:	1405883a 	add	r2,r2,r16
    9ecc:	10000015 	stw	zero,0(r2)
  }
}
    9ed0:	e037883a 	mov	sp,fp
    9ed4:	dfc00217 	ldw	ra,8(sp)
    9ed8:	df000117 	ldw	fp,4(sp)
    9edc:	dc000017 	ldw	r16,0(sp)
    9ee0:	dec00304 	addi	sp,sp,12
    9ee4:	f800283a 	ret

00009ee8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    9ee8:	deffff04 	addi	sp,sp,-4
    9eec:	df000015 	stw	fp,0(sp)
    9ef0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9ef4:	000170fa 	wrctl	ienable,zero
}
    9ef8:	e037883a 	mov	sp,fp
    9efc:	df000017 	ldw	fp,0(sp)
    9f00:	dec00104 	addi	sp,sp,4
    9f04:	f800283a 	ret

00009f08 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9f08:	defff904 	addi	sp,sp,-28
    9f0c:	dfc00615 	stw	ra,24(sp)
    9f10:	df000515 	stw	fp,20(sp)
    9f14:	df000504 	addi	fp,sp,20
    9f18:	e13ffd15 	stw	r4,-12(fp)
    9f1c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9f20:	e0bffe17 	ldw	r2,-8(fp)
    9f24:	10800017 	ldw	r2,0(r2)
    9f28:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9f2c:	e13ffd17 	ldw	r4,-12(fp)
    9f30:	00085d00 	call	85d0 <strlen>
    9f34:	10800044 	addi	r2,r2,1
    9f38:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9f3c:	00000d06 	br	9f74 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9f40:	e0bffc17 	ldw	r2,-16(fp)
    9f44:	11000217 	ldw	r4,8(r2)
    9f48:	e1bffb17 	ldw	r6,-20(fp)
    9f4c:	e17ffd17 	ldw	r5,-12(fp)
    9f50:	000a1c00 	call	a1c0 <memcmp>
    9f54:	1004c03a 	cmpne	r2,r2,zero
    9f58:	1000031e 	bne	r2,zero,9f68 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9f5c:	e0bffc17 	ldw	r2,-16(fp)
    9f60:	e0bfff15 	stw	r2,-4(fp)
    9f64:	00000706 	br	9f84 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9f68:	e0bffc17 	ldw	r2,-16(fp)
    9f6c:	10800017 	ldw	r2,0(r2)
    9f70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9f74:	e0fffe17 	ldw	r3,-8(fp)
    9f78:	e0bffc17 	ldw	r2,-16(fp)
    9f7c:	10fff01e 	bne	r2,r3,9f40 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9f80:	e03fff15 	stw	zero,-4(fp)
    9f84:	e0bfff17 	ldw	r2,-4(fp)
}
    9f88:	e037883a 	mov	sp,fp
    9f8c:	dfc00117 	ldw	ra,4(sp)
    9f90:	df000017 	ldw	fp,0(sp)
    9f94:	dec00204 	addi	sp,sp,8
    9f98:	f800283a 	ret

00009f9c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9f9c:	defffa04 	addi	sp,sp,-24
    9fa0:	dfc00515 	stw	ra,20(sp)
    9fa4:	df000415 	stw	fp,16(sp)
    9fa8:	df000404 	addi	fp,sp,16
    9fac:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9fb0:	00800074 	movhi	r2,1
    9fb4:	10aa9904 	addi	r2,r2,-21916
    9fb8:	10800017 	ldw	r2,0(r2)
    9fbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9fc0:	00003306 	br	a090 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    9fc4:	e0bffd17 	ldw	r2,-12(fp)
    9fc8:	11000217 	ldw	r4,8(r2)
    9fcc:	00085d00 	call	85d0 <strlen>
    9fd0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    9fd4:	e0bffd17 	ldw	r2,-12(fp)
    9fd8:	10c00217 	ldw	r3,8(r2)
    9fdc:	e0bffc17 	ldw	r2,-16(fp)
    9fe0:	1885883a 	add	r2,r3,r2
    9fe4:	10bfffc4 	addi	r2,r2,-1
    9fe8:	10800003 	ldbu	r2,0(r2)
    9fec:	10803fcc 	andi	r2,r2,255
    9ff0:	1080201c 	xori	r2,r2,128
    9ff4:	10bfe004 	addi	r2,r2,-128
    9ff8:	10800bd8 	cmpnei	r2,r2,47
    9ffc:	1000031e 	bne	r2,zero,a00c <alt_find_file+0x70>
    {
      len -= 1;
    a000:	e0bffc17 	ldw	r2,-16(fp)
    a004:	10bfffc4 	addi	r2,r2,-1
    a008:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a00c:	e0bffc17 	ldw	r2,-16(fp)
    a010:	1007883a 	mov	r3,r2
    a014:	e0bffe17 	ldw	r2,-8(fp)
    a018:	1885883a 	add	r2,r3,r2
    a01c:	10800003 	ldbu	r2,0(r2)
    a020:	10803fcc 	andi	r2,r2,255
    a024:	1080201c 	xori	r2,r2,128
    a028:	10bfe004 	addi	r2,r2,-128
    a02c:	10800be0 	cmpeqi	r2,r2,47
    a030:	10000a1e 	bne	r2,zero,a05c <alt_find_file+0xc0>
    a034:	e0bffc17 	ldw	r2,-16(fp)
    a038:	1007883a 	mov	r3,r2
    a03c:	e0bffe17 	ldw	r2,-8(fp)
    a040:	1885883a 	add	r2,r3,r2
    a044:	10800003 	ldbu	r2,0(r2)
    a048:	10803fcc 	andi	r2,r2,255
    a04c:	1080201c 	xori	r2,r2,128
    a050:	10bfe004 	addi	r2,r2,-128
    a054:	1004c03a 	cmpne	r2,r2,zero
    a058:	10000a1e 	bne	r2,zero,a084 <alt_find_file+0xe8>
    a05c:	e0bffd17 	ldw	r2,-12(fp)
    a060:	11000217 	ldw	r4,8(r2)
    a064:	e1bffc17 	ldw	r6,-16(fp)
    a068:	e17ffe17 	ldw	r5,-8(fp)
    a06c:	000a1c00 	call	a1c0 <memcmp>
    a070:	1004c03a 	cmpne	r2,r2,zero
    a074:	1000031e 	bne	r2,zero,a084 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a078:	e0bffd17 	ldw	r2,-12(fp)
    a07c:	e0bfff15 	stw	r2,-4(fp)
    a080:	00000806 	br	a0a4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    a084:	e0bffd17 	ldw	r2,-12(fp)
    a088:	10800017 	ldw	r2,0(r2)
    a08c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a090:	00c00074 	movhi	r3,1
    a094:	18ea9904 	addi	r3,r3,-21916
    a098:	e0bffd17 	ldw	r2,-12(fp)
    a09c:	10ffc91e 	bne	r2,r3,9fc4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a0a0:	e03fff15 	stw	zero,-4(fp)
    a0a4:	e0bfff17 	ldw	r2,-4(fp)
}
    a0a8:	e037883a 	mov	sp,fp
    a0ac:	dfc00117 	ldw	ra,4(sp)
    a0b0:	df000017 	ldw	fp,0(sp)
    a0b4:	dec00204 	addi	sp,sp,8
    a0b8:	f800283a 	ret

0000a0bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a0bc:	defffa04 	addi	sp,sp,-24
    a0c0:	dfc00515 	stw	ra,20(sp)
    a0c4:	df000415 	stw	fp,16(sp)
    a0c8:	dc000315 	stw	r16,12(sp)
    a0cc:	df000304 	addi	fp,sp,12
    a0d0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    a0d4:	00bffa04 	movi	r2,-24
    a0d8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a0dc:	e03ffe15 	stw	zero,-8(fp)
    a0e0:	00002006 	br	a164 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    a0e4:	e13ffe17 	ldw	r4,-8(fp)
    a0e8:	04000074 	movhi	r16,1
    a0ec:	842a3704 	addi	r16,r16,-22308
    a0f0:	01400304 	movi	r5,12
    a0f4:	00090940 	call	9094 <__mulsi3>
    a0f8:	1405883a 	add	r2,r2,r16
    a0fc:	10800017 	ldw	r2,0(r2)
    a100:	1004c03a 	cmpne	r2,r2,zero
    a104:	1000141e 	bne	r2,zero,a158 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    a108:	e13ffe17 	ldw	r4,-8(fp)
    a10c:	04000074 	movhi	r16,1
    a110:	842a3704 	addi	r16,r16,-22308
    a114:	01400304 	movi	r5,12
    a118:	00090940 	call	9094 <__mulsi3>
    a11c:	1407883a 	add	r3,r2,r16
    a120:	e0bfff17 	ldw	r2,-4(fp)
    a124:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    a128:	00800074 	movhi	r2,1
    a12c:	10aa9d04 	addi	r2,r2,-21900
    a130:	10c00017 	ldw	r3,0(r2)
    a134:	e0bffe17 	ldw	r2,-8(fp)
    a138:	1880040e 	bge	r3,r2,a14c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    a13c:	00c00074 	movhi	r3,1
    a140:	18ea9d04 	addi	r3,r3,-21900
    a144:	e0bffe17 	ldw	r2,-8(fp)
    a148:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    a14c:	e0bffe17 	ldw	r2,-8(fp)
    a150:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a154:	00000606 	br	a170 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a158:	e0bffe17 	ldw	r2,-8(fp)
    a15c:	10800044 	addi	r2,r2,1
    a160:	e0bffe15 	stw	r2,-8(fp)
    a164:	e0bffe17 	ldw	r2,-8(fp)
    a168:	10800810 	cmplti	r2,r2,32
    a16c:	103fdd1e 	bne	r2,zero,a0e4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a170:	e0bffd17 	ldw	r2,-12(fp)
}
    a174:	e037883a 	mov	sp,fp
    a178:	dfc00217 	ldw	ra,8(sp)
    a17c:	df000117 	ldw	fp,4(sp)
    a180:	dc000017 	ldw	r16,0(sp)
    a184:	dec00304 	addi	sp,sp,12
    a188:	f800283a 	ret

0000a18c <atexit>:
    a18c:	200b883a 	mov	r5,r4
    a190:	000d883a 	mov	r6,zero
    a194:	0009883a 	mov	r4,zero
    a198:	000f883a 	mov	r7,zero
    a19c:	000a1fc1 	jmpi	a1fc <__register_exitproc>

0000a1a0 <exit>:
    a1a0:	defffe04 	addi	sp,sp,-8
    a1a4:	dc400015 	stw	r17,0(sp)
    a1a8:	000b883a 	mov	r5,zero
    a1ac:	2023883a 	mov	r17,r4
    a1b0:	dfc00115 	stw	ra,4(sp)
    a1b4:	000a36c0 	call	a36c <__call_exitprocs>
    a1b8:	8809883a 	mov	r4,r17
    a1bc:	000a5680 	call	a568 <_exit>

0000a1c0 <memcmp>:
    a1c0:	31ffffc4 	addi	r7,r6,-1
    a1c4:	3000061e 	bne	r6,zero,a1e0 <memcmp+0x20>
    a1c8:	00000a06 	br	a1f4 <memcmp+0x34>
    a1cc:	39ffffc4 	addi	r7,r7,-1
    a1d0:	00bfffc4 	movi	r2,-1
    a1d4:	21000044 	addi	r4,r4,1
    a1d8:	29400044 	addi	r5,r5,1
    a1dc:	38800526 	beq	r7,r2,a1f4 <memcmp+0x34>
    a1e0:	20c00003 	ldbu	r3,0(r4)
    a1e4:	28800003 	ldbu	r2,0(r5)
    a1e8:	18bff826 	beq	r3,r2,a1cc <memcmp+0xc>
    a1ec:	1885c83a 	sub	r2,r3,r2
    a1f0:	f800283a 	ret
    a1f4:	0005883a 	mov	r2,zero
    a1f8:	f800283a 	ret

0000a1fc <__register_exitproc>:
    a1fc:	defff904 	addi	sp,sp,-28
    a200:	00800074 	movhi	r2,1
    a204:	10aa9804 	addi	r2,r2,-21920
    a208:	dc400115 	stw	r17,4(sp)
    a20c:	14400017 	ldw	r17,0(r2)
    a210:	dc000015 	stw	r16,0(sp)
    a214:	dd400515 	stw	r21,20(sp)
    a218:	8c000c17 	ldw	r16,48(r17)
    a21c:	dd000415 	stw	r20,16(sp)
    a220:	dcc00315 	stw	r19,12(sp)
    a224:	dc800215 	stw	r18,8(sp)
    a228:	dfc00615 	stw	ra,24(sp)
    a22c:	2025883a 	mov	r18,r4
    a230:	282b883a 	mov	r21,r5
    a234:	3029883a 	mov	r20,r6
    a238:	3827883a 	mov	r19,r7
    a23c:	80002626 	beq	r16,zero,a2d8 <__register_exitproc+0xdc>
    a240:	81400117 	ldw	r5,4(r16)
    a244:	008007c4 	movi	r2,31
    a248:	11403716 	blt	r2,r5,a328 <__register_exitproc+0x12c>
    a24c:	90002026 	beq	r18,zero,a2d0 <__register_exitproc+0xd4>
    a250:	81802217 	ldw	r6,136(r16)
    a254:	30002926 	beq	r6,zero,a2fc <__register_exitproc+0x100>
    a258:	81400117 	ldw	r5,4(r16)
    a25c:	00c00044 	movi	r3,1
    a260:	31004017 	ldw	r4,256(r6)
    a264:	1946983a 	sll	r3,r3,r5
    a268:	2945883a 	add	r2,r5,r5
    a26c:	1085883a 	add	r2,r2,r2
    a270:	1185883a 	add	r2,r2,r6
    a274:	20c8b03a 	or	r4,r4,r3
    a278:	14c02015 	stw	r19,128(r2)
    a27c:	15000015 	stw	r20,0(r2)
    a280:	00800084 	movi	r2,2
    a284:	31004015 	stw	r4,256(r6)
    a288:	90801826 	beq	r18,r2,a2ec <__register_exitproc+0xf0>
    a28c:	2945883a 	add	r2,r5,r5
    a290:	1085883a 	add	r2,r2,r2
    a294:	1405883a 	add	r2,r2,r16
    a298:	28c00044 	addi	r3,r5,1
    a29c:	0009883a 	mov	r4,zero
    a2a0:	15400215 	stw	r21,8(r2)
    a2a4:	80c00115 	stw	r3,4(r16)
    a2a8:	2005883a 	mov	r2,r4
    a2ac:	dfc00617 	ldw	ra,24(sp)
    a2b0:	dd400517 	ldw	r21,20(sp)
    a2b4:	dd000417 	ldw	r20,16(sp)
    a2b8:	dcc00317 	ldw	r19,12(sp)
    a2bc:	dc800217 	ldw	r18,8(sp)
    a2c0:	dc400117 	ldw	r17,4(sp)
    a2c4:	dc000017 	ldw	r16,0(sp)
    a2c8:	dec00704 	addi	sp,sp,28
    a2cc:	f800283a 	ret
    a2d0:	81400117 	ldw	r5,4(r16)
    a2d4:	003fed06 	br	a28c <__register_exitproc+0x90>
    a2d8:	00800074 	movhi	r2,1
    a2dc:	10ab5804 	addi	r2,r2,-21152
    a2e0:	1021883a 	mov	r16,r2
    a2e4:	88800c15 	stw	r2,48(r17)
    a2e8:	003fd506 	br	a240 <__register_exitproc+0x44>
    a2ec:	30804117 	ldw	r2,260(r6)
    a2f0:	10c4b03a 	or	r2,r2,r3
    a2f4:	30804115 	stw	r2,260(r6)
    a2f8:	003fe406 	br	a28c <__register_exitproc+0x90>
    a2fc:	00800034 	movhi	r2,0
    a300:	10800004 	addi	r2,r2,0
    a304:	10000b26 	beq	r2,zero,a334 <__register_exitproc+0x138>
    a308:	01004204 	movi	r4,264
    a30c:	103ee83a 	callr	r2
    a310:	10000826 	beq	r2,zero,a334 <__register_exitproc+0x138>
    a314:	100d883a 	mov	r6,r2
    a318:	10004015 	stw	zero,256(r2)
    a31c:	10004115 	stw	zero,260(r2)
    a320:	80802215 	stw	r2,136(r16)
    a324:	003fcc06 	br	a258 <__register_exitproc+0x5c>
    a328:	00800034 	movhi	r2,0
    a32c:	10800004 	addi	r2,r2,0
    a330:	1000021e 	bne	r2,zero,a33c <__register_exitproc+0x140>
    a334:	013fffc4 	movi	r4,-1
    a338:	003fdb06 	br	a2a8 <__register_exitproc+0xac>
    a33c:	01002304 	movi	r4,140
    a340:	103ee83a 	callr	r2
    a344:	1007883a 	mov	r3,r2
    a348:	103ffa26 	beq	r2,zero,a334 <__register_exitproc+0x138>
    a34c:	88800c17 	ldw	r2,48(r17)
    a350:	1821883a 	mov	r16,r3
    a354:	18000115 	stw	zero,4(r3)
    a358:	18800015 	stw	r2,0(r3)
    a35c:	88c00c15 	stw	r3,48(r17)
    a360:	903fdb26 	beq	r18,zero,a2d0 <__register_exitproc+0xd4>
    a364:	003fba06 	br	a250 <__register_exitproc+0x54>

0000a368 <register_fini>:
    a368:	f800283a 	ret

0000a36c <__call_exitprocs>:
    a36c:	defff304 	addi	sp,sp,-52
    a370:	00800074 	movhi	r2,1
    a374:	10aa9804 	addi	r2,r2,-21920
    a378:	df000b15 	stw	fp,44(sp)
    a37c:	17000017 	ldw	fp,0(r2)
    a380:	00800034 	movhi	r2,0
    a384:	10800004 	addi	r2,r2,0
    a388:	1005003a 	cmpeq	r2,r2,zero
    a38c:	d8800215 	stw	r2,8(sp)
    a390:	e0800c04 	addi	r2,fp,48
    a394:	dd800915 	stw	r22,36(sp)
    a398:	dd400815 	stw	r21,32(sp)
    a39c:	dfc00c15 	stw	ra,48(sp)
    a3a0:	ddc00a15 	stw	r23,40(sp)
    a3a4:	dd000715 	stw	r20,28(sp)
    a3a8:	dcc00615 	stw	r19,24(sp)
    a3ac:	dc800515 	stw	r18,20(sp)
    a3b0:	dc400415 	stw	r17,16(sp)
    a3b4:	dc000315 	stw	r16,12(sp)
    a3b8:	282d883a 	mov	r22,r5
    a3bc:	d9000115 	stw	r4,4(sp)
    a3c0:	d8800015 	stw	r2,0(sp)
    a3c4:	282b003a 	cmpeq	r21,r5,zero
    a3c8:	e4400c17 	ldw	r17,48(fp)
    a3cc:	88001226 	beq	r17,zero,a418 <__call_exitprocs+0xac>
    a3d0:	ddc00017 	ldw	r23,0(sp)
    a3d4:	88800117 	ldw	r2,4(r17)
    a3d8:	8c802217 	ldw	r18,136(r17)
    a3dc:	143fffc4 	addi	r16,r2,-1
    a3e0:	80000b16 	blt	r16,zero,a410 <__call_exitprocs+0xa4>
    a3e4:	9027003a 	cmpeq	r19,r18,zero
    a3e8:	a800171e 	bne	r21,zero,a448 <__call_exitprocs+0xdc>
    a3ec:	9800051e 	bne	r19,zero,a404 <__call_exitprocs+0x98>
    a3f0:	8409883a 	add	r4,r16,r16
    a3f4:	2105883a 	add	r2,r4,r4
    a3f8:	1485883a 	add	r2,r2,r18
    a3fc:	10c02017 	ldw	r3,128(r2)
    a400:	b0c01226 	beq	r22,r3,a44c <__call_exitprocs+0xe0>
    a404:	843fffc4 	addi	r16,r16,-1
    a408:	00bfffc4 	movi	r2,-1
    a40c:	80bff61e 	bne	r16,r2,a3e8 <__call_exitprocs+0x7c>
    a410:	d8800217 	ldw	r2,8(sp)
    a414:	10003226 	beq	r2,zero,a4e0 <__call_exitprocs+0x174>
    a418:	dfc00c17 	ldw	ra,48(sp)
    a41c:	df000b17 	ldw	fp,44(sp)
    a420:	ddc00a17 	ldw	r23,40(sp)
    a424:	dd800917 	ldw	r22,36(sp)
    a428:	dd400817 	ldw	r21,32(sp)
    a42c:	dd000717 	ldw	r20,28(sp)
    a430:	dcc00617 	ldw	r19,24(sp)
    a434:	dc800517 	ldw	r18,20(sp)
    a438:	dc400417 	ldw	r17,16(sp)
    a43c:	dc000317 	ldw	r16,12(sp)
    a440:	dec00d04 	addi	sp,sp,52
    a444:	f800283a 	ret
    a448:	8409883a 	add	r4,r16,r16
    a44c:	88c00117 	ldw	r3,4(r17)
    a450:	2105883a 	add	r2,r4,r4
    a454:	1445883a 	add	r2,r2,r17
    a458:	18ffffc4 	addi	r3,r3,-1
    a45c:	11800217 	ldw	r6,8(r2)
    a460:	1c001826 	beq	r3,r16,a4c4 <__call_exitprocs+0x158>
    a464:	10000215 	stw	zero,8(r2)
    a468:	303fe626 	beq	r6,zero,a404 <__call_exitprocs+0x98>
    a46c:	8d000117 	ldw	r20,4(r17)
    a470:	9800121e 	bne	r19,zero,a4bc <__call_exitprocs+0x150>
    a474:	00c00044 	movi	r3,1
    a478:	1c06983a 	sll	r3,r3,r16
    a47c:	90804017 	ldw	r2,256(r18)
    a480:	1884703a 	and	r2,r3,r2
    a484:	10000d26 	beq	r2,zero,a4bc <__call_exitprocs+0x150>
    a488:	90804117 	ldw	r2,260(r18)
    a48c:	1884703a 	and	r2,r3,r2
    a490:	10000e1e 	bne	r2,zero,a4cc <__call_exitprocs+0x160>
    a494:	2105883a 	add	r2,r4,r4
    a498:	1485883a 	add	r2,r2,r18
    a49c:	11400017 	ldw	r5,0(r2)
    a4a0:	d9000117 	ldw	r4,4(sp)
    a4a4:	303ee83a 	callr	r6
    a4a8:	88800117 	ldw	r2,4(r17)
    a4ac:	a0bfc61e 	bne	r20,r2,a3c8 <__call_exitprocs+0x5c>
    a4b0:	b8800017 	ldw	r2,0(r23)
    a4b4:	147fd326 	beq	r2,r17,a404 <__call_exitprocs+0x98>
    a4b8:	003fc306 	br	a3c8 <__call_exitprocs+0x5c>
    a4bc:	303ee83a 	callr	r6
    a4c0:	003ff906 	br	a4a8 <__call_exitprocs+0x13c>
    a4c4:	8c000115 	stw	r16,4(r17)
    a4c8:	003fe706 	br	a468 <__call_exitprocs+0xfc>
    a4cc:	2105883a 	add	r2,r4,r4
    a4d0:	1485883a 	add	r2,r2,r18
    a4d4:	11000017 	ldw	r4,0(r2)
    a4d8:	303ee83a 	callr	r6
    a4dc:	003ff206 	br	a4a8 <__call_exitprocs+0x13c>
    a4e0:	88800117 	ldw	r2,4(r17)
    a4e4:	10000b1e 	bne	r2,zero,a514 <__call_exitprocs+0x1a8>
    a4e8:	89000017 	ldw	r4,0(r17)
    a4ec:	20000a26 	beq	r4,zero,a518 <__call_exitprocs+0x1ac>
    a4f0:	b9000015 	stw	r4,0(r23)
    a4f4:	90000226 	beq	r18,zero,a500 <__call_exitprocs+0x194>
    a4f8:	9009883a 	mov	r4,r18
    a4fc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a500:	8809883a 	mov	r4,r17
    a504:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a508:	bc400017 	ldw	r17,0(r23)
    a50c:	883fb11e 	bne	r17,zero,a3d4 <__call_exitprocs+0x68>
    a510:	003fc106 	br	a418 <__call_exitprocs+0xac>
    a514:	89000017 	ldw	r4,0(r17)
    a518:	882f883a 	mov	r23,r17
    a51c:	2023883a 	mov	r17,r4
    a520:	883fac1e 	bne	r17,zero,a3d4 <__call_exitprocs+0x68>
    a524:	003fbc06 	br	a418 <__call_exitprocs+0xac>

0000a528 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    a528:	defffd04 	addi	sp,sp,-12
    a52c:	df000215 	stw	fp,8(sp)
    a530:	df000204 	addi	fp,sp,8
    a534:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    a538:	e0bfff17 	ldw	r2,-4(fp)
    a53c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a540:	e0bffe17 	ldw	r2,-8(fp)
    a544:	1005003a 	cmpeq	r2,r2,zero
    a548:	1000021e 	bne	r2,zero,a554 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    a54c:	002af070 	cmpltui	zero,zero,43969
    a550:	00000106 	br	a558 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    a554:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    a558:	e037883a 	mov	sp,fp
    a55c:	df000017 	ldw	fp,0(sp)
    a560:	dec00104 	addi	sp,sp,4
    a564:	f800283a 	ret

0000a568 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a568:	defffd04 	addi	sp,sp,-12
    a56c:	dfc00215 	stw	ra,8(sp)
    a570:	df000115 	stw	fp,4(sp)
    a574:	df000104 	addi	fp,sp,4
    a578:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    a57c:	e13fff17 	ldw	r4,-4(fp)
    a580:	000a5280 	call	a528 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a584:	003fff06 	br	a584 <_exit+0x1c>
    a588:	0000a368 	cmpgeui	zero,zero,653
