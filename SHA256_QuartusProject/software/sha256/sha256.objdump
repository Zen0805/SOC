
sha256.elf:     file format elf32-littlenios2
sha256.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002740 memsz 0x00002740 flags r-x
    LOAD off    0x00003760 vaddr 0x0000a760 paddr 0x0000aa34 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00003d08 vaddr 0x0000ad08 paddr 0x0000ad08 align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00002488  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0000a4a8  0000a4a8  000034a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  0000a760  0000aa34  00003760  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  0000ad08  0000ad08  00003d08  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00003a34  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000004e8  00000000  00000000  00003a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000006fc  00000000  00000000  00003f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009d2e  00000000  00000000  00004644  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002414  00000000  00000000  0000e372  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000061fc  00000000  00000000  00010786  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000008c0  00000000  00000000  00016984  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000e16  00000000  00000000  00017244  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000018d0  00000000  00000000  0001805a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0001992c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00019940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001b2d3  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0001b2d6  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001b2e2  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0001b2e3  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  0001b2e4  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0001b2ef  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  0001b2fa  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  0001b305  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000023  00000000  00000000  0001b30b  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0002a922  00000000  00000000  0001b32e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
0000a4a8 l    d  .rodata	00000000 .rodata
0000a760 l    d  .rwdata	00000000 .rwdata
0000ad08 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
0000a674 l     O .rodata	00000040 input_block_abc.2252
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000850c l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a760 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008e64 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00009068 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00009264 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000a840 l     O .rwdata	0000002c jtag_uart_0
00009328 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
000096b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009734 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009814 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009958 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00009aa8 l     F .text	000000f8 alt_file_locked
00009d2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000a284 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000a444 l     F .text	00000040 alt_sim_halt
00008424 g     F .text	0000001c putchar
000090d4 g     F .text	0000006c alt_main
00008448 g     F .text	00000090 _puts_r
0000aa34 g       *ABS*	00000000 __flash_rwdata_start
0000838c g     F .text	00000054 printf
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ad08 g     O .bss	00000004 errno
0000ad10 g     O .bss	00000004 alt_argv
00012a14 g       *ABS*	00000000 _gp
0000a894 g     O .rwdata	00000180 alt_fd_list
00008440 g     F .text	00000008 _putchar_r
00009e24 g     F .text	00000094 alt_find_dev
00009a30 g     F .text	00000078 alt_io_redirect
0000a4a8 g       *ABS*	00000000 __DTOR_END__
000084d8 g     F .text	00000014 puts
00009410 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000083e0 g     F .text	00000044 _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008fa0 g     F .text	00000008 __udivsi3
0000aa2c g     O .rwdata	00000004 alt_max_fd
0000aa18 g     O .rwdata	00000004 _global_impure_ptr
0000ada4 g       *ABS*	00000000 __bss_end
0000a86c g     O .rwdata	00000028 alt_dev_null
00009718 g     F .text	0000001c alt_dcache_flush_all
0000aa34 g       *ABS*	00000000 __ram_rwdata_end
0000aa24 g     O .rwdata	00000008 alt_dev_list
00009140 g     F .text	00000124 write
00008d78 g     F .text	00000074 _putc_r
0000a760 g       *ABS*	00000000 __ram_rodata_end
00008fa8 g     F .text	00000008 __umodsi3
0000ada4 g       *ABS*	00000000 end
0000a4a4 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009514 g     F .text	000000a4 altera_avalon_jtag_uart_write
0000858c g     F .text	0000069c ___vfprintf_internal_r
0000a288 g     F .text	000001bc __call_exitprocs
00008020 g     F .text	0000003c _start
000092f8 g     F .text	00000030 alt_sys_init
0000a118 g     F .text	0000016c __register_exitproc
00008fb0 g     F .text	00000038 __mulsi3
0000a760 g       *ABS*	00000000 __ram_rwdata_start
0000a4a8 g       *ABS*	00000000 __ram_rodata_start
000080e0 g     F .text	00000234 calculate_sha256_hw
00009360 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00009fd8 g     F .text	000000d0 alt_get_fd
0000a0dc g     F .text	0000003c memcmp
0000ada4 g       *ABS*	00000000 __alt_stack_base
00009eb8 g     F .text	00000120 alt_find_file
00009760 g     F .text	000000b4 alt_dev_llist_insert
00008c4c g     F .text	000000bc __sfvwrite_small_dev
0000ad08 g       *ABS*	00000000 __bss_start
00008314 g     F .text	00000078 main
0000ad14 g     O .bss	00000004 alt_envp
000093b8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000ad18 g     O .bss	0000008c _atexit0
0000aa30 g     O .rwdata	00000004 alt_errno
00008d08 g     F .text	00000070 putc
00008ee0 g     F .text	00000060 __divsi3
0000a4a8 g       *ABS*	00000000 __CTOR_END__
0000a4a8 g       *ABS*	00000000 __flash_rodata_start
0000a4a8 g       *ABS*	00000000 __DTOR_LIST__
000092c4 g     F .text	00000034 alt_irq_init
00009d8c g     F .text	00000078 alt_release_fd
0000a0a8 g     F .text	00000014 atexit
00008dec g     F .text	00000078 _write_r
0000aa14 g     O .rwdata	00000004 _impure_ptr
0000ad0c g     O .bss	00000004 alt_argc
000098d8 g     F .text	00000064 _do_dtors
0000aa1c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000aa34 g       *ABS*	00000000 _edata
0000ada4 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009e04 g     F .text	00000020 altera_nios2_qsys_irq_init
0000a0bc g     F .text	00000020 exit
00008f40 g     F .text	00000060 __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000a484 g     F .text	00000020 _exit
000084ec g     F .text	00000020 strlen
00009ba0 g     F .text	0000018c open
0000993c g     F .text	0000001c alt_icache_flush_all
00008c28 g     F .text	00000024 __vfprintf_internal
0000805c g     F .text	00000084 print_sha256_hash
00009874 g     F .text	00000064 _do_ctors
000095b8 g     F .text	00000100 close
00008fe8 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d68a8514 	ori	gp,gp,10772
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10ab4214 	ori	r2,r2,44296

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18eb6914 	ori	r3,r3,44452

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008fe80 	call	8fe8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00090d40 	call	90d4 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <print_sha256_hash>:
#define SHA256_CONTROL_START_BIT     (1 << 0)

// Status Register Bits
#define SHA256_STATUS_DONE_BIT       (1 << 0)

void print_sha256_hash(uint32_t hash_result[8]) {
    805c:	defffc04 	addi	sp,sp,-16
    8060:	dfc00315 	stw	ra,12(sp)
    8064:	df000215 	stw	fp,8(sp)
    8068:	df000204 	addi	fp,sp,8
    806c:	e13fff15 	stw	r4,-4(fp)
    int i;
    printf("SHA-256 Hash: ");
    8070:	01000074 	movhi	r4,1
    8074:	21292a04 	addi	r4,r4,-23384
    8078:	000838c0 	call	838c <printf>
    for (i = 0; i < 8; i++) {
    807c:	e03ffe15 	stw	zero,-8(fp)
    8080:	00000d06 	br	80b8 <print_sha256_hash+0x5c>
        printf("%08lx", (unsigned long)hash_result[i]);
    8084:	e0bffe17 	ldw	r2,-8(fp)
    8088:	1085883a 	add	r2,r2,r2
    808c:	1085883a 	add	r2,r2,r2
    8090:	1007883a 	mov	r3,r2
    8094:	e0bfff17 	ldw	r2,-4(fp)
    8098:	1885883a 	add	r2,r3,r2
    809c:	11400017 	ldw	r5,0(r2)
    80a0:	01000074 	movhi	r4,1
    80a4:	21292e04 	addi	r4,r4,-23368
    80a8:	000838c0 	call	838c <printf>
#define SHA256_STATUS_DONE_BIT       (1 << 0)

void print_sha256_hash(uint32_t hash_result[8]) {
    int i;
    printf("SHA-256 Hash: ");
    for (i = 0; i < 8; i++) {
    80ac:	e0bffe17 	ldw	r2,-8(fp)
    80b0:	10800044 	addi	r2,r2,1
    80b4:	e0bffe15 	stw	r2,-8(fp)
    80b8:	e0bffe17 	ldw	r2,-8(fp)
    80bc:	10800210 	cmplti	r2,r2,8
    80c0:	103ff01e 	bne	r2,zero,8084 <print_sha256_hash+0x28>
        printf("%08lx", (unsigned long)hash_result[i]);
    }
    printf("\n");
    80c4:	01000284 	movi	r4,10
    80c8:	00084240 	call	8424 <putchar>
}
    80cc:	e037883a 	mov	sp,fp
    80d0:	dfc00117 	ldw	ra,4(sp)
    80d4:	df000017 	ldw	fp,0(sp)
    80d8:	dec00204 	addi	sp,sp,8
    80dc:	f800283a 	ret

000080e0 <calculate_sha256_hw>:

void calculate_sha256_hw(const uint32_t *data_block_ptr, uint32_t *hash_output_ptr) {
    80e0:	defff704 	addi	sp,sp,-36
    80e4:	dfc00815 	stw	ra,32(sp)
    80e8:	df000715 	stw	fp,28(sp)
    80ec:	df000704 	addi	fp,sp,28
    80f0:	e13ffe15 	stw	r4,-8(fp)
    80f4:	e17fff15 	stw	r5,-4(fp)

    int i;
    int poll_count;

    // 1. reset the control and the status reg
    printf("Reset SHA-256 IP\n");
    80f8:	01000074 	movhi	r4,1
    80fc:	21293004 	addi	r4,r4,-23360
    8100:	00084d80 	call	84d8 <puts>
    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000000);
    8104:	00800074 	movhi	r2,1
    8108:	10842004 	addi	r2,r2,4224
    810c:	10000035 	stwio	zero,0(r2)
    //reset control_reg => bit done cung reset

    // 2. read the status value
    status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
    8110:	00800074 	movhi	r2,1
    8114:	10842204 	addi	r2,r2,4232
    8118:	10800037 	ldwio	r2,0(r2)
    811c:	e0bffd15 	stw	r2,-12(fp)
    //doc thanh ghi status
    printf("status_reg: 0x%08lx\n", (unsigned long)status);
    8120:	01000074 	movhi	r4,1
    8124:	21293504 	addi	r4,r4,-23340
    8128:	e17ffd17 	ldw	r5,-12(fp)
    812c:	000838c0 	call	838c <printf>

    // 3. init the control reg and print out its value
    printf("Ghi bit START vao control_reg...\n");
    8130:	01000074 	movhi	r4,1
    8134:	21293b04 	addi	r4,r4,-23316
    8138:	00084d80 	call	84d8 <puts>
    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, SHA256_CONTROL_START_BIT);
    813c:	00c00074 	movhi	r3,1
    8140:	18c42004 	addi	r3,r3,4224
    8144:	00800044 	movi	r2,1
    8148:	18800035 	stwio	r2,0(r3)


    control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);
    814c:	00800074 	movhi	r2,1
    8150:	10842004 	addi	r2,r2,4224
    8154:	10800037 	ldwio	r2,0(r2)
    8158:	e0bffc15 	stw	r2,-16(fp)
    printf("control_reg: 0x%08lx\n", (unsigned long)control);
    815c:	01000074 	movhi	r4,1
    8160:	21294404 	addi	r4,r4,-23280
    8164:	e17ffc17 	ldw	r5,-16(fp)
    8168:	000838c0 	call	838c <printf>

    // 4. write the 16 words
    printf("Ghi 16 word vao IP:\n");
    816c:	01000074 	movhi	r4,1
    8170:	21294a04 	addi	r4,r4,-23256
    8174:	00084d80 	call	84d8 <puts>
    for (i = 0; i < 16; i++) {
    8178:	e03ffa15 	stw	zero,-24(fp)
    817c:	00000e06 	br	81b8 <calculate_sha256_hw+0xd8>
        IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_DATA_IN_REG_OFFSET, data_block_ptr[i]);
    8180:	e0bffa17 	ldw	r2,-24(fp)
    8184:	1085883a 	add	r2,r2,r2
    8188:	1085883a 	add	r2,r2,r2
    818c:	1007883a 	mov	r3,r2
    8190:	e0bffe17 	ldw	r2,-8(fp)
    8194:	1885883a 	add	r2,r3,r2
    8198:	10800017 	ldw	r2,0(r2)
    819c:	1007883a 	mov	r3,r2
    81a0:	00800074 	movhi	r2,1
    81a4:	10842104 	addi	r2,r2,4228
    81a8:	10c00035 	stwio	r3,0(r2)
    control = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET);
    printf("control_reg: 0x%08lx\n", (unsigned long)control);

    // 4. write the 16 words
    printf("Ghi 16 word vao IP:\n");
    for (i = 0; i < 16; i++) {
    81ac:	e0bffa17 	ldw	r2,-24(fp)
    81b0:	10800044 	addi	r2,r2,1
    81b4:	e0bffa15 	stw	r2,-24(fp)
    81b8:	e0bffa17 	ldw	r2,-24(fp)
    81bc:	10800410 	cmplti	r2,r2,16
    81c0:	103fef1e 	bne	r2,zero,8180 <calculate_sha256_hw+0xa0>
        IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_DATA_IN_REG_OFFSET, data_block_ptr[i]);
    }
    printf("Ghi xong.\n");
    81c4:	01000074 	movhi	r4,1
    81c8:	21294f04 	addi	r4,r4,-23236
    81cc:	00084d80 	call	84d8 <puts>
    //    If IP_wrapper.v is updated to allow reading data_in_reg at address 0x01,
    //    this will read the LAST WRITTEN WORD 16 times.
    //    If IP_wrapper.v is NOT updated, this will read an undefined/default value (likely 0).

    // 6. pool for done
    status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
    81d0:	00800074 	movhi	r2,1
    81d4:	10842204 	addi	r2,r2,4232
    81d8:	10800037 	ldwio	r2,0(r2)
    81dc:	e0bffd15 	stw	r2,-12(fp)
    printf("Status khi truyen xong: %d\n", status);
    81e0:	01000074 	movhi	r4,1
    81e4:	21295204 	addi	r4,r4,-23224
    81e8:	e17ffd17 	ldw	r5,-12(fp)
    81ec:	000838c0 	call	838c <printf>

    printf("Polling ket qua.\n"); // Your comment
    81f0:	01000074 	movhi	r4,1
    81f4:	21295904 	addi	r4,r4,-23196
    81f8:	00084d80 	call	84d8 <puts>
    poll_count = 0;
    81fc:	e03ff915 	stw	zero,-28(fp)
    do {
        status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
    8200:	00800074 	movhi	r2,1
    8204:	10842204 	addi	r2,r2,4232
    8208:	10800037 	ldwio	r2,0(r2)
    820c:	e0bffd15 	stw	r2,-12(fp)
        printf("Status trong khi poll: %d\n", status);
    8210:	01000074 	movhi	r4,1
    8214:	21295e04 	addi	r4,r4,-23176
    8218:	e17ffd17 	ldw	r5,-12(fp)
    821c:	000838c0 	call	838c <printf>
        poll_count++;
    8220:	e0bff917 	ldw	r2,-28(fp)
    8224:	10800044 	addi	r2,r2,1
    8228:	e0bff915 	stw	r2,-28(fp)
    } while (!(status & SHA256_STATUS_DONE_BIT));
    822c:	e0bffd17 	ldw	r2,-12(fp)
    8230:	1080004c 	andi	r2,r2,1
    8234:	1005003a 	cmpeq	r2,r2,zero
    8238:	103ff11e 	bne	r2,zero,8200 <calculate_sha256_hw+0x120>
    printf("Hashing complete! (DONE bit set after %d polls). Status: 0x%08lx\n", poll_count, (unsigned long)status); // Your print
    823c:	01000074 	movhi	r4,1
    8240:	21296504 	addi	r4,r4,-23148
    8244:	e17ff917 	ldw	r5,-28(fp)
    8248:	e1bffd17 	ldw	r6,-12(fp)
    824c:	000838c0 	call	838c <printf>
    printf("Poll count: %d\n", poll_count);
    8250:	01000074 	movhi	r4,1
    8254:	21297604 	addi	r4,r4,-23080
    8258:	e17ff917 	ldw	r5,-28(fp)
    825c:	000838c0 	call	838c <printf>


    // 7. read the hash output
    printf("Reading hash result:\n"); // Your comment
    8260:	01000074 	movhi	r4,1
    8264:	21297a04 	addi	r4,r4,-23064
    8268:	00084d80 	call	84d8 <puts>
    for (i = 0; i < 8; i++) {
    826c:	e03ffa15 	stw	zero,-24(fp)
    8270:	00001206 	br	82bc <calculate_sha256_hw+0x1dc>
        hash_output_ptr[i] = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_HASH_OUT_0_OFFSET + (i * 4));
    8274:	e0bffa17 	ldw	r2,-24(fp)
    8278:	1085883a 	add	r2,r2,r2
    827c:	1085883a 	add	r2,r2,r2
    8280:	1007883a 	mov	r3,r2
    8284:	e0bfff17 	ldw	r2,-4(fp)
    8288:	1889883a 	add	r4,r3,r2
    828c:	e0bffa17 	ldw	r2,-24(fp)
    8290:	1085883a 	add	r2,r2,r2
    8294:	1085883a 	add	r2,r2,r2
    8298:	1007883a 	mov	r3,r2
    829c:	00800074 	movhi	r2,1
    82a0:	10842304 	addi	r2,r2,4236
    82a4:	1885883a 	add	r2,r3,r2
    82a8:	10800037 	ldwio	r2,0(r2)
    82ac:	20800015 	stw	r2,0(r4)
    printf("Poll count: %d\n", poll_count);


    // 7. read the hash output
    printf("Reading hash result:\n"); // Your comment
    for (i = 0; i < 8; i++) {
    82b0:	e0bffa17 	ldw	r2,-24(fp)
    82b4:	10800044 	addi	r2,r2,1
    82b8:	e0bffa15 	stw	r2,-24(fp)
    82bc:	e0bffa17 	ldw	r2,-24(fp)
    82c0:	10800210 	cmplti	r2,r2,8
    82c4:	103feb1e 	bne	r2,zero,8274 <calculate_sha256_hw+0x194>
        hash_output_ptr[i] = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_HASH_OUT_0_OFFSET + (i * 4));
    }

    // 8. clear start
    printf("Clearing START bit in control register (also clears DONE status)...\n"); // Your comment
    82c8:	01000074 	movhi	r4,1
    82cc:	21298004 	addi	r4,r4,-23040
    82d0:	00084d80 	call	84d8 <puts>
    IOWR_32DIRECT(SHA_256_IP_0_BASE, SHA256_CONTROL_REG_OFFSET, 0x00000000);
    82d4:	00800074 	movhi	r2,1
    82d8:	10842004 	addi	r2,r2,4224
    82dc:	10000035 	stwio	zero,0(r2)
    status = IORD_32DIRECT(SHA_256_IP_0_BASE, SHA256_STATUS_REG_OFFSET);
    82e0:	00800074 	movhi	r2,1
    82e4:	10842204 	addi	r2,r2,4232
    82e8:	10800037 	ldwio	r2,0(r2)
    82ec:	e0bffd15 	stw	r2,-12(fp)
    printf("Final Status: 0x%08lx (DONE bit should be 0)\n", (unsigned long)status); // Your print
    82f0:	01000074 	movhi	r4,1
    82f4:	21299104 	addi	r4,r4,-22972
    82f8:	e17ffd17 	ldw	r5,-12(fp)
    82fc:	000838c0 	call	838c <printf>
}
    8300:	e037883a 	mov	sp,fp
    8304:	dfc00117 	ldw	ra,4(sp)
    8308:	df000017 	ldw	fp,0(sp)
    830c:	dec00204 	addi	sp,sp,8
    8310:	f800283a 	ret

00008314 <main>:

int main() {
    8314:	defff604 	addi	sp,sp,-40
    8318:	dfc00915 	stw	ra,36(sp)
    831c:	df000815 	stw	fp,32(sp)
    8320:	df000804 	addi	fp,sp,32
        0x00000018, 0x00000019, 0x0000001A, 0x0000001B,
        0x0000001C, 0x0000001D, 0x0000001E, 0x0000001F
    };
    uint32_t calculated_hash[8];

    printf("Nios II SHA-256 Test\n");
    8324:	01000074 	movhi	r4,1
    8328:	2129ad04 	addi	r4,r4,-22860
    832c:	00084d80 	call	84d8 <puts>
    printf("IP Base Address: 0x%08lx\n", (unsigned long)SHA_256_IP_0_BASE);
    8330:	01000074 	movhi	r4,1
    8334:	2129b304 	addi	r4,r4,-22836
    8338:	01400074 	movhi	r5,1
    833c:	29442004 	addi	r5,r5,4224
    8340:	000838c0 	call	838c <printf>

    printf("\n--- Test 1: Hashing 00000010++  ---\n");
    8344:	01000074 	movhi	r4,1
    8348:	2129ba04 	addi	r4,r4,-22808
    834c:	00084d80 	call	84d8 <puts>
    calculate_sha256_hw(input_block_abc, calculated_hash);
    8350:	01000074 	movhi	r4,1
    8354:	21299d04 	addi	r4,r4,-22924
    8358:	e17ff804 	addi	r5,fp,-32
    835c:	00080e00 	call	80e0 <calculate_sha256_hw>
    print_sha256_hash(calculated_hash);
    8360:	e13ff804 	addi	r4,fp,-32
    8364:	000805c0 	call	805c <print_sha256_hash>

    printf("\nAll tests complete.\n");
    8368:	01000074 	movhi	r4,1
    836c:	2129c404 	addi	r4,r4,-22768
    8370:	00084d80 	call	84d8 <puts>
    return 0;
    8374:	0005883a 	mov	r2,zero
}
    8378:	e037883a 	mov	sp,fp
    837c:	dfc00117 	ldw	ra,4(sp)
    8380:	df000017 	ldw	fp,0(sp)
    8384:	dec00204 	addi	sp,sp,8
    8388:	f800283a 	ret

0000838c <printf>:
    838c:	defffb04 	addi	sp,sp,-20
    8390:	dfc00115 	stw	ra,4(sp)
    8394:	d9400215 	stw	r5,8(sp)
    8398:	d9800315 	stw	r6,12(sp)
    839c:	d9c00415 	stw	r7,16(sp)
    83a0:	00800074 	movhi	r2,1
    83a4:	10aa8504 	addi	r2,r2,-21996
    83a8:	11400017 	ldw	r5,0(r2)
    83ac:	d8800204 	addi	r2,sp,8
    83b0:	d8800015 	stw	r2,0(sp)
    83b4:	29c00217 	ldw	r7,8(r5)
    83b8:	100d883a 	mov	r6,r2
    83bc:	00800074 	movhi	r2,1
    83c0:	10a31304 	addi	r2,r2,-29620
    83c4:	200b883a 	mov	r5,r4
    83c8:	38800115 	stw	r2,4(r7)
    83cc:	3809883a 	mov	r4,r7
    83d0:	0008c280 	call	8c28 <__vfprintf_internal>
    83d4:	dfc00117 	ldw	ra,4(sp)
    83d8:	dec00504 	addi	sp,sp,20
    83dc:	f800283a 	ret

000083e0 <_printf_r>:
    83e0:	defffc04 	addi	sp,sp,-16
    83e4:	dfc00115 	stw	ra,4(sp)
    83e8:	d9800215 	stw	r6,8(sp)
    83ec:	d9c00315 	stw	r7,12(sp)
    83f0:	22000217 	ldw	r8,8(r4)
    83f4:	d8800204 	addi	r2,sp,8
    83f8:	d8800015 	stw	r2,0(sp)
    83fc:	100f883a 	mov	r7,r2
    8400:	00800074 	movhi	r2,1
    8404:	10a31304 	addi	r2,r2,-29620
    8408:	280d883a 	mov	r6,r5
    840c:	40800115 	stw	r2,4(r8)
    8410:	400b883a 	mov	r5,r8
    8414:	000858c0 	call	858c <___vfprintf_internal_r>
    8418:	dfc00117 	ldw	ra,4(sp)
    841c:	dec00404 	addi	sp,sp,16
    8420:	f800283a 	ret

00008424 <putchar>:
    8424:	00800074 	movhi	r2,1
    8428:	10aa8504 	addi	r2,r2,-21996
    842c:	11800017 	ldw	r6,0(r2)
    8430:	200b883a 	mov	r5,r4
    8434:	3009883a 	mov	r4,r6
    8438:	31800217 	ldw	r6,8(r6)
    843c:	0008d781 	jmpi	8d78 <_putc_r>

00008440 <_putchar_r>:
    8440:	21800217 	ldw	r6,8(r4)
    8444:	0008d781 	jmpi	8d78 <_putc_r>

00008448 <_puts_r>:
    8448:	defffd04 	addi	sp,sp,-12
    844c:	dc000015 	stw	r16,0(sp)
    8450:	2021883a 	mov	r16,r4
    8454:	2809883a 	mov	r4,r5
    8458:	dfc00215 	stw	ra,8(sp)
    845c:	dc400115 	stw	r17,4(sp)
    8460:	2823883a 	mov	r17,r5
    8464:	00084ec0 	call	84ec <strlen>
    8468:	80c00217 	ldw	r3,8(r16)
    846c:	02000074 	movhi	r8,1
    8470:	42231304 	addi	r8,r8,-29620
    8474:	880d883a 	mov	r6,r17
    8478:	100f883a 	mov	r7,r2
    847c:	8009883a 	mov	r4,r16
    8480:	180b883a 	mov	r5,r3
    8484:	1a000115 	stw	r8,4(r3)
    8488:	403ee83a 	callr	r8
    848c:	047fffc4 	movi	r17,-1
    8490:	8009883a 	mov	r4,r16
    8494:	01800074 	movhi	r6,1
    8498:	31a9ca04 	addi	r6,r6,-22744
    849c:	01c00044 	movi	r7,1
    84a0:	1440071e 	bne	r2,r17,84c0 <_puts_r+0x78>
    84a4:	00ffffc4 	movi	r3,-1
    84a8:	1805883a 	mov	r2,r3
    84ac:	dfc00217 	ldw	ra,8(sp)
    84b0:	dc400117 	ldw	r17,4(sp)
    84b4:	dc000017 	ldw	r16,0(sp)
    84b8:	dec00304 	addi	sp,sp,12
    84bc:	f800283a 	ret
    84c0:	81400217 	ldw	r5,8(r16)
    84c4:	28c00117 	ldw	r3,4(r5)
    84c8:	183ee83a 	callr	r3
    84cc:	0007883a 	mov	r3,zero
    84d0:	147ff51e 	bne	r2,r17,84a8 <_puts_r+0x60>
    84d4:	003ff306 	br	84a4 <_puts_r+0x5c>

000084d8 <puts>:
    84d8:	00800074 	movhi	r2,1
    84dc:	10aa8504 	addi	r2,r2,-21996
    84e0:	200b883a 	mov	r5,r4
    84e4:	11000017 	ldw	r4,0(r2)
    84e8:	00084481 	jmpi	8448 <_puts_r>

000084ec <strlen>:
    84ec:	20800007 	ldb	r2,0(r4)
    84f0:	10000526 	beq	r2,zero,8508 <strlen+0x1c>
    84f4:	2007883a 	mov	r3,r4
    84f8:	18c00044 	addi	r3,r3,1
    84fc:	18800007 	ldb	r2,0(r3)
    8500:	103ffd1e 	bne	r2,zero,84f8 <strlen+0xc>
    8504:	1905c83a 	sub	r2,r3,r4
    8508:	f800283a 	ret

0000850c <print_repeat>:
    850c:	defffb04 	addi	sp,sp,-20
    8510:	dc800315 	stw	r18,12(sp)
    8514:	dc400215 	stw	r17,8(sp)
    8518:	dc000115 	stw	r16,4(sp)
    851c:	dfc00415 	stw	ra,16(sp)
    8520:	2025883a 	mov	r18,r4
    8524:	2823883a 	mov	r17,r5
    8528:	3821883a 	mov	r16,r7
    852c:	d9800005 	stb	r6,0(sp)
    8530:	9009883a 	mov	r4,r18
    8534:	880b883a 	mov	r5,r17
    8538:	d80d883a 	mov	r6,sp
    853c:	01c00044 	movi	r7,1
    8540:	04000b0e 	bge	zero,r16,8570 <print_repeat+0x64>
    8544:	88c00117 	ldw	r3,4(r17)
    8548:	843fffc4 	addi	r16,r16,-1
    854c:	183ee83a 	callr	r3
    8550:	103ff726 	beq	r2,zero,8530 <print_repeat+0x24>
    8554:	00bfffc4 	movi	r2,-1
    8558:	dfc00417 	ldw	ra,16(sp)
    855c:	dc800317 	ldw	r18,12(sp)
    8560:	dc400217 	ldw	r17,8(sp)
    8564:	dc000117 	ldw	r16,4(sp)
    8568:	dec00504 	addi	sp,sp,20
    856c:	f800283a 	ret
    8570:	0005883a 	mov	r2,zero
    8574:	dfc00417 	ldw	ra,16(sp)
    8578:	dc800317 	ldw	r18,12(sp)
    857c:	dc400217 	ldw	r17,8(sp)
    8580:	dc000117 	ldw	r16,4(sp)
    8584:	dec00504 	addi	sp,sp,20
    8588:	f800283a 	ret

0000858c <___vfprintf_internal_r>:
    858c:	deffe304 	addi	sp,sp,-116
    8590:	df001b15 	stw	fp,108(sp)
    8594:	ddc01a15 	stw	r23,104(sp)
    8598:	dd001715 	stw	r20,92(sp)
    859c:	dc801515 	stw	r18,84(sp)
    85a0:	dc001315 	stw	r16,76(sp)
    85a4:	dfc01c15 	stw	ra,112(sp)
    85a8:	dd801915 	stw	r22,100(sp)
    85ac:	dd401815 	stw	r21,96(sp)
    85b0:	dcc01615 	stw	r19,88(sp)
    85b4:	dc401415 	stw	r17,80(sp)
    85b8:	d9001015 	stw	r4,64(sp)
    85bc:	2829883a 	mov	r20,r5
    85c0:	d9c01115 	stw	r7,68(sp)
    85c4:	3025883a 	mov	r18,r6
    85c8:	0021883a 	mov	r16,zero
    85cc:	d8000f15 	stw	zero,60(sp)
    85d0:	d8000e15 	stw	zero,56(sp)
    85d4:	0039883a 	mov	fp,zero
    85d8:	d8000915 	stw	zero,36(sp)
    85dc:	d8000d15 	stw	zero,52(sp)
    85e0:	d8000c15 	stw	zero,48(sp)
    85e4:	d8000b15 	stw	zero,44(sp)
    85e8:	002f883a 	mov	r23,zero
    85ec:	91400003 	ldbu	r5,0(r18)
    85f0:	01c00044 	movi	r7,1
    85f4:	94800044 	addi	r18,r18,1
    85f8:	29003fcc 	andi	r4,r5,255
    85fc:	2100201c 	xori	r4,r4,128
    8600:	213fe004 	addi	r4,r4,-128
    8604:	20001526 	beq	r4,zero,865c <___vfprintf_internal_r+0xd0>
    8608:	81c03526 	beq	r16,r7,86e0 <___vfprintf_internal_r+0x154>
    860c:	3c002016 	blt	r7,r16,8690 <___vfprintf_internal_r+0x104>
    8610:	803ff61e 	bne	r16,zero,85ec <___vfprintf_internal_r+0x60>
    8614:	00800944 	movi	r2,37
    8618:	2081501e 	bne	r4,r2,8b5c <___vfprintf_internal_r+0x5d0>
    861c:	073fffc4 	movi	fp,-1
    8620:	00800284 	movi	r2,10
    8624:	d9c00c15 	stw	r7,48(sp)
    8628:	d8000f15 	stw	zero,60(sp)
    862c:	d8000e15 	stw	zero,56(sp)
    8630:	df000915 	stw	fp,36(sp)
    8634:	d8800d15 	stw	r2,52(sp)
    8638:	d8000b15 	stw	zero,44(sp)
    863c:	91400003 	ldbu	r5,0(r18)
    8640:	3821883a 	mov	r16,r7
    8644:	94800044 	addi	r18,r18,1
    8648:	29003fcc 	andi	r4,r5,255
    864c:	2100201c 	xori	r4,r4,128
    8650:	213fe004 	addi	r4,r4,-128
    8654:	01c00044 	movi	r7,1
    8658:	203feb1e 	bne	r4,zero,8608 <___vfprintf_internal_r+0x7c>
    865c:	b805883a 	mov	r2,r23
    8660:	dfc01c17 	ldw	ra,112(sp)
    8664:	df001b17 	ldw	fp,108(sp)
    8668:	ddc01a17 	ldw	r23,104(sp)
    866c:	dd801917 	ldw	r22,100(sp)
    8670:	dd401817 	ldw	r21,96(sp)
    8674:	dd001717 	ldw	r20,92(sp)
    8678:	dcc01617 	ldw	r19,88(sp)
    867c:	dc801517 	ldw	r18,84(sp)
    8680:	dc401417 	ldw	r17,80(sp)
    8684:	dc001317 	ldw	r16,76(sp)
    8688:	dec01d04 	addi	sp,sp,116
    868c:	f800283a 	ret
    8690:	00800084 	movi	r2,2
    8694:	80801726 	beq	r16,r2,86f4 <___vfprintf_internal_r+0x168>
    8698:	008000c4 	movi	r2,3
    869c:	80bfd31e 	bne	r16,r2,85ec <___vfprintf_internal_r+0x60>
    86a0:	2c7ff404 	addi	r17,r5,-48
    86a4:	88c03fcc 	andi	r3,r17,255
    86a8:	00800244 	movi	r2,9
    86ac:	10c02136 	bltu	r2,r3,8734 <___vfprintf_internal_r+0x1a8>
    86b0:	d8c00917 	ldw	r3,36(sp)
    86b4:	18012716 	blt	r3,zero,8b54 <___vfprintf_internal_r+0x5c8>
    86b8:	d9000917 	ldw	r4,36(sp)
    86bc:	01400284 	movi	r5,10
    86c0:	0008fb00 	call	8fb0 <__mulsi3>
    86c4:	1007883a 	mov	r3,r2
    86c8:	88803fcc 	andi	r2,r17,255
    86cc:	1080201c 	xori	r2,r2,128
    86d0:	10bfe004 	addi	r2,r2,-128
    86d4:	1887883a 	add	r3,r3,r2
    86d8:	d8c00915 	stw	r3,36(sp)
    86dc:	003fc306 	br	85ec <___vfprintf_internal_r+0x60>
    86e0:	00800c04 	movi	r2,48
    86e4:	2080b326 	beq	r4,r2,89b4 <___vfprintf_internal_r+0x428>
    86e8:	00800944 	movi	r2,37
    86ec:	20812726 	beq	r4,r2,8b8c <___vfprintf_internal_r+0x600>
    86f0:	04000084 	movi	r16,2
    86f4:	2c7ff404 	addi	r17,r5,-48
    86f8:	88c03fcc 	andi	r3,r17,255
    86fc:	00800244 	movi	r2,9
    8700:	10c00a36 	bltu	r2,r3,872c <___vfprintf_internal_r+0x1a0>
    8704:	e000b416 	blt	fp,zero,89d8 <___vfprintf_internal_r+0x44c>
    8708:	e009883a 	mov	r4,fp
    870c:	01400284 	movi	r5,10
    8710:	0008fb00 	call	8fb0 <__mulsi3>
    8714:	1007883a 	mov	r3,r2
    8718:	88803fcc 	andi	r2,r17,255
    871c:	1080201c 	xori	r2,r2,128
    8720:	10bfe004 	addi	r2,r2,-128
    8724:	18b9883a 	add	fp,r3,r2
    8728:	003fb006 	br	85ec <___vfprintf_internal_r+0x60>
    872c:	00800b84 	movi	r2,46
    8730:	2080a326 	beq	r4,r2,89c0 <___vfprintf_internal_r+0x434>
    8734:	00801b04 	movi	r2,108
    8738:	2080a326 	beq	r4,r2,89c8 <___vfprintf_internal_r+0x43c>
    873c:	d8c00917 	ldw	r3,36(sp)
    8740:	1800a716 	blt	r3,zero,89e0 <___vfprintf_internal_r+0x454>
    8744:	d8000f15 	stw	zero,60(sp)
    8748:	28bfea04 	addi	r2,r5,-88
    874c:	10803fcc 	andi	r2,r2,255
    8750:	00c00804 	movi	r3,32
    8754:	18802836 	bltu	r3,r2,87f8 <___vfprintf_internal_r+0x26c>
    8758:	1085883a 	add	r2,r2,r2
    875c:	1085883a 	add	r2,r2,r2
    8760:	00c00074 	movhi	r3,1
    8764:	18e1dd04 	addi	r3,r3,-30860
    8768:	10c5883a 	add	r2,r2,r3
    876c:	11000017 	ldw	r4,0(r2)
    8770:	2000683a 	jmp	r4
    8774:	00008800 	call	880 <__alt_mem_onchip_memory2_0-0x7780>
    8778:	000087f8 	rdprs	zero,zero,543
    877c:	000087f8 	rdprs	zero,zero,543
    8780:	000087f8 	rdprs	zero,zero,543
    8784:	000087f8 	rdprs	zero,zero,543
    8788:	000087f8 	rdprs	zero,zero,543
    878c:	000087f8 	rdprs	zero,zero,543
    8790:	000087f8 	rdprs	zero,zero,543
    8794:	000087f8 	rdprs	zero,zero,543
    8798:	000087f8 	rdprs	zero,zero,543
    879c:	000087f8 	rdprs	zero,zero,543
    87a0:	00008a2c 	andhi	zero,zero,552
    87a4:	00008814 	movui	zero,544
    87a8:	000087f8 	rdprs	zero,zero,543
    87ac:	000087f8 	rdprs	zero,zero,543
    87b0:	000087f8 	rdprs	zero,zero,543
    87b4:	000087f8 	rdprs	zero,zero,543
    87b8:	00008814 	movui	zero,544
    87bc:	000087f8 	rdprs	zero,zero,543
    87c0:	000087f8 	rdprs	zero,zero,543
    87c4:	000087f8 	rdprs	zero,zero,543
    87c8:	000087f8 	rdprs	zero,zero,543
    87cc:	000087f8 	rdprs	zero,zero,543
    87d0:	00008a94 	movui	zero,554
    87d4:	000087f8 	rdprs	zero,zero,543
    87d8:	000087f8 	rdprs	zero,zero,543
    87dc:	000087f8 	rdprs	zero,zero,543
    87e0:	00008aa4 	muli	zero,zero,554
    87e4:	000087f8 	rdprs	zero,zero,543
    87e8:	00008978 	rdprs	zero,zero,549
    87ec:	000087f8 	rdprs	zero,zero,543
    87f0:	000087f8 	rdprs	zero,zero,543
    87f4:	00008970 	cmpltui	zero,zero,549
    87f8:	0021883a 	mov	r16,zero
    87fc:	003f7b06 	br	85ec <___vfprintf_internal_r+0x60>
    8800:	00c00404 	movi	r3,16
    8804:	00800044 	movi	r2,1
    8808:	d8c00d15 	stw	r3,52(sp)
    880c:	d8000c15 	stw	zero,48(sp)
    8810:	d8800b15 	stw	r2,44(sp)
    8814:	d8c00e17 	ldw	r3,56(sp)
    8818:	1805003a 	cmpeq	r2,r3,zero
    881c:	10005a1e 	bne	r2,zero,8988 <___vfprintf_internal_r+0x3fc>
    8820:	d8800c17 	ldw	r2,48(sp)
    8824:	1000781e 	bne	r2,zero,8a08 <___vfprintf_internal_r+0x47c>
    8828:	d8801117 	ldw	r2,68(sp)
    882c:	d8000a15 	stw	zero,40(sp)
    8830:	14400017 	ldw	r17,0(r2)
    8834:	11c00104 	addi	r7,r2,4
    8838:	d9c01115 	stw	r7,68(sp)
    883c:	88005a26 	beq	r17,zero,89a8 <___vfprintf_internal_r+0x41c>
    8840:	d8c00b17 	ldw	r3,44(sp)
    8844:	dcc00044 	addi	r19,sp,1
    8848:	05800244 	movi	r22,9
    884c:	182b003a 	cmpeq	r21,r3,zero
    8850:	dcc01215 	stw	r19,72(sp)
    8854:	00000506 	br	886c <___vfprintf_internal_r+0x2e0>
    8858:	21000c04 	addi	r4,r4,48
    885c:	99000005 	stb	r4,0(r19)
    8860:	9cc00044 	addi	r19,r19,1
    8864:	80000f26 	beq	r16,zero,88a4 <___vfprintf_internal_r+0x318>
    8868:	8023883a 	mov	r17,r16
    886c:	d9400d17 	ldw	r5,52(sp)
    8870:	8809883a 	mov	r4,r17
    8874:	0008fa00 	call	8fa0 <__udivsi3>
    8878:	d9000d17 	ldw	r4,52(sp)
    887c:	100b883a 	mov	r5,r2
    8880:	1021883a 	mov	r16,r2
    8884:	0008fb00 	call	8fb0 <__mulsi3>
    8888:	8889c83a 	sub	r4,r17,r2
    888c:	b13ff20e 	bge	r22,r4,8858 <___vfprintf_internal_r+0x2cc>
    8890:	a8009f1e 	bne	r21,zero,8b10 <___vfprintf_internal_r+0x584>
    8894:	21000dc4 	addi	r4,r4,55
    8898:	99000005 	stb	r4,0(r19)
    889c:	9cc00044 	addi	r19,r19,1
    88a0:	803ff11e 	bne	r16,zero,8868 <___vfprintf_internal_r+0x2dc>
    88a4:	d8801217 	ldw	r2,72(sp)
    88a8:	98a3c83a 	sub	r17,r19,r2
    88ac:	d8c00917 	ldw	r3,36(sp)
    88b0:	1c4bc83a 	sub	r5,r3,r17
    88b4:	0140130e 	bge	zero,r5,8904 <___vfprintf_internal_r+0x378>
    88b8:	d8c00044 	addi	r3,sp,1
    88bc:	18800804 	addi	r2,r3,32
    88c0:	9880102e 	bgeu	r19,r2,8904 <___vfprintf_internal_r+0x378>
    88c4:	00800c04 	movi	r2,48
    88c8:	28ffffc4 	addi	r3,r5,-1
    88cc:	98800005 	stb	r2,0(r19)
    88d0:	99000044 	addi	r4,r19,1
    88d4:	00c0080e 	bge	zero,r3,88f8 <___vfprintf_internal_r+0x36c>
    88d8:	d8c00044 	addi	r3,sp,1
    88dc:	18800804 	addi	r2,r3,32
    88e0:	2080052e 	bgeu	r4,r2,88f8 <___vfprintf_internal_r+0x36c>
    88e4:	00800c04 	movi	r2,48
    88e8:	20800005 	stb	r2,0(r4)
    88ec:	21000044 	addi	r4,r4,1
    88f0:	9945883a 	add	r2,r19,r5
    88f4:	20bff81e 	bne	r4,r2,88d8 <___vfprintf_internal_r+0x34c>
    88f8:	d8801217 	ldw	r2,72(sp)
    88fc:	2027883a 	mov	r19,r4
    8900:	20a3c83a 	sub	r17,r4,r2
    8904:	d8c00a17 	ldw	r3,40(sp)
    8908:	1c45883a 	add	r2,r3,r17
    890c:	e0a1c83a 	sub	r16,fp,r2
    8910:	d8800f17 	ldw	r2,60(sp)
    8914:	10008026 	beq	r2,zero,8b18 <___vfprintf_internal_r+0x58c>
    8918:	1805003a 	cmpeq	r2,r3,zero
    891c:	1000ae26 	beq	r2,zero,8bd8 <___vfprintf_internal_r+0x64c>
    8920:	0400a516 	blt	zero,r16,8bb8 <___vfprintf_internal_r+0x62c>
    8924:	b805883a 	mov	r2,r23
    8928:	0440950e 	bge	zero,r17,8b80 <___vfprintf_internal_r+0x5f4>
    892c:	102f883a 	mov	r23,r2
    8930:	1461883a 	add	r16,r2,r17
    8934:	00000206 	br	8940 <___vfprintf_internal_r+0x3b4>
    8938:	bdc00044 	addi	r23,r23,1
    893c:	85ffae26 	beq	r16,r23,87f8 <___vfprintf_internal_r+0x26c>
    8940:	9cffffc4 	addi	r19,r19,-1
    8944:	98800003 	ldbu	r2,0(r19)
    8948:	a0c00117 	ldw	r3,4(r20)
    894c:	d9001017 	ldw	r4,64(sp)
    8950:	d8800005 	stb	r2,0(sp)
    8954:	a00b883a 	mov	r5,r20
    8958:	d80d883a 	mov	r6,sp
    895c:	01c00044 	movi	r7,1
    8960:	183ee83a 	callr	r3
    8964:	103ff426 	beq	r2,zero,8938 <___vfprintf_internal_r+0x3ac>
    8968:	05ffffc4 	movi	r23,-1
    896c:	003f3b06 	br	865c <___vfprintf_internal_r+0xd0>
    8970:	00c00404 	movi	r3,16
    8974:	d8c00d15 	stw	r3,52(sp)
    8978:	d8000c15 	stw	zero,48(sp)
    897c:	d8c00e17 	ldw	r3,56(sp)
    8980:	1805003a 	cmpeq	r2,r3,zero
    8984:	103fa626 	beq	r2,zero,8820 <___vfprintf_internal_r+0x294>
    8988:	d8c00c17 	ldw	r3,48(sp)
    898c:	1800171e 	bne	r3,zero,89ec <___vfprintf_internal_r+0x460>
    8990:	d8c01117 	ldw	r3,68(sp)
    8994:	d8000a15 	stw	zero,40(sp)
    8998:	1c400017 	ldw	r17,0(r3)
    899c:	19c00104 	addi	r7,r3,4
    89a0:	d9c01115 	stw	r7,68(sp)
    89a4:	883fa61e 	bne	r17,zero,8840 <___vfprintf_internal_r+0x2b4>
    89a8:	dcc00044 	addi	r19,sp,1
    89ac:	dcc01215 	stw	r19,72(sp)
    89b0:	003fbe06 	br	88ac <___vfprintf_internal_r+0x320>
    89b4:	04000084 	movi	r16,2
    89b8:	d9c00f15 	stw	r7,60(sp)
    89bc:	003f0b06 	br	85ec <___vfprintf_internal_r+0x60>
    89c0:	040000c4 	movi	r16,3
    89c4:	003f0906 	br	85ec <___vfprintf_internal_r+0x60>
    89c8:	00800044 	movi	r2,1
    89cc:	040000c4 	movi	r16,3
    89d0:	d8800e15 	stw	r2,56(sp)
    89d4:	003f0506 	br	85ec <___vfprintf_internal_r+0x60>
    89d8:	0007883a 	mov	r3,zero
    89dc:	003f4e06 	br	8718 <___vfprintf_internal_r+0x18c>
    89e0:	00800044 	movi	r2,1
    89e4:	d8800915 	stw	r2,36(sp)
    89e8:	003f5706 	br	8748 <___vfprintf_internal_r+0x1bc>
    89ec:	d8801117 	ldw	r2,68(sp)
    89f0:	14400017 	ldw	r17,0(r2)
    89f4:	10800104 	addi	r2,r2,4
    89f8:	d8801115 	stw	r2,68(sp)
    89fc:	88000716 	blt	r17,zero,8a1c <___vfprintf_internal_r+0x490>
    8a00:	d8000a15 	stw	zero,40(sp)
    8a04:	003f8d06 	br	883c <___vfprintf_internal_r+0x2b0>
    8a08:	d8c01117 	ldw	r3,68(sp)
    8a0c:	1c400017 	ldw	r17,0(r3)
    8a10:	18c00104 	addi	r3,r3,4
    8a14:	d8c01115 	stw	r3,68(sp)
    8a18:	883ff90e 	bge	r17,zero,8a00 <___vfprintf_internal_r+0x474>
    8a1c:	00800044 	movi	r2,1
    8a20:	0463c83a 	sub	r17,zero,r17
    8a24:	d8800a15 	stw	r2,40(sp)
    8a28:	003f8406 	br	883c <___vfprintf_internal_r+0x2b0>
    8a2c:	04000044 	movi	r16,1
    8a30:	8700080e 	bge	r16,fp,8a54 <___vfprintf_internal_r+0x4c8>
    8a34:	d9001017 	ldw	r4,64(sp)
    8a38:	a00b883a 	mov	r5,r20
    8a3c:	01800804 	movi	r6,32
    8a40:	e1ffffc4 	addi	r7,fp,-1
    8a44:	000850c0 	call	850c <print_repeat>
    8a48:	103fc71e 	bne	r2,zero,8968 <___vfprintf_internal_r+0x3dc>
    8a4c:	e5c5883a 	add	r2,fp,r23
    8a50:	15ffffc4 	addi	r23,r2,-1
    8a54:	d8c01117 	ldw	r3,68(sp)
    8a58:	d9001017 	ldw	r4,64(sp)
    8a5c:	800f883a 	mov	r7,r16
    8a60:	18800017 	ldw	r2,0(r3)
    8a64:	a0c00117 	ldw	r3,4(r20)
    8a68:	a00b883a 	mov	r5,r20
    8a6c:	d8800005 	stb	r2,0(sp)
    8a70:	d80d883a 	mov	r6,sp
    8a74:	183ee83a 	callr	r3
    8a78:	103fbb1e 	bne	r2,zero,8968 <___vfprintf_internal_r+0x3dc>
    8a7c:	d8801117 	ldw	r2,68(sp)
    8a80:	bdc00044 	addi	r23,r23,1
    8a84:	0021883a 	mov	r16,zero
    8a88:	10800104 	addi	r2,r2,4
    8a8c:	d8801115 	stw	r2,68(sp)
    8a90:	003ed606 	br	85ec <___vfprintf_internal_r+0x60>
    8a94:	00800204 	movi	r2,8
    8a98:	d8800d15 	stw	r2,52(sp)
    8a9c:	d8000c15 	stw	zero,48(sp)
    8aa0:	003fb606 	br	897c <___vfprintf_internal_r+0x3f0>
    8aa4:	d8c01117 	ldw	r3,68(sp)
    8aa8:	1cc00017 	ldw	r19,0(r3)
    8aac:	9809883a 	mov	r4,r19
    8ab0:	00084ec0 	call	84ec <strlen>
    8ab4:	e0a1c83a 	sub	r16,fp,r2
    8ab8:	1023883a 	mov	r17,r2
    8abc:	0400070e 	bge	zero,r16,8adc <___vfprintf_internal_r+0x550>
    8ac0:	d9001017 	ldw	r4,64(sp)
    8ac4:	a00b883a 	mov	r5,r20
    8ac8:	01800804 	movi	r6,32
    8acc:	800f883a 	mov	r7,r16
    8ad0:	000850c0 	call	850c <print_repeat>
    8ad4:	103fa41e 	bne	r2,zero,8968 <___vfprintf_internal_r+0x3dc>
    8ad8:	bc2f883a 	add	r23,r23,r16
    8adc:	a0c00117 	ldw	r3,4(r20)
    8ae0:	d9001017 	ldw	r4,64(sp)
    8ae4:	980d883a 	mov	r6,r19
    8ae8:	a00b883a 	mov	r5,r20
    8aec:	880f883a 	mov	r7,r17
    8af0:	183ee83a 	callr	r3
    8af4:	103f9c1e 	bne	r2,zero,8968 <___vfprintf_internal_r+0x3dc>
    8af8:	d8801117 	ldw	r2,68(sp)
    8afc:	bc6f883a 	add	r23,r23,r17
    8b00:	0021883a 	mov	r16,zero
    8b04:	10800104 	addi	r2,r2,4
    8b08:	d8801115 	stw	r2,68(sp)
    8b0c:	003eb706 	br	85ec <___vfprintf_internal_r+0x60>
    8b10:	210015c4 	addi	r4,r4,87
    8b14:	003f5106 	br	885c <___vfprintf_internal_r+0x2d0>
    8b18:	04003b16 	blt	zero,r16,8c08 <___vfprintf_internal_r+0x67c>
    8b1c:	d8c00a17 	ldw	r3,40(sp)
    8b20:	1805003a 	cmpeq	r2,r3,zero
    8b24:	103f7f1e 	bne	r2,zero,8924 <___vfprintf_internal_r+0x398>
    8b28:	a0c00117 	ldw	r3,4(r20)
    8b2c:	d9001017 	ldw	r4,64(sp)
    8b30:	00800b44 	movi	r2,45
    8b34:	d8800005 	stb	r2,0(sp)
    8b38:	a00b883a 	mov	r5,r20
    8b3c:	d80d883a 	mov	r6,sp
    8b40:	01c00044 	movi	r7,1
    8b44:	183ee83a 	callr	r3
    8b48:	103f871e 	bne	r2,zero,8968 <___vfprintf_internal_r+0x3dc>
    8b4c:	b8800044 	addi	r2,r23,1
    8b50:	003f7506 	br	8928 <___vfprintf_internal_r+0x39c>
    8b54:	0007883a 	mov	r3,zero
    8b58:	003edb06 	br	86c8 <___vfprintf_internal_r+0x13c>
    8b5c:	a0c00117 	ldw	r3,4(r20)
    8b60:	d9001017 	ldw	r4,64(sp)
    8b64:	d9400005 	stb	r5,0(sp)
    8b68:	d80d883a 	mov	r6,sp
    8b6c:	a00b883a 	mov	r5,r20
    8b70:	183ee83a 	callr	r3
    8b74:	103f7c1e 	bne	r2,zero,8968 <___vfprintf_internal_r+0x3dc>
    8b78:	bdc00044 	addi	r23,r23,1
    8b7c:	003e9b06 	br	85ec <___vfprintf_internal_r+0x60>
    8b80:	102f883a 	mov	r23,r2
    8b84:	0021883a 	mov	r16,zero
    8b88:	003e9806 	br	85ec <___vfprintf_internal_r+0x60>
    8b8c:	a0c00117 	ldw	r3,4(r20)
    8b90:	d9000005 	stb	r4,0(sp)
    8b94:	d9001017 	ldw	r4,64(sp)
    8b98:	a00b883a 	mov	r5,r20
    8b9c:	d80d883a 	mov	r6,sp
    8ba0:	800f883a 	mov	r7,r16
    8ba4:	183ee83a 	callr	r3
    8ba8:	103f6f1e 	bne	r2,zero,8968 <___vfprintf_internal_r+0x3dc>
    8bac:	bc2f883a 	add	r23,r23,r16
    8bb0:	0021883a 	mov	r16,zero
    8bb4:	003e8d06 	br	85ec <___vfprintf_internal_r+0x60>
    8bb8:	d9001017 	ldw	r4,64(sp)
    8bbc:	a00b883a 	mov	r5,r20
    8bc0:	01800c04 	movi	r6,48
    8bc4:	800f883a 	mov	r7,r16
    8bc8:	000850c0 	call	850c <print_repeat>
    8bcc:	103f661e 	bne	r2,zero,8968 <___vfprintf_internal_r+0x3dc>
    8bd0:	bc05883a 	add	r2,r23,r16
    8bd4:	003f5406 	br	8928 <___vfprintf_internal_r+0x39c>
    8bd8:	a0c00117 	ldw	r3,4(r20)
    8bdc:	d9001017 	ldw	r4,64(sp)
    8be0:	00800b44 	movi	r2,45
    8be4:	d8800005 	stb	r2,0(sp)
    8be8:	a00b883a 	mov	r5,r20
    8bec:	d80d883a 	mov	r6,sp
    8bf0:	01c00044 	movi	r7,1
    8bf4:	183ee83a 	callr	r3
    8bf8:	103f5b1e 	bne	r2,zero,8968 <___vfprintf_internal_r+0x3dc>
    8bfc:	bdc00044 	addi	r23,r23,1
    8c00:	043f480e 	bge	zero,r16,8924 <___vfprintf_internal_r+0x398>
    8c04:	003fec06 	br	8bb8 <___vfprintf_internal_r+0x62c>
    8c08:	d9001017 	ldw	r4,64(sp)
    8c0c:	a00b883a 	mov	r5,r20
    8c10:	01800804 	movi	r6,32
    8c14:	800f883a 	mov	r7,r16
    8c18:	000850c0 	call	850c <print_repeat>
    8c1c:	103f521e 	bne	r2,zero,8968 <___vfprintf_internal_r+0x3dc>
    8c20:	bc2f883a 	add	r23,r23,r16
    8c24:	003fbd06 	br	8b1c <___vfprintf_internal_r+0x590>

00008c28 <__vfprintf_internal>:
    8c28:	00800074 	movhi	r2,1
    8c2c:	10aa8504 	addi	r2,r2,-21996
    8c30:	2013883a 	mov	r9,r4
    8c34:	11000017 	ldw	r4,0(r2)
    8c38:	2805883a 	mov	r2,r5
    8c3c:	300f883a 	mov	r7,r6
    8c40:	480b883a 	mov	r5,r9
    8c44:	100d883a 	mov	r6,r2
    8c48:	000858c1 	jmpi	858c <___vfprintf_internal_r>

00008c4c <__sfvwrite_small_dev>:
    8c4c:	2880000b 	ldhu	r2,0(r5)
    8c50:	defffa04 	addi	sp,sp,-24
    8c54:	dcc00315 	stw	r19,12(sp)
    8c58:	1080020c 	andi	r2,r2,8
    8c5c:	dc800215 	stw	r18,8(sp)
    8c60:	dc400115 	stw	r17,4(sp)
    8c64:	dfc00515 	stw	ra,20(sp)
    8c68:	dd000415 	stw	r20,16(sp)
    8c6c:	dc000015 	stw	r16,0(sp)
    8c70:	2825883a 	mov	r18,r5
    8c74:	2027883a 	mov	r19,r4
    8c78:	3023883a 	mov	r17,r6
    8c7c:	10002026 	beq	r2,zero,8d00 <__sfvwrite_small_dev+0xb4>
    8c80:	2940008f 	ldh	r5,2(r5)
    8c84:	28000f16 	blt	r5,zero,8cc4 <__sfvwrite_small_dev+0x78>
    8c88:	01c01b0e 	bge	zero,r7,8cf8 <__sfvwrite_small_dev+0xac>
    8c8c:	3821883a 	mov	r16,r7
    8c90:	05010004 	movi	r20,1024
    8c94:	00000206 	br	8ca0 <__sfvwrite_small_dev+0x54>
    8c98:	0400170e 	bge	zero,r16,8cf8 <__sfvwrite_small_dev+0xac>
    8c9c:	9140008f 	ldh	r5,2(r18)
    8ca0:	880d883a 	mov	r6,r17
    8ca4:	9809883a 	mov	r4,r19
    8ca8:	800f883a 	mov	r7,r16
    8cac:	a400010e 	bge	r20,r16,8cb4 <__sfvwrite_small_dev+0x68>
    8cb0:	01c10004 	movi	r7,1024
    8cb4:	0008dec0 	call	8dec <_write_r>
    8cb8:	88a3883a 	add	r17,r17,r2
    8cbc:	80a1c83a 	sub	r16,r16,r2
    8cc0:	00bff516 	blt	zero,r2,8c98 <__sfvwrite_small_dev+0x4c>
    8cc4:	9080000b 	ldhu	r2,0(r18)
    8cc8:	00ffffc4 	movi	r3,-1
    8ccc:	10801014 	ori	r2,r2,64
    8cd0:	9080000d 	sth	r2,0(r18)
    8cd4:	1805883a 	mov	r2,r3
    8cd8:	dfc00517 	ldw	ra,20(sp)
    8cdc:	dd000417 	ldw	r20,16(sp)
    8ce0:	dcc00317 	ldw	r19,12(sp)
    8ce4:	dc800217 	ldw	r18,8(sp)
    8ce8:	dc400117 	ldw	r17,4(sp)
    8cec:	dc000017 	ldw	r16,0(sp)
    8cf0:	dec00604 	addi	sp,sp,24
    8cf4:	f800283a 	ret
    8cf8:	0007883a 	mov	r3,zero
    8cfc:	003ff506 	br	8cd4 <__sfvwrite_small_dev+0x88>
    8d00:	00ffffc4 	movi	r3,-1
    8d04:	003ff306 	br	8cd4 <__sfvwrite_small_dev+0x88>

00008d08 <putc>:
    8d08:	defffd04 	addi	sp,sp,-12
    8d0c:	00800074 	movhi	r2,1
    8d10:	10aa8504 	addi	r2,r2,-21996
    8d14:	dc000115 	stw	r16,4(sp)
    8d18:	2021883a 	mov	r16,r4
    8d1c:	11000017 	ldw	r4,0(r2)
    8d20:	dc000005 	stb	r16,0(sp)
    8d24:	00800074 	movhi	r2,1
    8d28:	10a31304 	addi	r2,r2,-29620
    8d2c:	dfc00215 	stw	ra,8(sp)
    8d30:	28800115 	stw	r2,4(r5)
    8d34:	d80d883a 	mov	r6,sp
    8d38:	01c00044 	movi	r7,1
    8d3c:	103ee83a 	callr	r2
    8d40:	1007883a 	mov	r3,r2
    8d44:	00bfffc4 	movi	r2,-1
    8d48:	18800526 	beq	r3,r2,8d60 <putc+0x58>
    8d4c:	8005883a 	mov	r2,r16
    8d50:	dfc00217 	ldw	ra,8(sp)
    8d54:	dc000117 	ldw	r16,4(sp)
    8d58:	dec00304 	addi	sp,sp,12
    8d5c:	f800283a 	ret
    8d60:	1821883a 	mov	r16,r3
    8d64:	8005883a 	mov	r2,r16
    8d68:	dfc00217 	ldw	ra,8(sp)
    8d6c:	dc000117 	ldw	r16,4(sp)
    8d70:	dec00304 	addi	sp,sp,12
    8d74:	f800283a 	ret

00008d78 <_putc_r>:
    8d78:	00800074 	movhi	r2,1
    8d7c:	10aa8504 	addi	r2,r2,-21996
    8d80:	defffd04 	addi	sp,sp,-12
    8d84:	11000017 	ldw	r4,0(r2)
    8d88:	00800074 	movhi	r2,1
    8d8c:	10a31304 	addi	r2,r2,-29620
    8d90:	30800115 	stw	r2,4(r6)
    8d94:	dc000115 	stw	r16,4(sp)
    8d98:	2821883a 	mov	r16,r5
    8d9c:	dfc00215 	stw	ra,8(sp)
    8da0:	300b883a 	mov	r5,r6
    8da4:	01c00044 	movi	r7,1
    8da8:	d80d883a 	mov	r6,sp
    8dac:	dc000005 	stb	r16,0(sp)
    8db0:	103ee83a 	callr	r2
    8db4:	1007883a 	mov	r3,r2
    8db8:	00bfffc4 	movi	r2,-1
    8dbc:	18800526 	beq	r3,r2,8dd4 <_putc_r+0x5c>
    8dc0:	8005883a 	mov	r2,r16
    8dc4:	dfc00217 	ldw	ra,8(sp)
    8dc8:	dc000117 	ldw	r16,4(sp)
    8dcc:	dec00304 	addi	sp,sp,12
    8dd0:	f800283a 	ret
    8dd4:	1821883a 	mov	r16,r3
    8dd8:	8005883a 	mov	r2,r16
    8ddc:	dfc00217 	ldw	ra,8(sp)
    8de0:	dc000117 	ldw	r16,4(sp)
    8de4:	dec00304 	addi	sp,sp,12
    8de8:	f800283a 	ret

00008dec <_write_r>:
    8dec:	defffd04 	addi	sp,sp,-12
    8df0:	dc000015 	stw	r16,0(sp)
    8df4:	04000074 	movhi	r16,1
    8df8:	842b4204 	addi	r16,r16,-21240
    8dfc:	dc400115 	stw	r17,4(sp)
    8e00:	80000015 	stw	zero,0(r16)
    8e04:	2023883a 	mov	r17,r4
    8e08:	2809883a 	mov	r4,r5
    8e0c:	300b883a 	mov	r5,r6
    8e10:	380d883a 	mov	r6,r7
    8e14:	dfc00215 	stw	ra,8(sp)
    8e18:	00091400 	call	9140 <write>
    8e1c:	1007883a 	mov	r3,r2
    8e20:	00bfffc4 	movi	r2,-1
    8e24:	18800626 	beq	r3,r2,8e40 <_write_r+0x54>
    8e28:	1805883a 	mov	r2,r3
    8e2c:	dfc00217 	ldw	ra,8(sp)
    8e30:	dc400117 	ldw	r17,4(sp)
    8e34:	dc000017 	ldw	r16,0(sp)
    8e38:	dec00304 	addi	sp,sp,12
    8e3c:	f800283a 	ret
    8e40:	80800017 	ldw	r2,0(r16)
    8e44:	103ff826 	beq	r2,zero,8e28 <_write_r+0x3c>
    8e48:	88800015 	stw	r2,0(r17)
    8e4c:	1805883a 	mov	r2,r3
    8e50:	dfc00217 	ldw	ra,8(sp)
    8e54:	dc400117 	ldw	r17,4(sp)
    8e58:	dc000017 	ldw	r16,0(sp)
    8e5c:	dec00304 	addi	sp,sp,12
    8e60:	f800283a 	ret

00008e64 <udivmodsi4>:
    8e64:	29001b2e 	bgeu	r5,r4,8ed4 <udivmodsi4+0x70>
    8e68:	28001a16 	blt	r5,zero,8ed4 <udivmodsi4+0x70>
    8e6c:	00800044 	movi	r2,1
    8e70:	0007883a 	mov	r3,zero
    8e74:	01c007c4 	movi	r7,31
    8e78:	00000306 	br	8e88 <udivmodsi4+0x24>
    8e7c:	19c01326 	beq	r3,r7,8ecc <udivmodsi4+0x68>
    8e80:	18c00044 	addi	r3,r3,1
    8e84:	28000416 	blt	r5,zero,8e98 <udivmodsi4+0x34>
    8e88:	294b883a 	add	r5,r5,r5
    8e8c:	1085883a 	add	r2,r2,r2
    8e90:	293ffa36 	bltu	r5,r4,8e7c <udivmodsi4+0x18>
    8e94:	10000d26 	beq	r2,zero,8ecc <udivmodsi4+0x68>
    8e98:	0007883a 	mov	r3,zero
    8e9c:	21400236 	bltu	r4,r5,8ea8 <udivmodsi4+0x44>
    8ea0:	2149c83a 	sub	r4,r4,r5
    8ea4:	1886b03a 	or	r3,r3,r2
    8ea8:	1004d07a 	srli	r2,r2,1
    8eac:	280ad07a 	srli	r5,r5,1
    8eb0:	103ffa1e 	bne	r2,zero,8e9c <udivmodsi4+0x38>
    8eb4:	30000226 	beq	r6,zero,8ec0 <udivmodsi4+0x5c>
    8eb8:	2005883a 	mov	r2,r4
    8ebc:	f800283a 	ret
    8ec0:	1809883a 	mov	r4,r3
    8ec4:	2005883a 	mov	r2,r4
    8ec8:	f800283a 	ret
    8ecc:	0007883a 	mov	r3,zero
    8ed0:	003ff806 	br	8eb4 <udivmodsi4+0x50>
    8ed4:	00800044 	movi	r2,1
    8ed8:	0007883a 	mov	r3,zero
    8edc:	003fef06 	br	8e9c <udivmodsi4+0x38>

00008ee0 <__divsi3>:
    8ee0:	defffe04 	addi	sp,sp,-8
    8ee4:	dc000015 	stw	r16,0(sp)
    8ee8:	dfc00115 	stw	ra,4(sp)
    8eec:	0021883a 	mov	r16,zero
    8ef0:	20000c16 	blt	r4,zero,8f24 <__divsi3+0x44>
    8ef4:	000d883a 	mov	r6,zero
    8ef8:	28000e16 	blt	r5,zero,8f34 <__divsi3+0x54>
    8efc:	0008e640 	call	8e64 <udivmodsi4>
    8f00:	1007883a 	mov	r3,r2
    8f04:	8005003a 	cmpeq	r2,r16,zero
    8f08:	1000011e 	bne	r2,zero,8f10 <__divsi3+0x30>
    8f0c:	00c7c83a 	sub	r3,zero,r3
    8f10:	1805883a 	mov	r2,r3
    8f14:	dfc00117 	ldw	ra,4(sp)
    8f18:	dc000017 	ldw	r16,0(sp)
    8f1c:	dec00204 	addi	sp,sp,8
    8f20:	f800283a 	ret
    8f24:	0109c83a 	sub	r4,zero,r4
    8f28:	04000044 	movi	r16,1
    8f2c:	000d883a 	mov	r6,zero
    8f30:	283ff20e 	bge	r5,zero,8efc <__divsi3+0x1c>
    8f34:	014bc83a 	sub	r5,zero,r5
    8f38:	8021003a 	cmpeq	r16,r16,zero
    8f3c:	003fef06 	br	8efc <__divsi3+0x1c>

00008f40 <__modsi3>:
    8f40:	deffff04 	addi	sp,sp,-4
    8f44:	dfc00015 	stw	ra,0(sp)
    8f48:	01800044 	movi	r6,1
    8f4c:	2807883a 	mov	r3,r5
    8f50:	20000416 	blt	r4,zero,8f64 <__modsi3+0x24>
    8f54:	28000c16 	blt	r5,zero,8f88 <__modsi3+0x48>
    8f58:	dfc00017 	ldw	ra,0(sp)
    8f5c:	dec00104 	addi	sp,sp,4
    8f60:	0008e641 	jmpi	8e64 <udivmodsi4>
    8f64:	0109c83a 	sub	r4,zero,r4
    8f68:	28000b16 	blt	r5,zero,8f98 <__modsi3+0x58>
    8f6c:	180b883a 	mov	r5,r3
    8f70:	01800044 	movi	r6,1
    8f74:	0008e640 	call	8e64 <udivmodsi4>
    8f78:	0085c83a 	sub	r2,zero,r2
    8f7c:	dfc00017 	ldw	ra,0(sp)
    8f80:	dec00104 	addi	sp,sp,4
    8f84:	f800283a 	ret
    8f88:	014bc83a 	sub	r5,zero,r5
    8f8c:	dfc00017 	ldw	ra,0(sp)
    8f90:	dec00104 	addi	sp,sp,4
    8f94:	0008e641 	jmpi	8e64 <udivmodsi4>
    8f98:	0147c83a 	sub	r3,zero,r5
    8f9c:	003ff306 	br	8f6c <__modsi3+0x2c>

00008fa0 <__udivsi3>:
    8fa0:	000d883a 	mov	r6,zero
    8fa4:	0008e641 	jmpi	8e64 <udivmodsi4>

00008fa8 <__umodsi3>:
    8fa8:	01800044 	movi	r6,1
    8fac:	0008e641 	jmpi	8e64 <udivmodsi4>

00008fb0 <__mulsi3>:
    8fb0:	20000a26 	beq	r4,zero,8fdc <__mulsi3+0x2c>
    8fb4:	0007883a 	mov	r3,zero
    8fb8:	2080004c 	andi	r2,r4,1
    8fbc:	1005003a 	cmpeq	r2,r2,zero
    8fc0:	2008d07a 	srli	r4,r4,1
    8fc4:	1000011e 	bne	r2,zero,8fcc <__mulsi3+0x1c>
    8fc8:	1947883a 	add	r3,r3,r5
    8fcc:	294b883a 	add	r5,r5,r5
    8fd0:	203ff91e 	bne	r4,zero,8fb8 <__mulsi3+0x8>
    8fd4:	1805883a 	mov	r2,r3
    8fd8:	f800283a 	ret
    8fdc:	0007883a 	mov	r3,zero
    8fe0:	1805883a 	mov	r2,r3
    8fe4:	f800283a 	ret

00008fe8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8fe8:	defffe04 	addi	sp,sp,-8
    8fec:	dfc00115 	stw	ra,4(sp)
    8ff0:	df000015 	stw	fp,0(sp)
    8ff4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8ff8:	01000074 	movhi	r4,1
    8ffc:	212a8d04 	addi	r4,r4,-21964
    9000:	01400074 	movhi	r5,1
    9004:	2969d804 	addi	r5,r5,-22688
    9008:	01800074 	movhi	r6,1
    900c:	31aa8d04 	addi	r6,r6,-21964
    9010:	00090680 	call	9068 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9014:	01000074 	movhi	r4,1
    9018:	21200804 	addi	r4,r4,-32736
    901c:	01400074 	movhi	r5,1
    9020:	29600804 	addi	r5,r5,-32736
    9024:	01800074 	movhi	r6,1
    9028:	31a00804 	addi	r6,r6,-32736
    902c:	00090680 	call	9068 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9030:	01000074 	movhi	r4,1
    9034:	21292a04 	addi	r4,r4,-23384
    9038:	01400074 	movhi	r5,1
    903c:	29692a04 	addi	r5,r5,-23384
    9040:	01800074 	movhi	r6,1
    9044:	31a9d804 	addi	r6,r6,-22688
    9048:	00090680 	call	9068 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    904c:	00097180 	call	9718 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9050:	000993c0 	call	993c <alt_icache_flush_all>
}
    9054:	e037883a 	mov	sp,fp
    9058:	dfc00117 	ldw	ra,4(sp)
    905c:	df000017 	ldw	fp,0(sp)
    9060:	dec00204 	addi	sp,sp,8
    9064:	f800283a 	ret

00009068 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9068:	defffc04 	addi	sp,sp,-16
    906c:	df000315 	stw	fp,12(sp)
    9070:	df000304 	addi	fp,sp,12
    9074:	e13ffd15 	stw	r4,-12(fp)
    9078:	e17ffe15 	stw	r5,-8(fp)
    907c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9080:	e0fffe17 	ldw	r3,-8(fp)
    9084:	e0bffd17 	ldw	r2,-12(fp)
    9088:	18800e26 	beq	r3,r2,90c4 <alt_load_section+0x5c>
  {
    while( to != end )
    908c:	00000a06 	br	90b8 <alt_load_section+0x50>
    {
      *to++ = *from++;
    9090:	e0bffd17 	ldw	r2,-12(fp)
    9094:	10c00017 	ldw	r3,0(r2)
    9098:	e0bffe17 	ldw	r2,-8(fp)
    909c:	10c00015 	stw	r3,0(r2)
    90a0:	e0bffe17 	ldw	r2,-8(fp)
    90a4:	10800104 	addi	r2,r2,4
    90a8:	e0bffe15 	stw	r2,-8(fp)
    90ac:	e0bffd17 	ldw	r2,-12(fp)
    90b0:	10800104 	addi	r2,r2,4
    90b4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    90b8:	e0fffe17 	ldw	r3,-8(fp)
    90bc:	e0bfff17 	ldw	r2,-4(fp)
    90c0:	18bff31e 	bne	r3,r2,9090 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    90c4:	e037883a 	mov	sp,fp
    90c8:	df000017 	ldw	fp,0(sp)
    90cc:	dec00104 	addi	sp,sp,4
    90d0:	f800283a 	ret

000090d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    90d4:	defffd04 	addi	sp,sp,-12
    90d8:	dfc00215 	stw	ra,8(sp)
    90dc:	df000115 	stw	fp,4(sp)
    90e0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    90e4:	0009883a 	mov	r4,zero
    90e8:	00092c40 	call	92c4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    90ec:	00092f80 	call	92f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    90f0:	01000074 	movhi	r4,1
    90f4:	2129cb04 	addi	r4,r4,-22740
    90f8:	01400074 	movhi	r5,1
    90fc:	2969cb04 	addi	r5,r5,-22740
    9100:	01800074 	movhi	r6,1
    9104:	31a9cb04 	addi	r6,r6,-22740
    9108:	0009a300 	call	9a30 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    910c:	00098740 	call	9874 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    9110:	01000074 	movhi	r4,1
    9114:	21263604 	addi	r4,r4,-26408
    9118:	000a0a80 	call	a0a8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    911c:	d120be17 	ldw	r4,-32008(gp)
    9120:	d160bf17 	ldw	r5,-32004(gp)
    9124:	d1a0c017 	ldw	r6,-32000(gp)
    9128:	00083140 	call	8314 <main>
    912c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9130:	01000044 	movi	r4,1
    9134:	00095b80 	call	95b8 <close>
  exit (result);
    9138:	e13fff17 	ldw	r4,-4(fp)
    913c:	000a0bc0 	call	a0bc <exit>

00009140 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9140:	defff704 	addi	sp,sp,-36
    9144:	dfc00815 	stw	ra,32(sp)
    9148:	df000715 	stw	fp,28(sp)
    914c:	df000704 	addi	fp,sp,28
    9150:	e13ffb15 	stw	r4,-20(fp)
    9154:	e17ffc15 	stw	r5,-16(fp)
    9158:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    915c:	e0bffb17 	ldw	r2,-20(fp)
    9160:	1004803a 	cmplt	r2,r2,zero
    9164:	1000091e 	bne	r2,zero,918c <write+0x4c>
    9168:	e13ffb17 	ldw	r4,-20(fp)
    916c:	01400304 	movi	r5,12
    9170:	0008fb00 	call	8fb0 <__mulsi3>
    9174:	1007883a 	mov	r3,r2
    9178:	00800074 	movhi	r2,1
    917c:	10aa2504 	addi	r2,r2,-22380
    9180:	1887883a 	add	r3,r3,r2
    9184:	e0ffff15 	stw	r3,-4(fp)
    9188:	00000106 	br	9190 <write+0x50>
    918c:	e03fff15 	stw	zero,-4(fp)
    9190:	e0bfff17 	ldw	r2,-4(fp)
    9194:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    9198:	e0bffa17 	ldw	r2,-24(fp)
    919c:	1005003a 	cmpeq	r2,r2,zero
    91a0:	1000241e 	bne	r2,zero,9234 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    91a4:	e0bffa17 	ldw	r2,-24(fp)
    91a8:	10800217 	ldw	r2,8(r2)
    91ac:	108000cc 	andi	r2,r2,3
    91b0:	1005003a 	cmpeq	r2,r2,zero
    91b4:	10001a1e 	bne	r2,zero,9220 <write+0xe0>
    91b8:	e0bffa17 	ldw	r2,-24(fp)
    91bc:	10800017 	ldw	r2,0(r2)
    91c0:	10800617 	ldw	r2,24(r2)
    91c4:	1005003a 	cmpeq	r2,r2,zero
    91c8:	1000151e 	bne	r2,zero,9220 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    91cc:	e0bffa17 	ldw	r2,-24(fp)
    91d0:	10800017 	ldw	r2,0(r2)
    91d4:	10800617 	ldw	r2,24(r2)
    91d8:	e17ffc17 	ldw	r5,-16(fp)
    91dc:	e1bffd17 	ldw	r6,-12(fp)
    91e0:	e13ffa17 	ldw	r4,-24(fp)
    91e4:	103ee83a 	callr	r2
    91e8:	e0bff915 	stw	r2,-28(fp)
    91ec:	e0bff917 	ldw	r2,-28(fp)
    91f0:	1004403a 	cmpge	r2,r2,zero
    91f4:	1000071e 	bne	r2,zero,9214 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    91f8:	00092640 	call	9264 <alt_get_errno>
    91fc:	e0fff917 	ldw	r3,-28(fp)
    9200:	00c7c83a 	sub	r3,zero,r3
    9204:	10c00015 	stw	r3,0(r2)
        return -1;
    9208:	00bfffc4 	movi	r2,-1
    920c:	e0bffe15 	stw	r2,-8(fp)
    9210:	00000e06 	br	924c <write+0x10c>
      }
      return rval;
    9214:	e0bff917 	ldw	r2,-28(fp)
    9218:	e0bffe15 	stw	r2,-8(fp)
    921c:	00000b06 	br	924c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9220:	00092640 	call	9264 <alt_get_errno>
    9224:	1007883a 	mov	r3,r2
    9228:	00800344 	movi	r2,13
    922c:	18800015 	stw	r2,0(r3)
    9230:	00000406 	br	9244 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9234:	00092640 	call	9264 <alt_get_errno>
    9238:	1007883a 	mov	r3,r2
    923c:	00801444 	movi	r2,81
    9240:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9244:	00bfffc4 	movi	r2,-1
    9248:	e0bffe15 	stw	r2,-8(fp)
    924c:	e0bffe17 	ldw	r2,-8(fp)
}
    9250:	e037883a 	mov	sp,fp
    9254:	dfc00117 	ldw	ra,4(sp)
    9258:	df000017 	ldw	fp,0(sp)
    925c:	dec00204 	addi	sp,sp,8
    9260:	f800283a 	ret

00009264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9264:	defffd04 	addi	sp,sp,-12
    9268:	dfc00215 	stw	ra,8(sp)
    926c:	df000115 	stw	fp,4(sp)
    9270:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9274:	00800074 	movhi	r2,1
    9278:	10aa8c04 	addi	r2,r2,-21968
    927c:	10800017 	ldw	r2,0(r2)
    9280:	1005003a 	cmpeq	r2,r2,zero
    9284:	1000061e 	bne	r2,zero,92a0 <alt_get_errno+0x3c>
    9288:	00800074 	movhi	r2,1
    928c:	10aa8c04 	addi	r2,r2,-21968
    9290:	10800017 	ldw	r2,0(r2)
    9294:	103ee83a 	callr	r2
    9298:	e0bfff15 	stw	r2,-4(fp)
    929c:	00000306 	br	92ac <alt_get_errno+0x48>
    92a0:	00800074 	movhi	r2,1
    92a4:	10ab4204 	addi	r2,r2,-21240
    92a8:	e0bfff15 	stw	r2,-4(fp)
    92ac:	e0bfff17 	ldw	r2,-4(fp)
}
    92b0:	e037883a 	mov	sp,fp
    92b4:	dfc00117 	ldw	ra,4(sp)
    92b8:	df000017 	ldw	fp,0(sp)
    92bc:	dec00204 	addi	sp,sp,8
    92c0:	f800283a 	ret

000092c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    92c4:	defffd04 	addi	sp,sp,-12
    92c8:	dfc00215 	stw	ra,8(sp)
    92cc:	df000115 	stw	fp,4(sp)
    92d0:	df000104 	addi	fp,sp,4
    92d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    92d8:	0009e040 	call	9e04 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    92dc:	00800044 	movi	r2,1
    92e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    92e4:	e037883a 	mov	sp,fp
    92e8:	dfc00117 	ldw	ra,4(sp)
    92ec:	df000017 	ldw	fp,0(sp)
    92f0:	dec00204 	addi	sp,sp,8
    92f4:	f800283a 	ret

000092f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    92f8:	defffe04 	addi	sp,sp,-8
    92fc:	dfc00115 	stw	ra,4(sp)
    9300:	df000015 	stw	fp,0(sp)
    9304:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    9308:	01000074 	movhi	r4,1
    930c:	212a1004 	addi	r4,r4,-22464
    9310:	00093280 	call	9328 <alt_dev_reg>
}
    9314:	e037883a 	mov	sp,fp
    9318:	dfc00117 	ldw	ra,4(sp)
    931c:	df000017 	ldw	fp,0(sp)
    9320:	dec00204 	addi	sp,sp,8
    9324:	f800283a 	ret

00009328 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9328:	defffd04 	addi	sp,sp,-12
    932c:	dfc00215 	stw	ra,8(sp)
    9330:	df000115 	stw	fp,4(sp)
    9334:	df000104 	addi	fp,sp,4
    9338:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    933c:	e13fff17 	ldw	r4,-4(fp)
    9340:	01400074 	movhi	r5,1
    9344:	296a8904 	addi	r5,r5,-21980
    9348:	00097600 	call	9760 <alt_dev_llist_insert>
}
    934c:	e037883a 	mov	sp,fp
    9350:	dfc00117 	ldw	ra,4(sp)
    9354:	df000017 	ldw	fp,0(sp)
    9358:	dec00204 	addi	sp,sp,8
    935c:	f800283a 	ret

00009360 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9360:	defffa04 	addi	sp,sp,-24
    9364:	dfc00515 	stw	ra,20(sp)
    9368:	df000415 	stw	fp,16(sp)
    936c:	df000404 	addi	fp,sp,16
    9370:	e13ffd15 	stw	r4,-12(fp)
    9374:	e17ffe15 	stw	r5,-8(fp)
    9378:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    937c:	e0bffd17 	ldw	r2,-12(fp)
    9380:	10800017 	ldw	r2,0(r2)
    9384:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9388:	e0bffc17 	ldw	r2,-16(fp)
    938c:	11000a04 	addi	r4,r2,40
    9390:	e0bffd17 	ldw	r2,-12(fp)
    9394:	11c00217 	ldw	r7,8(r2)
    9398:	e17ffe17 	ldw	r5,-8(fp)
    939c:	e1bfff17 	ldw	r6,-4(fp)
    93a0:	00094100 	call	9410 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    93a4:	e037883a 	mov	sp,fp
    93a8:	dfc00117 	ldw	ra,4(sp)
    93ac:	df000017 	ldw	fp,0(sp)
    93b0:	dec00204 	addi	sp,sp,8
    93b4:	f800283a 	ret

000093b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    93b8:	defffa04 	addi	sp,sp,-24
    93bc:	dfc00515 	stw	ra,20(sp)
    93c0:	df000415 	stw	fp,16(sp)
    93c4:	df000404 	addi	fp,sp,16
    93c8:	e13ffd15 	stw	r4,-12(fp)
    93cc:	e17ffe15 	stw	r5,-8(fp)
    93d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    93d4:	e0bffd17 	ldw	r2,-12(fp)
    93d8:	10800017 	ldw	r2,0(r2)
    93dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    93e0:	e0bffc17 	ldw	r2,-16(fp)
    93e4:	11000a04 	addi	r4,r2,40
    93e8:	e0bffd17 	ldw	r2,-12(fp)
    93ec:	11c00217 	ldw	r7,8(r2)
    93f0:	e17ffe17 	ldw	r5,-8(fp)
    93f4:	e1bfff17 	ldw	r6,-4(fp)
    93f8:	00095140 	call	9514 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    93fc:	e037883a 	mov	sp,fp
    9400:	dfc00117 	ldw	ra,4(sp)
    9404:	df000017 	ldw	fp,0(sp)
    9408:	dec00204 	addi	sp,sp,8
    940c:	f800283a 	ret

00009410 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9410:	defff604 	addi	sp,sp,-40
    9414:	df000915 	stw	fp,36(sp)
    9418:	df000904 	addi	fp,sp,36
    941c:	e13ffb15 	stw	r4,-20(fp)
    9420:	e17ffc15 	stw	r5,-16(fp)
    9424:	e1bffd15 	stw	r6,-12(fp)
    9428:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    942c:	e0bffb17 	ldw	r2,-20(fp)
    9430:	10800017 	ldw	r2,0(r2)
    9434:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    9438:	e0bffc17 	ldw	r2,-16(fp)
    943c:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    9440:	e0bffd17 	ldw	r2,-12(fp)
    9444:	1007883a 	mov	r3,r2
    9448:	e0bffc17 	ldw	r2,-16(fp)
    944c:	10c5883a 	add	r2,r2,r3
    9450:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    9454:	00001606 	br	94b0 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9458:	e0bffa17 	ldw	r2,-24(fp)
    945c:	10800037 	ldwio	r2,0(r2)
    9460:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9464:	e0bff717 	ldw	r2,-36(fp)
    9468:	10a0000c 	andi	r2,r2,32768
    946c:	1005003a 	cmpeq	r2,r2,zero
    9470:	1000081e 	bne	r2,zero,9494 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9474:	e0bff717 	ldw	r2,-36(fp)
    9478:	1007883a 	mov	r3,r2
    947c:	e0bff917 	ldw	r2,-28(fp)
    9480:	10c00005 	stb	r3,0(r2)
    9484:	e0bff917 	ldw	r2,-28(fp)
    9488:	10800044 	addi	r2,r2,1
    948c:	e0bff915 	stw	r2,-28(fp)
    9490:	00000706 	br	94b0 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    9494:	e0fff917 	ldw	r3,-28(fp)
    9498:	e0bffc17 	ldw	r2,-16(fp)
    949c:	1880071e 	bne	r3,r2,94bc <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    94a0:	e0bffe17 	ldw	r2,-8(fp)
    94a4:	1090000c 	andi	r2,r2,16384
    94a8:	1004c03a 	cmpne	r2,r2,zero
    94ac:	1000031e 	bne	r2,zero,94bc <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    94b0:	e0fff917 	ldw	r3,-28(fp)
    94b4:	e0bff817 	ldw	r2,-32(fp)
    94b8:	18bfe736 	bltu	r3,r2,9458 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    94bc:	e0fff917 	ldw	r3,-28(fp)
    94c0:	e0bffc17 	ldw	r2,-16(fp)
    94c4:	18800526 	beq	r3,r2,94dc <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    94c8:	e0fff917 	ldw	r3,-28(fp)
    94cc:	e0bffc17 	ldw	r2,-16(fp)
    94d0:	1887c83a 	sub	r3,r3,r2
    94d4:	e0ffff15 	stw	r3,-4(fp)
    94d8:	00000906 	br	9500 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    94dc:	e0bffe17 	ldw	r2,-8(fp)
    94e0:	1090000c 	andi	r2,r2,16384
    94e4:	1005003a 	cmpeq	r2,r2,zero
    94e8:	1000031e 	bne	r2,zero,94f8 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    94ec:	00bffd44 	movi	r2,-11
    94f0:	e0bfff15 	stw	r2,-4(fp)
    94f4:	00000206 	br	9500 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    94f8:	00bffec4 	movi	r2,-5
    94fc:	e0bfff15 	stw	r2,-4(fp)
    9500:	e0bfff17 	ldw	r2,-4(fp)
}
    9504:	e037883a 	mov	sp,fp
    9508:	df000017 	ldw	fp,0(sp)
    950c:	dec00104 	addi	sp,sp,4
    9510:	f800283a 	ret

00009514 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9514:	defff904 	addi	sp,sp,-28
    9518:	df000615 	stw	fp,24(sp)
    951c:	df000604 	addi	fp,sp,24
    9520:	e13ffc15 	stw	r4,-16(fp)
    9524:	e17ffd15 	stw	r5,-12(fp)
    9528:	e1bffe15 	stw	r6,-8(fp)
    952c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9530:	e0bffc17 	ldw	r2,-16(fp)
    9534:	10800017 	ldw	r2,0(r2)
    9538:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    953c:	e0bffe17 	ldw	r2,-8(fp)
    9540:	1007883a 	mov	r3,r2
    9544:	e0bffd17 	ldw	r2,-12(fp)
    9548:	10c5883a 	add	r2,r2,r3
    954c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9550:	00001106 	br	9598 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9554:	e0bffb17 	ldw	r2,-20(fp)
    9558:	10800104 	addi	r2,r2,4
    955c:	10800037 	ldwio	r2,0(r2)
    9560:	10bfffec 	andhi	r2,r2,65535
    9564:	1005003a 	cmpeq	r2,r2,zero
    9568:	10000b1e 	bne	r2,zero,9598 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    956c:	e13ffb17 	ldw	r4,-20(fp)
    9570:	e0bffd17 	ldw	r2,-12(fp)
    9574:	10800003 	ldbu	r2,0(r2)
    9578:	10c03fcc 	andi	r3,r2,255
    957c:	18c0201c 	xori	r3,r3,128
    9580:	18ffe004 	addi	r3,r3,-128
    9584:	e0bffd17 	ldw	r2,-12(fp)
    9588:	10800044 	addi	r2,r2,1
    958c:	e0bffd15 	stw	r2,-12(fp)
    9590:	2005883a 	mov	r2,r4
    9594:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9598:	e0fffd17 	ldw	r3,-12(fp)
    959c:	e0bffa17 	ldw	r2,-24(fp)
    95a0:	18bfec36 	bltu	r3,r2,9554 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    95a4:	e0bffe17 	ldw	r2,-8(fp)
}
    95a8:	e037883a 	mov	sp,fp
    95ac:	df000017 	ldw	fp,0(sp)
    95b0:	dec00104 	addi	sp,sp,4
    95b4:	f800283a 	ret

000095b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    95b8:	defff804 	addi	sp,sp,-32
    95bc:	dfc00715 	stw	ra,28(sp)
    95c0:	df000615 	stw	fp,24(sp)
    95c4:	df000604 	addi	fp,sp,24
    95c8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    95cc:	e0bffc17 	ldw	r2,-16(fp)
    95d0:	1004803a 	cmplt	r2,r2,zero
    95d4:	1000091e 	bne	r2,zero,95fc <close+0x44>
    95d8:	e13ffc17 	ldw	r4,-16(fp)
    95dc:	01400304 	movi	r5,12
    95e0:	0008fb00 	call	8fb0 <__mulsi3>
    95e4:	1007883a 	mov	r3,r2
    95e8:	00800074 	movhi	r2,1
    95ec:	10aa2504 	addi	r2,r2,-22380
    95f0:	1887883a 	add	r3,r3,r2
    95f4:	e0ffff15 	stw	r3,-4(fp)
    95f8:	00000106 	br	9600 <close+0x48>
    95fc:	e03fff15 	stw	zero,-4(fp)
    9600:	e0bfff17 	ldw	r2,-4(fp)
    9604:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9608:	e0bffb17 	ldw	r2,-20(fp)
    960c:	1005003a 	cmpeq	r2,r2,zero
    9610:	10001d1e 	bne	r2,zero,9688 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9614:	e0bffb17 	ldw	r2,-20(fp)
    9618:	10800017 	ldw	r2,0(r2)
    961c:	10800417 	ldw	r2,16(r2)
    9620:	1005003a 	cmpeq	r2,r2,zero
    9624:	1000071e 	bne	r2,zero,9644 <close+0x8c>
    9628:	e0bffb17 	ldw	r2,-20(fp)
    962c:	10800017 	ldw	r2,0(r2)
    9630:	10800417 	ldw	r2,16(r2)
    9634:	e13ffb17 	ldw	r4,-20(fp)
    9638:	103ee83a 	callr	r2
    963c:	e0bffe15 	stw	r2,-8(fp)
    9640:	00000106 	br	9648 <close+0x90>
    9644:	e03ffe15 	stw	zero,-8(fp)
    9648:	e0bffe17 	ldw	r2,-8(fp)
    964c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9650:	e13ffc17 	ldw	r4,-16(fp)
    9654:	0009d8c0 	call	9d8c <alt_release_fd>
    if (rval < 0)
    9658:	e0bffa17 	ldw	r2,-24(fp)
    965c:	1004403a 	cmpge	r2,r2,zero
    9660:	1000071e 	bne	r2,zero,9680 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    9664:	00096b80 	call	96b8 <alt_get_errno>
    9668:	e0fffa17 	ldw	r3,-24(fp)
    966c:	00c7c83a 	sub	r3,zero,r3
    9670:	10c00015 	stw	r3,0(r2)
      return -1;
    9674:	00bfffc4 	movi	r2,-1
    9678:	e0bffd15 	stw	r2,-12(fp)
    967c:	00000806 	br	96a0 <close+0xe8>
    }
    return 0;
    9680:	e03ffd15 	stw	zero,-12(fp)
    9684:	00000606 	br	96a0 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9688:	00096b80 	call	96b8 <alt_get_errno>
    968c:	1007883a 	mov	r3,r2
    9690:	00801444 	movi	r2,81
    9694:	18800015 	stw	r2,0(r3)
    return -1;
    9698:	00bfffc4 	movi	r2,-1
    969c:	e0bffd15 	stw	r2,-12(fp)
    96a0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    96a4:	e037883a 	mov	sp,fp
    96a8:	dfc00117 	ldw	ra,4(sp)
    96ac:	df000017 	ldw	fp,0(sp)
    96b0:	dec00204 	addi	sp,sp,8
    96b4:	f800283a 	ret

000096b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    96b8:	defffd04 	addi	sp,sp,-12
    96bc:	dfc00215 	stw	ra,8(sp)
    96c0:	df000115 	stw	fp,4(sp)
    96c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    96c8:	00800074 	movhi	r2,1
    96cc:	10aa8c04 	addi	r2,r2,-21968
    96d0:	10800017 	ldw	r2,0(r2)
    96d4:	1005003a 	cmpeq	r2,r2,zero
    96d8:	1000061e 	bne	r2,zero,96f4 <alt_get_errno+0x3c>
    96dc:	00800074 	movhi	r2,1
    96e0:	10aa8c04 	addi	r2,r2,-21968
    96e4:	10800017 	ldw	r2,0(r2)
    96e8:	103ee83a 	callr	r2
    96ec:	e0bfff15 	stw	r2,-4(fp)
    96f0:	00000306 	br	9700 <alt_get_errno+0x48>
    96f4:	00800074 	movhi	r2,1
    96f8:	10ab4204 	addi	r2,r2,-21240
    96fc:	e0bfff15 	stw	r2,-4(fp)
    9700:	e0bfff17 	ldw	r2,-4(fp)
}
    9704:	e037883a 	mov	sp,fp
    9708:	dfc00117 	ldw	ra,4(sp)
    970c:	df000017 	ldw	fp,0(sp)
    9710:	dec00204 	addi	sp,sp,8
    9714:	f800283a 	ret

00009718 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9718:	deffff04 	addi	sp,sp,-4
    971c:	df000015 	stw	fp,0(sp)
    9720:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9724:	e037883a 	mov	sp,fp
    9728:	df000017 	ldw	fp,0(sp)
    972c:	dec00104 	addi	sp,sp,4
    9730:	f800283a 	ret

00009734 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9734:	defffc04 	addi	sp,sp,-16
    9738:	df000315 	stw	fp,12(sp)
    973c:	df000304 	addi	fp,sp,12
    9740:	e13ffd15 	stw	r4,-12(fp)
    9744:	e17ffe15 	stw	r5,-8(fp)
    9748:	e1bfff15 	stw	r6,-4(fp)
  return len;
    974c:	e0bfff17 	ldw	r2,-4(fp)
}
    9750:	e037883a 	mov	sp,fp
    9754:	df000017 	ldw	fp,0(sp)
    9758:	dec00104 	addi	sp,sp,4
    975c:	f800283a 	ret

00009760 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9760:	defff904 	addi	sp,sp,-28
    9764:	dfc00615 	stw	ra,24(sp)
    9768:	df000515 	stw	fp,20(sp)
    976c:	df000504 	addi	fp,sp,20
    9770:	e13ffd15 	stw	r4,-12(fp)
    9774:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9778:	e0bffd17 	ldw	r2,-12(fp)
    977c:	1005003a 	cmpeq	r2,r2,zero
    9780:	1000041e 	bne	r2,zero,9794 <alt_dev_llist_insert+0x34>
    9784:	e0bffd17 	ldw	r2,-12(fp)
    9788:	10800217 	ldw	r2,8(r2)
    978c:	1004c03a 	cmpne	r2,r2,zero
    9790:	1000071e 	bne	r2,zero,97b0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    9794:	00098140 	call	9814 <alt_get_errno>
    9798:	1007883a 	mov	r3,r2
    979c:	00800584 	movi	r2,22
    97a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    97a4:	00bffa84 	movi	r2,-22
    97a8:	e0bfff15 	stw	r2,-4(fp)
    97ac:	00001306 	br	97fc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    97b0:	e0fffd17 	ldw	r3,-12(fp)
    97b4:	e0bffe17 	ldw	r2,-8(fp)
    97b8:	e0bffb15 	stw	r2,-20(fp)
    97bc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    97c0:	e0fffc17 	ldw	r3,-16(fp)
    97c4:	e0bffb17 	ldw	r2,-20(fp)
    97c8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    97cc:	e0bffb17 	ldw	r2,-20(fp)
    97d0:	10c00017 	ldw	r3,0(r2)
    97d4:	e0bffc17 	ldw	r2,-16(fp)
    97d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    97dc:	e0bffb17 	ldw	r2,-20(fp)
    97e0:	10c00017 	ldw	r3,0(r2)
    97e4:	e0bffc17 	ldw	r2,-16(fp)
    97e8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    97ec:	e0fffb17 	ldw	r3,-20(fp)
    97f0:	e0bffc17 	ldw	r2,-16(fp)
    97f4:	18800015 	stw	r2,0(r3)

  return 0;  
    97f8:	e03fff15 	stw	zero,-4(fp)
    97fc:	e0bfff17 	ldw	r2,-4(fp)
}
    9800:	e037883a 	mov	sp,fp
    9804:	dfc00117 	ldw	ra,4(sp)
    9808:	df000017 	ldw	fp,0(sp)
    980c:	dec00204 	addi	sp,sp,8
    9810:	f800283a 	ret

00009814 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9814:	defffd04 	addi	sp,sp,-12
    9818:	dfc00215 	stw	ra,8(sp)
    981c:	df000115 	stw	fp,4(sp)
    9820:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9824:	00800074 	movhi	r2,1
    9828:	10aa8c04 	addi	r2,r2,-21968
    982c:	10800017 	ldw	r2,0(r2)
    9830:	1005003a 	cmpeq	r2,r2,zero
    9834:	1000061e 	bne	r2,zero,9850 <alt_get_errno+0x3c>
    9838:	00800074 	movhi	r2,1
    983c:	10aa8c04 	addi	r2,r2,-21968
    9840:	10800017 	ldw	r2,0(r2)
    9844:	103ee83a 	callr	r2
    9848:	e0bfff15 	stw	r2,-4(fp)
    984c:	00000306 	br	985c <alt_get_errno+0x48>
    9850:	00800074 	movhi	r2,1
    9854:	10ab4204 	addi	r2,r2,-21240
    9858:	e0bfff15 	stw	r2,-4(fp)
    985c:	e0bfff17 	ldw	r2,-4(fp)
}
    9860:	e037883a 	mov	sp,fp
    9864:	dfc00117 	ldw	ra,4(sp)
    9868:	df000017 	ldw	fp,0(sp)
    986c:	dec00204 	addi	sp,sp,8
    9870:	f800283a 	ret

00009874 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9874:	defffd04 	addi	sp,sp,-12
    9878:	dfc00215 	stw	ra,8(sp)
    987c:	df000115 	stw	fp,4(sp)
    9880:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9884:	00bfff04 	movi	r2,-4
    9888:	00c00074 	movhi	r3,1
    988c:	18e92a04 	addi	r3,r3,-23384
    9890:	1885883a 	add	r2,r3,r2
    9894:	e0bfff15 	stw	r2,-4(fp)
    9898:	00000606 	br	98b4 <_do_ctors+0x40>
        (*ctor) (); 
    989c:	e0bfff17 	ldw	r2,-4(fp)
    98a0:	10800017 	ldw	r2,0(r2)
    98a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    98a8:	e0bfff17 	ldw	r2,-4(fp)
    98ac:	10bfff04 	addi	r2,r2,-4
    98b0:	e0bfff15 	stw	r2,-4(fp)
    98b4:	e0ffff17 	ldw	r3,-4(fp)
    98b8:	00800074 	movhi	r2,1
    98bc:	10a92904 	addi	r2,r2,-23388
    98c0:	18bff62e 	bgeu	r3,r2,989c <_do_ctors+0x28>
        (*ctor) (); 
}
    98c4:	e037883a 	mov	sp,fp
    98c8:	dfc00117 	ldw	ra,4(sp)
    98cc:	df000017 	ldw	fp,0(sp)
    98d0:	dec00204 	addi	sp,sp,8
    98d4:	f800283a 	ret

000098d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    98d8:	defffd04 	addi	sp,sp,-12
    98dc:	dfc00215 	stw	ra,8(sp)
    98e0:	df000115 	stw	fp,4(sp)
    98e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    98e8:	00bfff04 	movi	r2,-4
    98ec:	00c00074 	movhi	r3,1
    98f0:	18e92a04 	addi	r3,r3,-23384
    98f4:	1885883a 	add	r2,r3,r2
    98f8:	e0bfff15 	stw	r2,-4(fp)
    98fc:	00000606 	br	9918 <_do_dtors+0x40>
        (*dtor) (); 
    9900:	e0bfff17 	ldw	r2,-4(fp)
    9904:	10800017 	ldw	r2,0(r2)
    9908:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    990c:	e0bfff17 	ldw	r2,-4(fp)
    9910:	10bfff04 	addi	r2,r2,-4
    9914:	e0bfff15 	stw	r2,-4(fp)
    9918:	e0ffff17 	ldw	r3,-4(fp)
    991c:	00800074 	movhi	r2,1
    9920:	10a92a04 	addi	r2,r2,-23384
    9924:	18bff62e 	bgeu	r3,r2,9900 <_do_dtors+0x28>
        (*dtor) (); 
}
    9928:	e037883a 	mov	sp,fp
    992c:	dfc00117 	ldw	ra,4(sp)
    9930:	df000017 	ldw	fp,0(sp)
    9934:	dec00204 	addi	sp,sp,8
    9938:	f800283a 	ret

0000993c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    993c:	deffff04 	addi	sp,sp,-4
    9940:	df000015 	stw	fp,0(sp)
    9944:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9948:	e037883a 	mov	sp,fp
    994c:	df000017 	ldw	fp,0(sp)
    9950:	dec00104 	addi	sp,sp,4
    9954:	f800283a 	ret

00009958 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9958:	defff804 	addi	sp,sp,-32
    995c:	dfc00715 	stw	ra,28(sp)
    9960:	df000615 	stw	fp,24(sp)
    9964:	dc000515 	stw	r16,20(sp)
    9968:	df000504 	addi	fp,sp,20
    996c:	e13ffc15 	stw	r4,-16(fp)
    9970:	e17ffd15 	stw	r5,-12(fp)
    9974:	e1bffe15 	stw	r6,-8(fp)
    9978:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    997c:	e13ffd17 	ldw	r4,-12(fp)
    9980:	e17ffe17 	ldw	r5,-8(fp)
    9984:	e1bfff17 	ldw	r6,-4(fp)
    9988:	0009ba00 	call	9ba0 <open>
    998c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    9990:	e0bffb17 	ldw	r2,-20(fp)
    9994:	1004803a 	cmplt	r2,r2,zero
    9998:	10001f1e 	bne	r2,zero,9a18 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    999c:	e13ffb17 	ldw	r4,-20(fp)
    99a0:	04000074 	movhi	r16,1
    99a4:	842a2504 	addi	r16,r16,-22380
    99a8:	01400304 	movi	r5,12
    99ac:	0008fb00 	call	8fb0 <__mulsi3>
    99b0:	1405883a 	add	r2,r2,r16
    99b4:	10c00017 	ldw	r3,0(r2)
    99b8:	e0bffc17 	ldw	r2,-16(fp)
    99bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    99c0:	e13ffb17 	ldw	r4,-20(fp)
    99c4:	04000074 	movhi	r16,1
    99c8:	842a2504 	addi	r16,r16,-22380
    99cc:	01400304 	movi	r5,12
    99d0:	0008fb00 	call	8fb0 <__mulsi3>
    99d4:	1405883a 	add	r2,r2,r16
    99d8:	10800104 	addi	r2,r2,4
    99dc:	10c00017 	ldw	r3,0(r2)
    99e0:	e0bffc17 	ldw	r2,-16(fp)
    99e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    99e8:	e13ffb17 	ldw	r4,-20(fp)
    99ec:	04000074 	movhi	r16,1
    99f0:	842a2504 	addi	r16,r16,-22380
    99f4:	01400304 	movi	r5,12
    99f8:	0008fb00 	call	8fb0 <__mulsi3>
    99fc:	1405883a 	add	r2,r2,r16
    9a00:	10800204 	addi	r2,r2,8
    9a04:	10c00017 	ldw	r3,0(r2)
    9a08:	e0bffc17 	ldw	r2,-16(fp)
    9a0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9a10:	e13ffb17 	ldw	r4,-20(fp)
    9a14:	0009d8c0 	call	9d8c <alt_release_fd>
  }
} 
    9a18:	e037883a 	mov	sp,fp
    9a1c:	dfc00217 	ldw	ra,8(sp)
    9a20:	df000117 	ldw	fp,4(sp)
    9a24:	dc000017 	ldw	r16,0(sp)
    9a28:	dec00304 	addi	sp,sp,12
    9a2c:	f800283a 	ret

00009a30 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9a30:	defffb04 	addi	sp,sp,-20
    9a34:	dfc00415 	stw	ra,16(sp)
    9a38:	df000315 	stw	fp,12(sp)
    9a3c:	df000304 	addi	fp,sp,12
    9a40:	e13ffd15 	stw	r4,-12(fp)
    9a44:	e17ffe15 	stw	r5,-8(fp)
    9a48:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9a4c:	01000074 	movhi	r4,1
    9a50:	212a2804 	addi	r4,r4,-22368
    9a54:	e17ffd17 	ldw	r5,-12(fp)
    9a58:	01800044 	movi	r6,1
    9a5c:	01c07fc4 	movi	r7,511
    9a60:	00099580 	call	9958 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9a64:	01000074 	movhi	r4,1
    9a68:	212a2504 	addi	r4,r4,-22380
    9a6c:	e17ffe17 	ldw	r5,-8(fp)
    9a70:	000d883a 	mov	r6,zero
    9a74:	01c07fc4 	movi	r7,511
    9a78:	00099580 	call	9958 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9a7c:	01000074 	movhi	r4,1
    9a80:	212a2b04 	addi	r4,r4,-22356
    9a84:	e17fff17 	ldw	r5,-4(fp)
    9a88:	01800044 	movi	r6,1
    9a8c:	01c07fc4 	movi	r7,511
    9a90:	00099580 	call	9958 <alt_open_fd>
}  
    9a94:	e037883a 	mov	sp,fp
    9a98:	dfc00117 	ldw	ra,4(sp)
    9a9c:	df000017 	ldw	fp,0(sp)
    9aa0:	dec00204 	addi	sp,sp,8
    9aa4:	f800283a 	ret

00009aa8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9aa8:	defffa04 	addi	sp,sp,-24
    9aac:	dfc00515 	stw	ra,20(sp)
    9ab0:	df000415 	stw	fp,16(sp)
    9ab4:	dc000315 	stw	r16,12(sp)
    9ab8:	df000304 	addi	fp,sp,12
    9abc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9ac0:	e0bffe17 	ldw	r2,-8(fp)
    9ac4:	10800217 	ldw	r2,8(r2)
    9ac8:	10d00034 	orhi	r3,r2,16384
    9acc:	e0bffe17 	ldw	r2,-8(fp)
    9ad0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9ad4:	e03ffd15 	stw	zero,-12(fp)
    9ad8:	00002306 	br	9b68 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9adc:	e13ffd17 	ldw	r4,-12(fp)
    9ae0:	04000074 	movhi	r16,1
    9ae4:	842a2504 	addi	r16,r16,-22380
    9ae8:	01400304 	movi	r5,12
    9aec:	0008fb00 	call	8fb0 <__mulsi3>
    9af0:	1405883a 	add	r2,r2,r16
    9af4:	10c00017 	ldw	r3,0(r2)
    9af8:	e0bffe17 	ldw	r2,-8(fp)
    9afc:	10800017 	ldw	r2,0(r2)
    9b00:	1880161e 	bne	r3,r2,9b5c <alt_file_locked+0xb4>
    9b04:	e13ffd17 	ldw	r4,-12(fp)
    9b08:	04000074 	movhi	r16,1
    9b0c:	842a2504 	addi	r16,r16,-22380
    9b10:	01400304 	movi	r5,12
    9b14:	0008fb00 	call	8fb0 <__mulsi3>
    9b18:	1405883a 	add	r2,r2,r16
    9b1c:	10800204 	addi	r2,r2,8
    9b20:	10800017 	ldw	r2,0(r2)
    9b24:	1004403a 	cmpge	r2,r2,zero
    9b28:	10000c1e 	bne	r2,zero,9b5c <alt_file_locked+0xb4>
    9b2c:	e13ffd17 	ldw	r4,-12(fp)
    9b30:	01400304 	movi	r5,12
    9b34:	0008fb00 	call	8fb0 <__mulsi3>
    9b38:	1007883a 	mov	r3,r2
    9b3c:	00800074 	movhi	r2,1
    9b40:	10aa2504 	addi	r2,r2,-22380
    9b44:	1887883a 	add	r3,r3,r2
    9b48:	e0bffe17 	ldw	r2,-8(fp)
    9b4c:	18800326 	beq	r3,r2,9b5c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9b50:	00bffcc4 	movi	r2,-13
    9b54:	e0bfff15 	stw	r2,-4(fp)
    9b58:	00000a06 	br	9b84 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9b5c:	e0bffd17 	ldw	r2,-12(fp)
    9b60:	10800044 	addi	r2,r2,1
    9b64:	e0bffd15 	stw	r2,-12(fp)
    9b68:	00800074 	movhi	r2,1
    9b6c:	10aa8b04 	addi	r2,r2,-21972
    9b70:	10800017 	ldw	r2,0(r2)
    9b74:	1007883a 	mov	r3,r2
    9b78:	e0bffd17 	ldw	r2,-12(fp)
    9b7c:	18bfd72e 	bgeu	r3,r2,9adc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9b80:	e03fff15 	stw	zero,-4(fp)
    9b84:	e0bfff17 	ldw	r2,-4(fp)
}
    9b88:	e037883a 	mov	sp,fp
    9b8c:	dfc00217 	ldw	ra,8(sp)
    9b90:	df000117 	ldw	fp,4(sp)
    9b94:	dc000017 	ldw	r16,0(sp)
    9b98:	dec00304 	addi	sp,sp,12
    9b9c:	f800283a 	ret

00009ba0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9ba0:	defff404 	addi	sp,sp,-48
    9ba4:	dfc00b15 	stw	ra,44(sp)
    9ba8:	df000a15 	stw	fp,40(sp)
    9bac:	df000a04 	addi	fp,sp,40
    9bb0:	e13ffb15 	stw	r4,-20(fp)
    9bb4:	e17ffc15 	stw	r5,-16(fp)
    9bb8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9bbc:	00bfffc4 	movi	r2,-1
    9bc0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    9bc4:	00bffb44 	movi	r2,-19
    9bc8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    9bcc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9bd0:	e13ffb17 	ldw	r4,-20(fp)
    9bd4:	01400074 	movhi	r5,1
    9bd8:	296a8904 	addi	r5,r5,-21980
    9bdc:	0009e240 	call	9e24 <alt_find_dev>
    9be0:	e0bffa15 	stw	r2,-24(fp)
    9be4:	e0bffa17 	ldw	r2,-24(fp)
    9be8:	1004c03a 	cmpne	r2,r2,zero
    9bec:	1000051e 	bne	r2,zero,9c04 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9bf0:	e13ffb17 	ldw	r4,-20(fp)
    9bf4:	0009eb80 	call	9eb8 <alt_find_file>
    9bf8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    9bfc:	00800044 	movi	r2,1
    9c00:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9c04:	e0bffa17 	ldw	r2,-24(fp)
    9c08:	1005003a 	cmpeq	r2,r2,zero
    9c0c:	1000311e 	bne	r2,zero,9cd4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9c10:	e13ffa17 	ldw	r4,-24(fp)
    9c14:	0009fd80 	call	9fd8 <alt_get_fd>
    9c18:	e0bff815 	stw	r2,-32(fp)
    9c1c:	e0bff817 	ldw	r2,-32(fp)
    9c20:	1004403a 	cmpge	r2,r2,zero
    9c24:	1000031e 	bne	r2,zero,9c34 <open+0x94>
    {
      status = index;
    9c28:	e0bff817 	ldw	r2,-32(fp)
    9c2c:	e0bff715 	stw	r2,-36(fp)
    9c30:	00002a06 	br	9cdc <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    9c34:	e13ff817 	ldw	r4,-32(fp)
    9c38:	01400304 	movi	r5,12
    9c3c:	0008fb00 	call	8fb0 <__mulsi3>
    9c40:	1007883a 	mov	r3,r2
    9c44:	00800074 	movhi	r2,1
    9c48:	10aa2504 	addi	r2,r2,-22380
    9c4c:	1885883a 	add	r2,r3,r2
    9c50:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9c54:	e0fffc17 	ldw	r3,-16(fp)
    9c58:	00900034 	movhi	r2,16384
    9c5c:	10bfffc4 	addi	r2,r2,-1
    9c60:	1886703a 	and	r3,r3,r2
    9c64:	e0bff917 	ldw	r2,-28(fp)
    9c68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9c6c:	e0bff617 	ldw	r2,-40(fp)
    9c70:	1004c03a 	cmpne	r2,r2,zero
    9c74:	1000061e 	bne	r2,zero,9c90 <open+0xf0>
    9c78:	e13ff917 	ldw	r4,-28(fp)
    9c7c:	0009aa80 	call	9aa8 <alt_file_locked>
    9c80:	e0bff715 	stw	r2,-36(fp)
    9c84:	e0bff717 	ldw	r2,-36(fp)
    9c88:	1004803a 	cmplt	r2,r2,zero
    9c8c:	1000131e 	bne	r2,zero,9cdc <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9c90:	e0bffa17 	ldw	r2,-24(fp)
    9c94:	10800317 	ldw	r2,12(r2)
    9c98:	1005003a 	cmpeq	r2,r2,zero
    9c9c:	1000091e 	bne	r2,zero,9cc4 <open+0x124>
    9ca0:	e0bffa17 	ldw	r2,-24(fp)
    9ca4:	10800317 	ldw	r2,12(r2)
    9ca8:	e13ff917 	ldw	r4,-28(fp)
    9cac:	e17ffb17 	ldw	r5,-20(fp)
    9cb0:	e1bffc17 	ldw	r6,-16(fp)
    9cb4:	e1fffd17 	ldw	r7,-12(fp)
    9cb8:	103ee83a 	callr	r2
    9cbc:	e0bfff15 	stw	r2,-4(fp)
    9cc0:	00000106 	br	9cc8 <open+0x128>
    9cc4:	e03fff15 	stw	zero,-4(fp)
    9cc8:	e0bfff17 	ldw	r2,-4(fp)
    9ccc:	e0bff715 	stw	r2,-36(fp)
    9cd0:	00000206 	br	9cdc <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9cd4:	00bffb44 	movi	r2,-19
    9cd8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9cdc:	e0bff717 	ldw	r2,-36(fp)
    9ce0:	1004403a 	cmpge	r2,r2,zero
    9ce4:	1000091e 	bne	r2,zero,9d0c <open+0x16c>
  {
    alt_release_fd (index);  
    9ce8:	e13ff817 	ldw	r4,-32(fp)
    9cec:	0009d8c0 	call	9d8c <alt_release_fd>
    ALT_ERRNO = -status;
    9cf0:	0009d2c0 	call	9d2c <alt_get_errno>
    9cf4:	e0fff717 	ldw	r3,-36(fp)
    9cf8:	00c7c83a 	sub	r3,zero,r3
    9cfc:	10c00015 	stw	r3,0(r2)
    return -1;
    9d00:	00bfffc4 	movi	r2,-1
    9d04:	e0bffe15 	stw	r2,-8(fp)
    9d08:	00000206 	br	9d14 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    9d0c:	e0bff817 	ldw	r2,-32(fp)
    9d10:	e0bffe15 	stw	r2,-8(fp)
    9d14:	e0bffe17 	ldw	r2,-8(fp)
}
    9d18:	e037883a 	mov	sp,fp
    9d1c:	dfc00117 	ldw	ra,4(sp)
    9d20:	df000017 	ldw	fp,0(sp)
    9d24:	dec00204 	addi	sp,sp,8
    9d28:	f800283a 	ret

00009d2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9d2c:	defffd04 	addi	sp,sp,-12
    9d30:	dfc00215 	stw	ra,8(sp)
    9d34:	df000115 	stw	fp,4(sp)
    9d38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9d3c:	00800074 	movhi	r2,1
    9d40:	10aa8c04 	addi	r2,r2,-21968
    9d44:	10800017 	ldw	r2,0(r2)
    9d48:	1005003a 	cmpeq	r2,r2,zero
    9d4c:	1000061e 	bne	r2,zero,9d68 <alt_get_errno+0x3c>
    9d50:	00800074 	movhi	r2,1
    9d54:	10aa8c04 	addi	r2,r2,-21968
    9d58:	10800017 	ldw	r2,0(r2)
    9d5c:	103ee83a 	callr	r2
    9d60:	e0bfff15 	stw	r2,-4(fp)
    9d64:	00000306 	br	9d74 <alt_get_errno+0x48>
    9d68:	00800074 	movhi	r2,1
    9d6c:	10ab4204 	addi	r2,r2,-21240
    9d70:	e0bfff15 	stw	r2,-4(fp)
    9d74:	e0bfff17 	ldw	r2,-4(fp)
}
    9d78:	e037883a 	mov	sp,fp
    9d7c:	dfc00117 	ldw	ra,4(sp)
    9d80:	df000017 	ldw	fp,0(sp)
    9d84:	dec00204 	addi	sp,sp,8
    9d88:	f800283a 	ret

00009d8c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9d8c:	defffc04 	addi	sp,sp,-16
    9d90:	dfc00315 	stw	ra,12(sp)
    9d94:	df000215 	stw	fp,8(sp)
    9d98:	dc000115 	stw	r16,4(sp)
    9d9c:	df000104 	addi	fp,sp,4
    9da0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9da4:	e0bfff17 	ldw	r2,-4(fp)
    9da8:	108000d0 	cmplti	r2,r2,3
    9dac:	10000f1e 	bne	r2,zero,9dec <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    9db0:	e13fff17 	ldw	r4,-4(fp)
    9db4:	04000074 	movhi	r16,1
    9db8:	842a2504 	addi	r16,r16,-22380
    9dbc:	01400304 	movi	r5,12
    9dc0:	0008fb00 	call	8fb0 <__mulsi3>
    9dc4:	1405883a 	add	r2,r2,r16
    9dc8:	10800204 	addi	r2,r2,8
    9dcc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9dd0:	e13fff17 	ldw	r4,-4(fp)
    9dd4:	04000074 	movhi	r16,1
    9dd8:	842a2504 	addi	r16,r16,-22380
    9ddc:	01400304 	movi	r5,12
    9de0:	0008fb00 	call	8fb0 <__mulsi3>
    9de4:	1405883a 	add	r2,r2,r16
    9de8:	10000015 	stw	zero,0(r2)
  }
}
    9dec:	e037883a 	mov	sp,fp
    9df0:	dfc00217 	ldw	ra,8(sp)
    9df4:	df000117 	ldw	fp,4(sp)
    9df8:	dc000017 	ldw	r16,0(sp)
    9dfc:	dec00304 	addi	sp,sp,12
    9e00:	f800283a 	ret

00009e04 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    9e04:	deffff04 	addi	sp,sp,-4
    9e08:	df000015 	stw	fp,0(sp)
    9e0c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9e10:	000170fa 	wrctl	ienable,zero
}
    9e14:	e037883a 	mov	sp,fp
    9e18:	df000017 	ldw	fp,0(sp)
    9e1c:	dec00104 	addi	sp,sp,4
    9e20:	f800283a 	ret

00009e24 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9e24:	defff904 	addi	sp,sp,-28
    9e28:	dfc00615 	stw	ra,24(sp)
    9e2c:	df000515 	stw	fp,20(sp)
    9e30:	df000504 	addi	fp,sp,20
    9e34:	e13ffd15 	stw	r4,-12(fp)
    9e38:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9e3c:	e0bffe17 	ldw	r2,-8(fp)
    9e40:	10800017 	ldw	r2,0(r2)
    9e44:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9e48:	e13ffd17 	ldw	r4,-12(fp)
    9e4c:	00084ec0 	call	84ec <strlen>
    9e50:	10800044 	addi	r2,r2,1
    9e54:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9e58:	00000d06 	br	9e90 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9e5c:	e0bffc17 	ldw	r2,-16(fp)
    9e60:	11000217 	ldw	r4,8(r2)
    9e64:	e1bffb17 	ldw	r6,-20(fp)
    9e68:	e17ffd17 	ldw	r5,-12(fp)
    9e6c:	000a0dc0 	call	a0dc <memcmp>
    9e70:	1004c03a 	cmpne	r2,r2,zero
    9e74:	1000031e 	bne	r2,zero,9e84 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9e78:	e0bffc17 	ldw	r2,-16(fp)
    9e7c:	e0bfff15 	stw	r2,-4(fp)
    9e80:	00000706 	br	9ea0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9e84:	e0bffc17 	ldw	r2,-16(fp)
    9e88:	10800017 	ldw	r2,0(r2)
    9e8c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9e90:	e0fffe17 	ldw	r3,-8(fp)
    9e94:	e0bffc17 	ldw	r2,-16(fp)
    9e98:	10fff01e 	bne	r2,r3,9e5c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9e9c:	e03fff15 	stw	zero,-4(fp)
    9ea0:	e0bfff17 	ldw	r2,-4(fp)
}
    9ea4:	e037883a 	mov	sp,fp
    9ea8:	dfc00117 	ldw	ra,4(sp)
    9eac:	df000017 	ldw	fp,0(sp)
    9eb0:	dec00204 	addi	sp,sp,8
    9eb4:	f800283a 	ret

00009eb8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9eb8:	defffa04 	addi	sp,sp,-24
    9ebc:	dfc00515 	stw	ra,20(sp)
    9ec0:	df000415 	stw	fp,16(sp)
    9ec4:	df000404 	addi	fp,sp,16
    9ec8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9ecc:	00800074 	movhi	r2,1
    9ed0:	10aa8704 	addi	r2,r2,-21988
    9ed4:	10800017 	ldw	r2,0(r2)
    9ed8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9edc:	00003306 	br	9fac <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    9ee0:	e0bffd17 	ldw	r2,-12(fp)
    9ee4:	11000217 	ldw	r4,8(r2)
    9ee8:	00084ec0 	call	84ec <strlen>
    9eec:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    9ef0:	e0bffd17 	ldw	r2,-12(fp)
    9ef4:	10c00217 	ldw	r3,8(r2)
    9ef8:	e0bffc17 	ldw	r2,-16(fp)
    9efc:	1885883a 	add	r2,r3,r2
    9f00:	10bfffc4 	addi	r2,r2,-1
    9f04:	10800003 	ldbu	r2,0(r2)
    9f08:	10803fcc 	andi	r2,r2,255
    9f0c:	1080201c 	xori	r2,r2,128
    9f10:	10bfe004 	addi	r2,r2,-128
    9f14:	10800bd8 	cmpnei	r2,r2,47
    9f18:	1000031e 	bne	r2,zero,9f28 <alt_find_file+0x70>
    {
      len -= 1;
    9f1c:	e0bffc17 	ldw	r2,-16(fp)
    9f20:	10bfffc4 	addi	r2,r2,-1
    9f24:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9f28:	e0bffc17 	ldw	r2,-16(fp)
    9f2c:	1007883a 	mov	r3,r2
    9f30:	e0bffe17 	ldw	r2,-8(fp)
    9f34:	1885883a 	add	r2,r3,r2
    9f38:	10800003 	ldbu	r2,0(r2)
    9f3c:	10803fcc 	andi	r2,r2,255
    9f40:	1080201c 	xori	r2,r2,128
    9f44:	10bfe004 	addi	r2,r2,-128
    9f48:	10800be0 	cmpeqi	r2,r2,47
    9f4c:	10000a1e 	bne	r2,zero,9f78 <alt_find_file+0xc0>
    9f50:	e0bffc17 	ldw	r2,-16(fp)
    9f54:	1007883a 	mov	r3,r2
    9f58:	e0bffe17 	ldw	r2,-8(fp)
    9f5c:	1885883a 	add	r2,r3,r2
    9f60:	10800003 	ldbu	r2,0(r2)
    9f64:	10803fcc 	andi	r2,r2,255
    9f68:	1080201c 	xori	r2,r2,128
    9f6c:	10bfe004 	addi	r2,r2,-128
    9f70:	1004c03a 	cmpne	r2,r2,zero
    9f74:	10000a1e 	bne	r2,zero,9fa0 <alt_find_file+0xe8>
    9f78:	e0bffd17 	ldw	r2,-12(fp)
    9f7c:	11000217 	ldw	r4,8(r2)
    9f80:	e1bffc17 	ldw	r6,-16(fp)
    9f84:	e17ffe17 	ldw	r5,-8(fp)
    9f88:	000a0dc0 	call	a0dc <memcmp>
    9f8c:	1004c03a 	cmpne	r2,r2,zero
    9f90:	1000031e 	bne	r2,zero,9fa0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9f94:	e0bffd17 	ldw	r2,-12(fp)
    9f98:	e0bfff15 	stw	r2,-4(fp)
    9f9c:	00000806 	br	9fc0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    9fa0:	e0bffd17 	ldw	r2,-12(fp)
    9fa4:	10800017 	ldw	r2,0(r2)
    9fa8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9fac:	00c00074 	movhi	r3,1
    9fb0:	18ea8704 	addi	r3,r3,-21988
    9fb4:	e0bffd17 	ldw	r2,-12(fp)
    9fb8:	10ffc91e 	bne	r2,r3,9ee0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9fbc:	e03fff15 	stw	zero,-4(fp)
    9fc0:	e0bfff17 	ldw	r2,-4(fp)
}
    9fc4:	e037883a 	mov	sp,fp
    9fc8:	dfc00117 	ldw	ra,4(sp)
    9fcc:	df000017 	ldw	fp,0(sp)
    9fd0:	dec00204 	addi	sp,sp,8
    9fd4:	f800283a 	ret

00009fd8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9fd8:	defffa04 	addi	sp,sp,-24
    9fdc:	dfc00515 	stw	ra,20(sp)
    9fe0:	df000415 	stw	fp,16(sp)
    9fe4:	dc000315 	stw	r16,12(sp)
    9fe8:	df000304 	addi	fp,sp,12
    9fec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    9ff0:	00bffa04 	movi	r2,-24
    9ff4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9ff8:	e03ffe15 	stw	zero,-8(fp)
    9ffc:	00002006 	br	a080 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    a000:	e13ffe17 	ldw	r4,-8(fp)
    a004:	04000074 	movhi	r16,1
    a008:	842a2504 	addi	r16,r16,-22380
    a00c:	01400304 	movi	r5,12
    a010:	0008fb00 	call	8fb0 <__mulsi3>
    a014:	1405883a 	add	r2,r2,r16
    a018:	10800017 	ldw	r2,0(r2)
    a01c:	1004c03a 	cmpne	r2,r2,zero
    a020:	1000141e 	bne	r2,zero,a074 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    a024:	e13ffe17 	ldw	r4,-8(fp)
    a028:	04000074 	movhi	r16,1
    a02c:	842a2504 	addi	r16,r16,-22380
    a030:	01400304 	movi	r5,12
    a034:	0008fb00 	call	8fb0 <__mulsi3>
    a038:	1407883a 	add	r3,r2,r16
    a03c:	e0bfff17 	ldw	r2,-4(fp)
    a040:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    a044:	00800074 	movhi	r2,1
    a048:	10aa8b04 	addi	r2,r2,-21972
    a04c:	10c00017 	ldw	r3,0(r2)
    a050:	e0bffe17 	ldw	r2,-8(fp)
    a054:	1880040e 	bge	r3,r2,a068 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    a058:	00c00074 	movhi	r3,1
    a05c:	18ea8b04 	addi	r3,r3,-21972
    a060:	e0bffe17 	ldw	r2,-8(fp)
    a064:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    a068:	e0bffe17 	ldw	r2,-8(fp)
    a06c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a070:	00000606 	br	a08c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a074:	e0bffe17 	ldw	r2,-8(fp)
    a078:	10800044 	addi	r2,r2,1
    a07c:	e0bffe15 	stw	r2,-8(fp)
    a080:	e0bffe17 	ldw	r2,-8(fp)
    a084:	10800810 	cmplti	r2,r2,32
    a088:	103fdd1e 	bne	r2,zero,a000 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a08c:	e0bffd17 	ldw	r2,-12(fp)
}
    a090:	e037883a 	mov	sp,fp
    a094:	dfc00217 	ldw	ra,8(sp)
    a098:	df000117 	ldw	fp,4(sp)
    a09c:	dc000017 	ldw	r16,0(sp)
    a0a0:	dec00304 	addi	sp,sp,12
    a0a4:	f800283a 	ret

0000a0a8 <atexit>:
    a0a8:	200b883a 	mov	r5,r4
    a0ac:	000d883a 	mov	r6,zero
    a0b0:	0009883a 	mov	r4,zero
    a0b4:	000f883a 	mov	r7,zero
    a0b8:	000a1181 	jmpi	a118 <__register_exitproc>

0000a0bc <exit>:
    a0bc:	defffe04 	addi	sp,sp,-8
    a0c0:	dc400015 	stw	r17,0(sp)
    a0c4:	000b883a 	mov	r5,zero
    a0c8:	2023883a 	mov	r17,r4
    a0cc:	dfc00115 	stw	ra,4(sp)
    a0d0:	000a2880 	call	a288 <__call_exitprocs>
    a0d4:	8809883a 	mov	r4,r17
    a0d8:	000a4840 	call	a484 <_exit>

0000a0dc <memcmp>:
    a0dc:	31ffffc4 	addi	r7,r6,-1
    a0e0:	3000061e 	bne	r6,zero,a0fc <memcmp+0x20>
    a0e4:	00000a06 	br	a110 <memcmp+0x34>
    a0e8:	39ffffc4 	addi	r7,r7,-1
    a0ec:	00bfffc4 	movi	r2,-1
    a0f0:	21000044 	addi	r4,r4,1
    a0f4:	29400044 	addi	r5,r5,1
    a0f8:	38800526 	beq	r7,r2,a110 <memcmp+0x34>
    a0fc:	20c00003 	ldbu	r3,0(r4)
    a100:	28800003 	ldbu	r2,0(r5)
    a104:	18bff826 	beq	r3,r2,a0e8 <memcmp+0xc>
    a108:	1885c83a 	sub	r2,r3,r2
    a10c:	f800283a 	ret
    a110:	0005883a 	mov	r2,zero
    a114:	f800283a 	ret

0000a118 <__register_exitproc>:
    a118:	defff904 	addi	sp,sp,-28
    a11c:	00800074 	movhi	r2,1
    a120:	10aa8604 	addi	r2,r2,-21992
    a124:	dc400115 	stw	r17,4(sp)
    a128:	14400017 	ldw	r17,0(r2)
    a12c:	dc000015 	stw	r16,0(sp)
    a130:	dd400515 	stw	r21,20(sp)
    a134:	8c000c17 	ldw	r16,48(r17)
    a138:	dd000415 	stw	r20,16(sp)
    a13c:	dcc00315 	stw	r19,12(sp)
    a140:	dc800215 	stw	r18,8(sp)
    a144:	dfc00615 	stw	ra,24(sp)
    a148:	2025883a 	mov	r18,r4
    a14c:	282b883a 	mov	r21,r5
    a150:	3029883a 	mov	r20,r6
    a154:	3827883a 	mov	r19,r7
    a158:	80002626 	beq	r16,zero,a1f4 <__register_exitproc+0xdc>
    a15c:	81400117 	ldw	r5,4(r16)
    a160:	008007c4 	movi	r2,31
    a164:	11403716 	blt	r2,r5,a244 <__register_exitproc+0x12c>
    a168:	90002026 	beq	r18,zero,a1ec <__register_exitproc+0xd4>
    a16c:	81802217 	ldw	r6,136(r16)
    a170:	30002926 	beq	r6,zero,a218 <__register_exitproc+0x100>
    a174:	81400117 	ldw	r5,4(r16)
    a178:	00c00044 	movi	r3,1
    a17c:	31004017 	ldw	r4,256(r6)
    a180:	1946983a 	sll	r3,r3,r5
    a184:	2945883a 	add	r2,r5,r5
    a188:	1085883a 	add	r2,r2,r2
    a18c:	1185883a 	add	r2,r2,r6
    a190:	20c8b03a 	or	r4,r4,r3
    a194:	14c02015 	stw	r19,128(r2)
    a198:	15000015 	stw	r20,0(r2)
    a19c:	00800084 	movi	r2,2
    a1a0:	31004015 	stw	r4,256(r6)
    a1a4:	90801826 	beq	r18,r2,a208 <__register_exitproc+0xf0>
    a1a8:	2945883a 	add	r2,r5,r5
    a1ac:	1085883a 	add	r2,r2,r2
    a1b0:	1405883a 	add	r2,r2,r16
    a1b4:	28c00044 	addi	r3,r5,1
    a1b8:	0009883a 	mov	r4,zero
    a1bc:	15400215 	stw	r21,8(r2)
    a1c0:	80c00115 	stw	r3,4(r16)
    a1c4:	2005883a 	mov	r2,r4
    a1c8:	dfc00617 	ldw	ra,24(sp)
    a1cc:	dd400517 	ldw	r21,20(sp)
    a1d0:	dd000417 	ldw	r20,16(sp)
    a1d4:	dcc00317 	ldw	r19,12(sp)
    a1d8:	dc800217 	ldw	r18,8(sp)
    a1dc:	dc400117 	ldw	r17,4(sp)
    a1e0:	dc000017 	ldw	r16,0(sp)
    a1e4:	dec00704 	addi	sp,sp,28
    a1e8:	f800283a 	ret
    a1ec:	81400117 	ldw	r5,4(r16)
    a1f0:	003fed06 	br	a1a8 <__register_exitproc+0x90>
    a1f4:	00800074 	movhi	r2,1
    a1f8:	10ab4604 	addi	r2,r2,-21224
    a1fc:	1021883a 	mov	r16,r2
    a200:	88800c15 	stw	r2,48(r17)
    a204:	003fd506 	br	a15c <__register_exitproc+0x44>
    a208:	30804117 	ldw	r2,260(r6)
    a20c:	10c4b03a 	or	r2,r2,r3
    a210:	30804115 	stw	r2,260(r6)
    a214:	003fe406 	br	a1a8 <__register_exitproc+0x90>
    a218:	00800034 	movhi	r2,0
    a21c:	10800004 	addi	r2,r2,0
    a220:	10000b26 	beq	r2,zero,a250 <__register_exitproc+0x138>
    a224:	01004204 	movi	r4,264
    a228:	103ee83a 	callr	r2
    a22c:	10000826 	beq	r2,zero,a250 <__register_exitproc+0x138>
    a230:	100d883a 	mov	r6,r2
    a234:	10004015 	stw	zero,256(r2)
    a238:	10004115 	stw	zero,260(r2)
    a23c:	80802215 	stw	r2,136(r16)
    a240:	003fcc06 	br	a174 <__register_exitproc+0x5c>
    a244:	00800034 	movhi	r2,0
    a248:	10800004 	addi	r2,r2,0
    a24c:	1000021e 	bne	r2,zero,a258 <__register_exitproc+0x140>
    a250:	013fffc4 	movi	r4,-1
    a254:	003fdb06 	br	a1c4 <__register_exitproc+0xac>
    a258:	01002304 	movi	r4,140
    a25c:	103ee83a 	callr	r2
    a260:	1007883a 	mov	r3,r2
    a264:	103ffa26 	beq	r2,zero,a250 <__register_exitproc+0x138>
    a268:	88800c17 	ldw	r2,48(r17)
    a26c:	1821883a 	mov	r16,r3
    a270:	18000115 	stw	zero,4(r3)
    a274:	18800015 	stw	r2,0(r3)
    a278:	88c00c15 	stw	r3,48(r17)
    a27c:	903fdb26 	beq	r18,zero,a1ec <__register_exitproc+0xd4>
    a280:	003fba06 	br	a16c <__register_exitproc+0x54>

0000a284 <register_fini>:
    a284:	f800283a 	ret

0000a288 <__call_exitprocs>:
    a288:	defff304 	addi	sp,sp,-52
    a28c:	00800074 	movhi	r2,1
    a290:	10aa8604 	addi	r2,r2,-21992
    a294:	df000b15 	stw	fp,44(sp)
    a298:	17000017 	ldw	fp,0(r2)
    a29c:	00800034 	movhi	r2,0
    a2a0:	10800004 	addi	r2,r2,0
    a2a4:	1005003a 	cmpeq	r2,r2,zero
    a2a8:	d8800215 	stw	r2,8(sp)
    a2ac:	e0800c04 	addi	r2,fp,48
    a2b0:	dd800915 	stw	r22,36(sp)
    a2b4:	dd400815 	stw	r21,32(sp)
    a2b8:	dfc00c15 	stw	ra,48(sp)
    a2bc:	ddc00a15 	stw	r23,40(sp)
    a2c0:	dd000715 	stw	r20,28(sp)
    a2c4:	dcc00615 	stw	r19,24(sp)
    a2c8:	dc800515 	stw	r18,20(sp)
    a2cc:	dc400415 	stw	r17,16(sp)
    a2d0:	dc000315 	stw	r16,12(sp)
    a2d4:	282d883a 	mov	r22,r5
    a2d8:	d9000115 	stw	r4,4(sp)
    a2dc:	d8800015 	stw	r2,0(sp)
    a2e0:	282b003a 	cmpeq	r21,r5,zero
    a2e4:	e4400c17 	ldw	r17,48(fp)
    a2e8:	88001226 	beq	r17,zero,a334 <__call_exitprocs+0xac>
    a2ec:	ddc00017 	ldw	r23,0(sp)
    a2f0:	88800117 	ldw	r2,4(r17)
    a2f4:	8c802217 	ldw	r18,136(r17)
    a2f8:	143fffc4 	addi	r16,r2,-1
    a2fc:	80000b16 	blt	r16,zero,a32c <__call_exitprocs+0xa4>
    a300:	9027003a 	cmpeq	r19,r18,zero
    a304:	a800171e 	bne	r21,zero,a364 <__call_exitprocs+0xdc>
    a308:	9800051e 	bne	r19,zero,a320 <__call_exitprocs+0x98>
    a30c:	8409883a 	add	r4,r16,r16
    a310:	2105883a 	add	r2,r4,r4
    a314:	1485883a 	add	r2,r2,r18
    a318:	10c02017 	ldw	r3,128(r2)
    a31c:	b0c01226 	beq	r22,r3,a368 <__call_exitprocs+0xe0>
    a320:	843fffc4 	addi	r16,r16,-1
    a324:	00bfffc4 	movi	r2,-1
    a328:	80bff61e 	bne	r16,r2,a304 <__call_exitprocs+0x7c>
    a32c:	d8800217 	ldw	r2,8(sp)
    a330:	10003226 	beq	r2,zero,a3fc <__call_exitprocs+0x174>
    a334:	dfc00c17 	ldw	ra,48(sp)
    a338:	df000b17 	ldw	fp,44(sp)
    a33c:	ddc00a17 	ldw	r23,40(sp)
    a340:	dd800917 	ldw	r22,36(sp)
    a344:	dd400817 	ldw	r21,32(sp)
    a348:	dd000717 	ldw	r20,28(sp)
    a34c:	dcc00617 	ldw	r19,24(sp)
    a350:	dc800517 	ldw	r18,20(sp)
    a354:	dc400417 	ldw	r17,16(sp)
    a358:	dc000317 	ldw	r16,12(sp)
    a35c:	dec00d04 	addi	sp,sp,52
    a360:	f800283a 	ret
    a364:	8409883a 	add	r4,r16,r16
    a368:	88c00117 	ldw	r3,4(r17)
    a36c:	2105883a 	add	r2,r4,r4
    a370:	1445883a 	add	r2,r2,r17
    a374:	18ffffc4 	addi	r3,r3,-1
    a378:	11800217 	ldw	r6,8(r2)
    a37c:	1c001826 	beq	r3,r16,a3e0 <__call_exitprocs+0x158>
    a380:	10000215 	stw	zero,8(r2)
    a384:	303fe626 	beq	r6,zero,a320 <__call_exitprocs+0x98>
    a388:	8d000117 	ldw	r20,4(r17)
    a38c:	9800121e 	bne	r19,zero,a3d8 <__call_exitprocs+0x150>
    a390:	00c00044 	movi	r3,1
    a394:	1c06983a 	sll	r3,r3,r16
    a398:	90804017 	ldw	r2,256(r18)
    a39c:	1884703a 	and	r2,r3,r2
    a3a0:	10000d26 	beq	r2,zero,a3d8 <__call_exitprocs+0x150>
    a3a4:	90804117 	ldw	r2,260(r18)
    a3a8:	1884703a 	and	r2,r3,r2
    a3ac:	10000e1e 	bne	r2,zero,a3e8 <__call_exitprocs+0x160>
    a3b0:	2105883a 	add	r2,r4,r4
    a3b4:	1485883a 	add	r2,r2,r18
    a3b8:	11400017 	ldw	r5,0(r2)
    a3bc:	d9000117 	ldw	r4,4(sp)
    a3c0:	303ee83a 	callr	r6
    a3c4:	88800117 	ldw	r2,4(r17)
    a3c8:	a0bfc61e 	bne	r20,r2,a2e4 <__call_exitprocs+0x5c>
    a3cc:	b8800017 	ldw	r2,0(r23)
    a3d0:	147fd326 	beq	r2,r17,a320 <__call_exitprocs+0x98>
    a3d4:	003fc306 	br	a2e4 <__call_exitprocs+0x5c>
    a3d8:	303ee83a 	callr	r6
    a3dc:	003ff906 	br	a3c4 <__call_exitprocs+0x13c>
    a3e0:	8c000115 	stw	r16,4(r17)
    a3e4:	003fe706 	br	a384 <__call_exitprocs+0xfc>
    a3e8:	2105883a 	add	r2,r4,r4
    a3ec:	1485883a 	add	r2,r2,r18
    a3f0:	11000017 	ldw	r4,0(r2)
    a3f4:	303ee83a 	callr	r6
    a3f8:	003ff206 	br	a3c4 <__call_exitprocs+0x13c>
    a3fc:	88800117 	ldw	r2,4(r17)
    a400:	10000b1e 	bne	r2,zero,a430 <__call_exitprocs+0x1a8>
    a404:	89000017 	ldw	r4,0(r17)
    a408:	20000a26 	beq	r4,zero,a434 <__call_exitprocs+0x1ac>
    a40c:	b9000015 	stw	r4,0(r23)
    a410:	90000226 	beq	r18,zero,a41c <__call_exitprocs+0x194>
    a414:	9009883a 	mov	r4,r18
    a418:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a41c:	8809883a 	mov	r4,r17
    a420:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a424:	bc400017 	ldw	r17,0(r23)
    a428:	883fb11e 	bne	r17,zero,a2f0 <__call_exitprocs+0x68>
    a42c:	003fc106 	br	a334 <__call_exitprocs+0xac>
    a430:	89000017 	ldw	r4,0(r17)
    a434:	882f883a 	mov	r23,r17
    a438:	2023883a 	mov	r17,r4
    a43c:	883fac1e 	bne	r17,zero,a2f0 <__call_exitprocs+0x68>
    a440:	003fbc06 	br	a334 <__call_exitprocs+0xac>

0000a444 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    a444:	defffd04 	addi	sp,sp,-12
    a448:	df000215 	stw	fp,8(sp)
    a44c:	df000204 	addi	fp,sp,8
    a450:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    a454:	e0bfff17 	ldw	r2,-4(fp)
    a458:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a45c:	e0bffe17 	ldw	r2,-8(fp)
    a460:	1005003a 	cmpeq	r2,r2,zero
    a464:	1000021e 	bne	r2,zero,a470 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    a468:	002af070 	cmpltui	zero,zero,43969
    a46c:	00000106 	br	a474 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    a470:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    a474:	e037883a 	mov	sp,fp
    a478:	df000017 	ldw	fp,0(sp)
    a47c:	dec00104 	addi	sp,sp,4
    a480:	f800283a 	ret

0000a484 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a484:	defffd04 	addi	sp,sp,-12
    a488:	dfc00215 	stw	ra,8(sp)
    a48c:	df000115 	stw	fp,4(sp)
    a490:	df000104 	addi	fp,sp,4
    a494:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    a498:	e13fff17 	ldw	r4,-4(fp)
    a49c:	000a4440 	call	a444 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a4a0:	003fff06 	br	a4a0 <_exit+0x1c>
    a4a4:	0000a284 	movi	zero,650
