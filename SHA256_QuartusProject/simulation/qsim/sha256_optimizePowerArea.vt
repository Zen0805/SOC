// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2025 01:09:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    IP_wrapper
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module IP_wrapper_vlg_sample_tst(
	iAddress,
	iChipselect_n,
	iClk,
	iData,
	iRead_n,
	iReset_n,
	iWrite_n,
	sampler_tx
);
input [4:0] iAddress;
input  iChipselect_n;
input  iClk;
input [31:0] iData;
input  iRead_n;
input  iReset_n;
input  iWrite_n;
output sampler_tx;

reg sample;
time current_time;
always @(iAddress or iChipselect_n or iClk or iData or iRead_n or iReset_n or iWrite_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module IP_wrapper_vlg_check_tst (
	DATA_IN,
	DATA_VALID,
	START,
	load_counter,
	oData,
	state_ctrl,
	sampler_rx
);
input [31:0] DATA_IN;
input  DATA_VALID;
input  START;
input [3:0] load_counter;
input [31:0] oData;
input  state_ctrl;
input sampler_rx;

reg [31:0] DATA_IN_expected;
reg  DATA_VALID_expected;
reg  START_expected;
reg [3:0] load_counter_expected;
reg [31:0] oData_expected;
reg  state_ctrl_expected;

reg [31:0] DATA_IN_prev;
reg  DATA_VALID_prev;
reg  START_prev;
reg [3:0] load_counter_prev;
reg [31:0] oData_prev;
reg  state_ctrl_prev;

reg [31:0] DATA_IN_expected_prev;
reg  DATA_VALID_expected_prev;
reg  START_expected_prev;
reg [3:0] load_counter_expected_prev;
reg [31:0] oData_expected_prev;
reg  state_ctrl_expected_prev;

reg [31:0] last_DATA_IN_exp;
reg  last_DATA_VALID_exp;
reg  last_START_exp;
reg [3:0] last_load_counter_exp;
reg [31:0] last_oData_exp;
reg  last_state_ctrl_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	DATA_IN_prev = DATA_IN;
	DATA_VALID_prev = DATA_VALID;
	START_prev = START;
	load_counter_prev = load_counter;
	oData_prev = oData;
	state_ctrl_prev = state_ctrl;
end

// update expected /o prevs

always @(trigger)
begin
	DATA_IN_expected_prev = DATA_IN_expected;
	DATA_VALID_expected_prev = DATA_VALID_expected;
	START_expected_prev = START_expected;
	load_counter_expected_prev = load_counter_expected;
	oData_expected_prev = oData_expected;
	state_ctrl_expected_prev = state_ctrl_expected;
end


// expected oData[ 31 ]
initial
begin
	oData_expected[31] = 1'bX;
end 
// expected oData[ 30 ]
initial
begin
	oData_expected[30] = 1'bX;
end 
// expected oData[ 29 ]
initial
begin
	oData_expected[29] = 1'bX;
end 
// expected oData[ 28 ]
initial
begin
	oData_expected[28] = 1'bX;
end 
// expected oData[ 27 ]
initial
begin
	oData_expected[27] = 1'bX;
end 
// expected oData[ 26 ]
initial
begin
	oData_expected[26] = 1'bX;
end 
// expected oData[ 25 ]
initial
begin
	oData_expected[25] = 1'bX;
end 
// expected oData[ 24 ]
initial
begin
	oData_expected[24] = 1'bX;
end 
// expected oData[ 23 ]
initial
begin
	oData_expected[23] = 1'bX;
end 
// expected oData[ 22 ]
initial
begin
	oData_expected[22] = 1'bX;
end 
// expected oData[ 21 ]
initial
begin
	oData_expected[21] = 1'bX;
end 
// expected oData[ 20 ]
initial
begin
	oData_expected[20] = 1'bX;
end 
// expected oData[ 19 ]
initial
begin
	oData_expected[19] = 1'bX;
end 
// expected oData[ 18 ]
initial
begin
	oData_expected[18] = 1'bX;
end 
// expected oData[ 17 ]
initial
begin
	oData_expected[17] = 1'bX;
end 
// expected oData[ 16 ]
initial
begin
	oData_expected[16] = 1'bX;
end 
// expected oData[ 15 ]
initial
begin
	oData_expected[15] = 1'bX;
end 
// expected oData[ 14 ]
initial
begin
	oData_expected[14] = 1'bX;
end 
// expected oData[ 13 ]
initial
begin
	oData_expected[13] = 1'bX;
end 
// expected oData[ 12 ]
initial
begin
	oData_expected[12] = 1'bX;
end 
// expected oData[ 11 ]
initial
begin
	oData_expected[11] = 1'bX;
end 
// expected oData[ 10 ]
initial
begin
	oData_expected[10] = 1'bX;
end 
// expected oData[ 9 ]
initial
begin
	oData_expected[9] = 1'bX;
end 
// expected oData[ 8 ]
initial
begin
	oData_expected[8] = 1'bX;
end 
// expected oData[ 7 ]
initial
begin
	oData_expected[7] = 1'bX;
end 
// expected oData[ 6 ]
initial
begin
	oData_expected[6] = 1'bX;
end 
// expected oData[ 5 ]
initial
begin
	oData_expected[5] = 1'bX;
end 
// expected oData[ 4 ]
initial
begin
	oData_expected[4] = 1'bX;
end 
// expected oData[ 3 ]
initial
begin
	oData_expected[3] = 1'bX;
end 
// expected oData[ 2 ]
initial
begin
	oData_expected[2] = 1'bX;
end 
// expected oData[ 1 ]
initial
begin
	oData_expected[1] = 1'bX;
end 
// expected oData[ 0 ]
initial
begin
	oData_expected[0] = 1'bX;
end 

// expected DATA_VALID
initial
begin
	DATA_VALID_expected = 1'bX;
end 
// expected load_counter[ 3 ]
initial
begin
	load_counter_expected[3] = 1'bX;
end 
// expected load_counter[ 2 ]
initial
begin
	load_counter_expected[2] = 1'bX;
end 
// expected load_counter[ 1 ]
initial
begin
	load_counter_expected[1] = 1'bX;
end 
// expected load_counter[ 0 ]
initial
begin
	load_counter_expected[0] = 1'bX;
end 
// expected DATA_IN[ 31 ]
initial
begin
	DATA_IN_expected[31] = 1'bX;
end 
// expected DATA_IN[ 30 ]
initial
begin
	DATA_IN_expected[30] = 1'bX;
end 
// expected DATA_IN[ 29 ]
initial
begin
	DATA_IN_expected[29] = 1'bX;
end 
// expected DATA_IN[ 28 ]
initial
begin
	DATA_IN_expected[28] = 1'bX;
end 
// expected DATA_IN[ 27 ]
initial
begin
	DATA_IN_expected[27] = 1'bX;
end 
// expected DATA_IN[ 26 ]
initial
begin
	DATA_IN_expected[26] = 1'bX;
end 
// expected DATA_IN[ 25 ]
initial
begin
	DATA_IN_expected[25] = 1'bX;
end 
// expected DATA_IN[ 24 ]
initial
begin
	DATA_IN_expected[24] = 1'bX;
end 
// expected DATA_IN[ 23 ]
initial
begin
	DATA_IN_expected[23] = 1'bX;
end 
// expected DATA_IN[ 22 ]
initial
begin
	DATA_IN_expected[22] = 1'bX;
end 
// expected DATA_IN[ 21 ]
initial
begin
	DATA_IN_expected[21] = 1'bX;
end 
// expected DATA_IN[ 20 ]
initial
begin
	DATA_IN_expected[20] = 1'bX;
end 
// expected DATA_IN[ 19 ]
initial
begin
	DATA_IN_expected[19] = 1'bX;
end 
// expected DATA_IN[ 18 ]
initial
begin
	DATA_IN_expected[18] = 1'bX;
end 
// expected DATA_IN[ 17 ]
initial
begin
	DATA_IN_expected[17] = 1'bX;
end 
// expected DATA_IN[ 16 ]
initial
begin
	DATA_IN_expected[16] = 1'bX;
end 
// expected DATA_IN[ 15 ]
initial
begin
	DATA_IN_expected[15] = 1'bX;
end 
// expected DATA_IN[ 14 ]
initial
begin
	DATA_IN_expected[14] = 1'bX;
end 
// expected DATA_IN[ 13 ]
initial
begin
	DATA_IN_expected[13] = 1'bX;
end 
// expected DATA_IN[ 12 ]
initial
begin
	DATA_IN_expected[12] = 1'bX;
end 
// expected DATA_IN[ 11 ]
initial
begin
	DATA_IN_expected[11] = 1'bX;
end 
// expected DATA_IN[ 10 ]
initial
begin
	DATA_IN_expected[10] = 1'bX;
end 
// expected DATA_IN[ 9 ]
initial
begin
	DATA_IN_expected[9] = 1'bX;
end 
// expected DATA_IN[ 8 ]
initial
begin
	DATA_IN_expected[8] = 1'bX;
end 
// expected DATA_IN[ 7 ]
initial
begin
	DATA_IN_expected[7] = 1'bX;
end 
// expected DATA_IN[ 6 ]
initial
begin
	DATA_IN_expected[6] = 1'bX;
end 
// expected DATA_IN[ 5 ]
initial
begin
	DATA_IN_expected[5] = 1'bX;
end 
// expected DATA_IN[ 4 ]
initial
begin
	DATA_IN_expected[4] = 1'bX;
end 
// expected DATA_IN[ 3 ]
initial
begin
	DATA_IN_expected[3] = 1'bX;
end 
// expected DATA_IN[ 2 ]
initial
begin
	DATA_IN_expected[2] = 1'bX;
end 
// expected DATA_IN[ 1 ]
initial
begin
	DATA_IN_expected[1] = 1'bX;
end 
// expected DATA_IN[ 0 ]
initial
begin
	DATA_IN_expected[0] = 1'bX;
end 

// expected START
initial
begin
	START_expected = 1'bX;
end 

// expected state_ctrl
initial
begin
	state_ctrl_expected = 1'bX;
end 
// generate trigger
always @(DATA_IN_expected or DATA_IN or DATA_VALID_expected or DATA_VALID or START_expected or START or load_counter_expected or load_counter or oData_expected or oData or state_ctrl_expected or state_ctrl)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DATA_IN = %b | expected DATA_VALID = %b | expected START = %b | expected load_counter = %b | expected oData = %b | expected state_ctrl = %b | ",DATA_IN_expected_prev,DATA_VALID_expected_prev,START_expected_prev,load_counter_expected_prev,oData_expected_prev,state_ctrl_expected_prev);
	$display("| real DATA_IN = %b | real DATA_VALID = %b | real START = %b | real load_counter = %b | real oData = %b | real state_ctrl = %b | ",DATA_IN_prev,DATA_VALID_prev,START_prev,load_counter_prev,oData_prev,state_ctrl_prev);
`endif
	if (
		( DATA_IN_expected_prev[0] !== 1'bx ) && ( DATA_IN_prev[0] !== DATA_IN_expected_prev[0] )
		&& ((DATA_IN_expected_prev[0] !== last_DATA_IN_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[0] = DATA_IN_expected_prev[0];
	end
	if (
		( DATA_IN_expected_prev[1] !== 1'bx ) && ( DATA_IN_prev[1] !== DATA_IN_expected_prev[1] )
		&& ((DATA_IN_expected_prev[1] !== last_DATA_IN_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[1] = DATA_IN_expected_prev[1];
	end
	if (
		( DATA_IN_expected_prev[2] !== 1'bx ) && ( DATA_IN_prev[2] !== DATA_IN_expected_prev[2] )
		&& ((DATA_IN_expected_prev[2] !== last_DATA_IN_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[2] = DATA_IN_expected_prev[2];
	end
	if (
		( DATA_IN_expected_prev[3] !== 1'bx ) && ( DATA_IN_prev[3] !== DATA_IN_expected_prev[3] )
		&& ((DATA_IN_expected_prev[3] !== last_DATA_IN_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[3] = DATA_IN_expected_prev[3];
	end
	if (
		( DATA_IN_expected_prev[4] !== 1'bx ) && ( DATA_IN_prev[4] !== DATA_IN_expected_prev[4] )
		&& ((DATA_IN_expected_prev[4] !== last_DATA_IN_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[4] = DATA_IN_expected_prev[4];
	end
	if (
		( DATA_IN_expected_prev[5] !== 1'bx ) && ( DATA_IN_prev[5] !== DATA_IN_expected_prev[5] )
		&& ((DATA_IN_expected_prev[5] !== last_DATA_IN_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[5] = DATA_IN_expected_prev[5];
	end
	if (
		( DATA_IN_expected_prev[6] !== 1'bx ) && ( DATA_IN_prev[6] !== DATA_IN_expected_prev[6] )
		&& ((DATA_IN_expected_prev[6] !== last_DATA_IN_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[6] = DATA_IN_expected_prev[6];
	end
	if (
		( DATA_IN_expected_prev[7] !== 1'bx ) && ( DATA_IN_prev[7] !== DATA_IN_expected_prev[7] )
		&& ((DATA_IN_expected_prev[7] !== last_DATA_IN_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[7] = DATA_IN_expected_prev[7];
	end
	if (
		( DATA_IN_expected_prev[8] !== 1'bx ) && ( DATA_IN_prev[8] !== DATA_IN_expected_prev[8] )
		&& ((DATA_IN_expected_prev[8] !== last_DATA_IN_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[8] = DATA_IN_expected_prev[8];
	end
	if (
		( DATA_IN_expected_prev[9] !== 1'bx ) && ( DATA_IN_prev[9] !== DATA_IN_expected_prev[9] )
		&& ((DATA_IN_expected_prev[9] !== last_DATA_IN_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[9] = DATA_IN_expected_prev[9];
	end
	if (
		( DATA_IN_expected_prev[10] !== 1'bx ) && ( DATA_IN_prev[10] !== DATA_IN_expected_prev[10] )
		&& ((DATA_IN_expected_prev[10] !== last_DATA_IN_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[10] = DATA_IN_expected_prev[10];
	end
	if (
		( DATA_IN_expected_prev[11] !== 1'bx ) && ( DATA_IN_prev[11] !== DATA_IN_expected_prev[11] )
		&& ((DATA_IN_expected_prev[11] !== last_DATA_IN_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[11] = DATA_IN_expected_prev[11];
	end
	if (
		( DATA_IN_expected_prev[12] !== 1'bx ) && ( DATA_IN_prev[12] !== DATA_IN_expected_prev[12] )
		&& ((DATA_IN_expected_prev[12] !== last_DATA_IN_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[12] = DATA_IN_expected_prev[12];
	end
	if (
		( DATA_IN_expected_prev[13] !== 1'bx ) && ( DATA_IN_prev[13] !== DATA_IN_expected_prev[13] )
		&& ((DATA_IN_expected_prev[13] !== last_DATA_IN_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[13] = DATA_IN_expected_prev[13];
	end
	if (
		( DATA_IN_expected_prev[14] !== 1'bx ) && ( DATA_IN_prev[14] !== DATA_IN_expected_prev[14] )
		&& ((DATA_IN_expected_prev[14] !== last_DATA_IN_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[14] = DATA_IN_expected_prev[14];
	end
	if (
		( DATA_IN_expected_prev[15] !== 1'bx ) && ( DATA_IN_prev[15] !== DATA_IN_expected_prev[15] )
		&& ((DATA_IN_expected_prev[15] !== last_DATA_IN_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[15] = DATA_IN_expected_prev[15];
	end
	if (
		( DATA_IN_expected_prev[16] !== 1'bx ) && ( DATA_IN_prev[16] !== DATA_IN_expected_prev[16] )
		&& ((DATA_IN_expected_prev[16] !== last_DATA_IN_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[16] = DATA_IN_expected_prev[16];
	end
	if (
		( DATA_IN_expected_prev[17] !== 1'bx ) && ( DATA_IN_prev[17] !== DATA_IN_expected_prev[17] )
		&& ((DATA_IN_expected_prev[17] !== last_DATA_IN_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[17] = DATA_IN_expected_prev[17];
	end
	if (
		( DATA_IN_expected_prev[18] !== 1'bx ) && ( DATA_IN_prev[18] !== DATA_IN_expected_prev[18] )
		&& ((DATA_IN_expected_prev[18] !== last_DATA_IN_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[18] = DATA_IN_expected_prev[18];
	end
	if (
		( DATA_IN_expected_prev[19] !== 1'bx ) && ( DATA_IN_prev[19] !== DATA_IN_expected_prev[19] )
		&& ((DATA_IN_expected_prev[19] !== last_DATA_IN_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[19] = DATA_IN_expected_prev[19];
	end
	if (
		( DATA_IN_expected_prev[20] !== 1'bx ) && ( DATA_IN_prev[20] !== DATA_IN_expected_prev[20] )
		&& ((DATA_IN_expected_prev[20] !== last_DATA_IN_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[20] = DATA_IN_expected_prev[20];
	end
	if (
		( DATA_IN_expected_prev[21] !== 1'bx ) && ( DATA_IN_prev[21] !== DATA_IN_expected_prev[21] )
		&& ((DATA_IN_expected_prev[21] !== last_DATA_IN_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[21] = DATA_IN_expected_prev[21];
	end
	if (
		( DATA_IN_expected_prev[22] !== 1'bx ) && ( DATA_IN_prev[22] !== DATA_IN_expected_prev[22] )
		&& ((DATA_IN_expected_prev[22] !== last_DATA_IN_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[22] = DATA_IN_expected_prev[22];
	end
	if (
		( DATA_IN_expected_prev[23] !== 1'bx ) && ( DATA_IN_prev[23] !== DATA_IN_expected_prev[23] )
		&& ((DATA_IN_expected_prev[23] !== last_DATA_IN_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[23] = DATA_IN_expected_prev[23];
	end
	if (
		( DATA_IN_expected_prev[24] !== 1'bx ) && ( DATA_IN_prev[24] !== DATA_IN_expected_prev[24] )
		&& ((DATA_IN_expected_prev[24] !== last_DATA_IN_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[24] = DATA_IN_expected_prev[24];
	end
	if (
		( DATA_IN_expected_prev[25] !== 1'bx ) && ( DATA_IN_prev[25] !== DATA_IN_expected_prev[25] )
		&& ((DATA_IN_expected_prev[25] !== last_DATA_IN_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[25] = DATA_IN_expected_prev[25];
	end
	if (
		( DATA_IN_expected_prev[26] !== 1'bx ) && ( DATA_IN_prev[26] !== DATA_IN_expected_prev[26] )
		&& ((DATA_IN_expected_prev[26] !== last_DATA_IN_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[26] = DATA_IN_expected_prev[26];
	end
	if (
		( DATA_IN_expected_prev[27] !== 1'bx ) && ( DATA_IN_prev[27] !== DATA_IN_expected_prev[27] )
		&& ((DATA_IN_expected_prev[27] !== last_DATA_IN_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[27] = DATA_IN_expected_prev[27];
	end
	if (
		( DATA_IN_expected_prev[28] !== 1'bx ) && ( DATA_IN_prev[28] !== DATA_IN_expected_prev[28] )
		&& ((DATA_IN_expected_prev[28] !== last_DATA_IN_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[28] = DATA_IN_expected_prev[28];
	end
	if (
		( DATA_IN_expected_prev[29] !== 1'bx ) && ( DATA_IN_prev[29] !== DATA_IN_expected_prev[29] )
		&& ((DATA_IN_expected_prev[29] !== last_DATA_IN_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[29] = DATA_IN_expected_prev[29];
	end
	if (
		( DATA_IN_expected_prev[30] !== 1'bx ) && ( DATA_IN_prev[30] !== DATA_IN_expected_prev[30] )
		&& ((DATA_IN_expected_prev[30] !== last_DATA_IN_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[30] = DATA_IN_expected_prev[30];
	end
	if (
		( DATA_IN_expected_prev[31] !== 1'bx ) && ( DATA_IN_prev[31] !== DATA_IN_expected_prev[31] )
		&& ((DATA_IN_expected_prev[31] !== last_DATA_IN_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_IN[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_IN_exp[31] = DATA_IN_expected_prev[31];
	end
	if (
		( DATA_VALID_expected_prev !== 1'bx ) && ( DATA_VALID_prev !== DATA_VALID_expected_prev )
		&& ((DATA_VALID_expected_prev !== last_DATA_VALID_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_VALID :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_VALID_expected_prev);
		$display ("     Real value = %b", DATA_VALID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_VALID_exp = DATA_VALID_expected_prev;
	end
	if (
		( START_expected_prev !== 1'bx ) && ( START_prev !== START_expected_prev )
		&& ((START_expected_prev !== last_START_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port START :: @time = %t",  $realtime);
		$display ("     Expected value = %b", START_expected_prev);
		$display ("     Real value = %b", START_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_START_exp = START_expected_prev;
	end
	if (
		( load_counter_expected_prev[0] !== 1'bx ) && ( load_counter_prev[0] !== load_counter_expected_prev[0] )
		&& ((load_counter_expected_prev[0] !== last_load_counter_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port load_counter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", load_counter_expected_prev);
		$display ("     Real value = %b", load_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_load_counter_exp[0] = load_counter_expected_prev[0];
	end
	if (
		( load_counter_expected_prev[1] !== 1'bx ) && ( load_counter_prev[1] !== load_counter_expected_prev[1] )
		&& ((load_counter_expected_prev[1] !== last_load_counter_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port load_counter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", load_counter_expected_prev);
		$display ("     Real value = %b", load_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_load_counter_exp[1] = load_counter_expected_prev[1];
	end
	if (
		( load_counter_expected_prev[2] !== 1'bx ) && ( load_counter_prev[2] !== load_counter_expected_prev[2] )
		&& ((load_counter_expected_prev[2] !== last_load_counter_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port load_counter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", load_counter_expected_prev);
		$display ("     Real value = %b", load_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_load_counter_exp[2] = load_counter_expected_prev[2];
	end
	if (
		( load_counter_expected_prev[3] !== 1'bx ) && ( load_counter_prev[3] !== load_counter_expected_prev[3] )
		&& ((load_counter_expected_prev[3] !== last_load_counter_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port load_counter[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", load_counter_expected_prev);
		$display ("     Real value = %b", load_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_load_counter_exp[3] = load_counter_expected_prev[3];
	end
	if (
		( oData_expected_prev[0] !== 1'bx ) && ( oData_prev[0] !== oData_expected_prev[0] )
		&& ((oData_expected_prev[0] !== last_oData_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[0] = oData_expected_prev[0];
	end
	if (
		( oData_expected_prev[1] !== 1'bx ) && ( oData_prev[1] !== oData_expected_prev[1] )
		&& ((oData_expected_prev[1] !== last_oData_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[1] = oData_expected_prev[1];
	end
	if (
		( oData_expected_prev[2] !== 1'bx ) && ( oData_prev[2] !== oData_expected_prev[2] )
		&& ((oData_expected_prev[2] !== last_oData_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[2] = oData_expected_prev[2];
	end
	if (
		( oData_expected_prev[3] !== 1'bx ) && ( oData_prev[3] !== oData_expected_prev[3] )
		&& ((oData_expected_prev[3] !== last_oData_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[3] = oData_expected_prev[3];
	end
	if (
		( oData_expected_prev[4] !== 1'bx ) && ( oData_prev[4] !== oData_expected_prev[4] )
		&& ((oData_expected_prev[4] !== last_oData_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[4] = oData_expected_prev[4];
	end
	if (
		( oData_expected_prev[5] !== 1'bx ) && ( oData_prev[5] !== oData_expected_prev[5] )
		&& ((oData_expected_prev[5] !== last_oData_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[5] = oData_expected_prev[5];
	end
	if (
		( oData_expected_prev[6] !== 1'bx ) && ( oData_prev[6] !== oData_expected_prev[6] )
		&& ((oData_expected_prev[6] !== last_oData_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[6] = oData_expected_prev[6];
	end
	if (
		( oData_expected_prev[7] !== 1'bx ) && ( oData_prev[7] !== oData_expected_prev[7] )
		&& ((oData_expected_prev[7] !== last_oData_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[7] = oData_expected_prev[7];
	end
	if (
		( oData_expected_prev[8] !== 1'bx ) && ( oData_prev[8] !== oData_expected_prev[8] )
		&& ((oData_expected_prev[8] !== last_oData_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[8] = oData_expected_prev[8];
	end
	if (
		( oData_expected_prev[9] !== 1'bx ) && ( oData_prev[9] !== oData_expected_prev[9] )
		&& ((oData_expected_prev[9] !== last_oData_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[9] = oData_expected_prev[9];
	end
	if (
		( oData_expected_prev[10] !== 1'bx ) && ( oData_prev[10] !== oData_expected_prev[10] )
		&& ((oData_expected_prev[10] !== last_oData_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[10] = oData_expected_prev[10];
	end
	if (
		( oData_expected_prev[11] !== 1'bx ) && ( oData_prev[11] !== oData_expected_prev[11] )
		&& ((oData_expected_prev[11] !== last_oData_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[11] = oData_expected_prev[11];
	end
	if (
		( oData_expected_prev[12] !== 1'bx ) && ( oData_prev[12] !== oData_expected_prev[12] )
		&& ((oData_expected_prev[12] !== last_oData_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[12] = oData_expected_prev[12];
	end
	if (
		( oData_expected_prev[13] !== 1'bx ) && ( oData_prev[13] !== oData_expected_prev[13] )
		&& ((oData_expected_prev[13] !== last_oData_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[13] = oData_expected_prev[13];
	end
	if (
		( oData_expected_prev[14] !== 1'bx ) && ( oData_prev[14] !== oData_expected_prev[14] )
		&& ((oData_expected_prev[14] !== last_oData_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[14] = oData_expected_prev[14];
	end
	if (
		( oData_expected_prev[15] !== 1'bx ) && ( oData_prev[15] !== oData_expected_prev[15] )
		&& ((oData_expected_prev[15] !== last_oData_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[15] = oData_expected_prev[15];
	end
	if (
		( oData_expected_prev[16] !== 1'bx ) && ( oData_prev[16] !== oData_expected_prev[16] )
		&& ((oData_expected_prev[16] !== last_oData_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[16] = oData_expected_prev[16];
	end
	if (
		( oData_expected_prev[17] !== 1'bx ) && ( oData_prev[17] !== oData_expected_prev[17] )
		&& ((oData_expected_prev[17] !== last_oData_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[17] = oData_expected_prev[17];
	end
	if (
		( oData_expected_prev[18] !== 1'bx ) && ( oData_prev[18] !== oData_expected_prev[18] )
		&& ((oData_expected_prev[18] !== last_oData_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[18] = oData_expected_prev[18];
	end
	if (
		( oData_expected_prev[19] !== 1'bx ) && ( oData_prev[19] !== oData_expected_prev[19] )
		&& ((oData_expected_prev[19] !== last_oData_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[19] = oData_expected_prev[19];
	end
	if (
		( oData_expected_prev[20] !== 1'bx ) && ( oData_prev[20] !== oData_expected_prev[20] )
		&& ((oData_expected_prev[20] !== last_oData_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[20] = oData_expected_prev[20];
	end
	if (
		( oData_expected_prev[21] !== 1'bx ) && ( oData_prev[21] !== oData_expected_prev[21] )
		&& ((oData_expected_prev[21] !== last_oData_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[21] = oData_expected_prev[21];
	end
	if (
		( oData_expected_prev[22] !== 1'bx ) && ( oData_prev[22] !== oData_expected_prev[22] )
		&& ((oData_expected_prev[22] !== last_oData_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[22] = oData_expected_prev[22];
	end
	if (
		( oData_expected_prev[23] !== 1'bx ) && ( oData_prev[23] !== oData_expected_prev[23] )
		&& ((oData_expected_prev[23] !== last_oData_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[23] = oData_expected_prev[23];
	end
	if (
		( oData_expected_prev[24] !== 1'bx ) && ( oData_prev[24] !== oData_expected_prev[24] )
		&& ((oData_expected_prev[24] !== last_oData_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[24] = oData_expected_prev[24];
	end
	if (
		( oData_expected_prev[25] !== 1'bx ) && ( oData_prev[25] !== oData_expected_prev[25] )
		&& ((oData_expected_prev[25] !== last_oData_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[25] = oData_expected_prev[25];
	end
	if (
		( oData_expected_prev[26] !== 1'bx ) && ( oData_prev[26] !== oData_expected_prev[26] )
		&& ((oData_expected_prev[26] !== last_oData_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[26] = oData_expected_prev[26];
	end
	if (
		( oData_expected_prev[27] !== 1'bx ) && ( oData_prev[27] !== oData_expected_prev[27] )
		&& ((oData_expected_prev[27] !== last_oData_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[27] = oData_expected_prev[27];
	end
	if (
		( oData_expected_prev[28] !== 1'bx ) && ( oData_prev[28] !== oData_expected_prev[28] )
		&& ((oData_expected_prev[28] !== last_oData_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[28] = oData_expected_prev[28];
	end
	if (
		( oData_expected_prev[29] !== 1'bx ) && ( oData_prev[29] !== oData_expected_prev[29] )
		&& ((oData_expected_prev[29] !== last_oData_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[29] = oData_expected_prev[29];
	end
	if (
		( oData_expected_prev[30] !== 1'bx ) && ( oData_prev[30] !== oData_expected_prev[30] )
		&& ((oData_expected_prev[30] !== last_oData_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[30] = oData_expected_prev[30];
	end
	if (
		( oData_expected_prev[31] !== 1'bx ) && ( oData_prev[31] !== oData_expected_prev[31] )
		&& ((oData_expected_prev[31] !== last_oData_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oData[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oData_expected_prev);
		$display ("     Real value = %b", oData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_oData_exp[31] = oData_expected_prev[31];
	end
	if (
		( state_ctrl_expected_prev !== 1'bx ) && ( state_ctrl_prev !== state_ctrl_expected_prev )
		&& ((state_ctrl_expected_prev !== last_state_ctrl_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_ctrl :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_ctrl_expected_prev);
		$display ("     Real value = %b", state_ctrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_state_ctrl_exp = state_ctrl_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#80000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module IP_wrapper_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] iAddress;
reg iChipselect_n;
reg iClk;
reg [31:0] iData;
reg iRead_n;
reg iReset_n;
reg iWrite_n;
// wires                                               
wire [31:0] DATA_IN;
wire DATA_VALID;
wire START;
wire [3:0] load_counter;
wire [31:0] oData;
wire state_ctrl;

wire sampler;                             

// assign statements (if any)                          
IP_wrapper i1 (
// port map - connection between master ports and signals/registers   
	.DATA_IN(DATA_IN),
	.DATA_VALID(DATA_VALID),
	.START(START),
	.iAddress(iAddress),
	.iChipselect_n(iChipselect_n),
	.iClk(iClk),
	.iData(iData),
	.iRead_n(iRead_n),
	.iReset_n(iReset_n),
	.iWrite_n(iWrite_n),
	.load_counter(load_counter),
	.oData(oData),
	.state_ctrl(state_ctrl)
);

// iClk
always
begin
	iClk = 1'b0;
	iClk = #25000 1'b1;
	#25000;
end 

// iReset_n
initial
begin
	iReset_n = 1'b0;
	iReset_n = #50000 1'b1;
end 

// iChipselect_n
initial
begin
	iChipselect_n = 1'b0;
	iChipselect_n = #900000 1'b1;
	iChipselect_n = #700000 1'b0;
	iChipselect_n = #77120000 1'b1;
end 

// iWrite_n
initial
begin
	iWrite_n = 1'b0;
	iWrite_n = #900000 1'b1;
	iWrite_n = #28500000 1'b0;
	iWrite_n = #100000 1'b1;
	iWrite_n = #50000 1'b0;
	iWrite_n = #100000 1'b1;
	iWrite_n = #50000 1'b0;
	iWrite_n = #1600000 1'b1;
end 

// iRead_n
initial
begin
	iRead_n = 1'b1;
	iRead_n = #1600000 1'b0;
	iRead_n = #77120000 1'b1;
end 
// iAddress[ 4 ]
initial
begin
	iAddress[4] = 1'b0;
	iAddress[4] = #850000 1'b1;
	iAddress[4] = #50000 1'b0;
	iAddress[4] = #8700000 1'b1;
	iAddress[4] = #19800000 1'b0;
	iAddress[4] = #100000 1'b1;
	iAddress[4] = #50000 1'b0;
	iAddress[4] = #1650000 1'b1;
	iAddress[4] = #500000 1'b0;
	iAddress[4] = #3260000 1'b1;
end 
// iAddress[ 3 ]
initial
begin
	iAddress[3] = 1'b0;
	iAddress[3] = #450000 1'b1;
	iAddress[3] = #400000 1'b0;
	iAddress[3] = #6230000 1'b1;
	iAddress[3] = #21820000 1'b0;
	iAddress[3] = #300000 1'b1;
	iAddress[3] = #200000 1'b0;
	iAddress[3] = #100000 1'b1;
	iAddress[3] = #50000 1'b0;
	iAddress[3] = #850000 1'b1;
	iAddress[3] = #800000 1'b0;
	iAddress[3] = #3760000 1'b1;
	iAddress[3] = #23240000 1'b0;
	iAddress[3] = #600000 1'b1;
end 
// iAddress[ 2 ]
initial
begin
	iAddress[2] = 1'b0;
	iAddress[2] = #250000 1'b1;
	iAddress[2] = #200000 1'b0;
	iAddress[2] = #200000 1'b1;
	iAddress[2] = #200000 1'b0;
	iAddress[2] = #2230000 1'b1;
	iAddress[2] = #4000000 1'b0;
	iAddress[2] = #21920000 1'b1;
	iAddress[2] = #200000 1'b0;
	iAddress[2] = #800000 1'b1;
	iAddress[2] = #400000 1'b0;
	iAddress[2] = #400000 1'b1;
	iAddress[2] = #400000 1'b0;
	iAddress[2] = #400000 1'b1;
	iAddress[2] = #100000 1'b0;
	iAddress[2] = #26700000 1'b1;
	iAddress[2] = #400000 1'b0;
end 
// iAddress[ 1 ]
initial
begin
	iAddress[1] = 1'b0;
	iAddress[1] = #150000 1'b1;
	iAddress[1] = #100000 1'b0;
	# 100000;
	repeat(2)
	begin
		iAddress[1] = 1'b1;
		iAddress[1] = #100000 1'b0;
		# 100000;
	end
	iAddress[1] = 1'b1;
	iAddress[1] = #100000 1'b0;
	iAddress[1] = #350000 1'b1;
	iAddress[1] = #1880000 1'b0;
	iAddress[1] = #2000000 1'b1;
	iAddress[1] = #2000000 1'b0;
	iAddress[1] = #2000000 1'b1;
	iAddress[1] = #19920000 1'b0;
	iAddress[1] = #100000 1'b1;
	iAddress[1] = #100000 1'b0;
	iAddress[1] = #100000 1'b1;
	iAddress[1] = #100000 1'b0;
	iAddress[1] = #100000 1'b1;
	iAddress[1] = #50000 1'b0;
	iAddress[1] = #250000 1'b1;
	iAddress[1] = #200000 1'b0;
	# 200000;
	repeat(3)
	begin
		iAddress[1] = 1'b1;
		iAddress[1] = #200000 1'b0;
		# 200000;
	end
	iAddress[1] = 1'b1;
	iAddress[1] = #200000 1'b0;
	iAddress[1] = #3360000 1'b1;
	iAddress[1] = #23440000 1'b0;
	iAddress[1] = #200000 1'b1;
	iAddress[1] = #200000 1'b0;
	iAddress[1] = #200000 1'b1;
end 
// iAddress[ 0 ]
initial
begin
	iAddress[0] = 1'b0;
	# 100000;
	repeat(8)
	begin
		iAddress[0] = 1'b1;
		iAddress[0] = #50000 1'b0;
		# 50000;
	end
	iAddress[0] = 1'b1;
	iAddress[0] = #300000 1'b0;
	# 880000;
	repeat(3)
	begin
		iAddress[0] = 1'b1;
		iAddress[0] = #1000000 1'b0;
		# 1000000;
	end
	iAddress[0] = 1'b1;
	iAddress[0] = #1000000 1'b0;
	iAddress[0] = #19870000 1'b1;
	# 50000;
	repeat(2)
	begin
		iAddress[0] = 1'b0;
		iAddress[0] = #50000 1'b1;
		# 50000;
	end
	iAddress[0] = 1'b0;
	iAddress[0] = #50000 1'b1;
	iAddress[0] = #50000 1'b0;
	iAddress[0] = #400000 1'b1;
	iAddress[0] = #100000 1'b0;
	# 100000;
	repeat(8)
	begin
		iAddress[0] = 1'b1;
		iAddress[0] = #100000 1'b0;
		# 100000;
	end
	iAddress[0] = 1'b1;
	iAddress[0] = #100000 1'b0;
	iAddress[0] = #26700000 1'b1;
	# 100000;
	repeat(3)
	begin
		iAddress[0] = 1'b0;
		iAddress[0] = #100000 1'b1;
		# 100000;
	end
	iAddress[0] = 1'b0;
end 
// iData[ 31 ]
initial
begin
	iData[31] = 1'b0;
end 
// iData[ 30 ]
initial
begin
	iData[30] = 1'b0;
	iData[30] = #100000 1'b1;
	iData[30] = #800000 1'b0;
	iData[30] = #28800000 1'b1;
	iData[30] = #500000 1'b0;
end 
// iData[ 29 ]
initial
begin
	iData[29] = 1'b0;
	iData[29] = #100000 1'b1;
	iData[29] = #800000 1'b0;
	iData[29] = #28800000 1'b1;
	iData[29] = #500000 1'b0;
end 
// iData[ 28 ]
initial
begin
	iData[28] = 1'b0;
	iData[28] = #150000 1'b1;
	iData[28] = #50000 1'b0;
	iData[28] = #100000 1'b1;
	iData[28] = #50000 1'b0;
	iData[28] = #50000 1'b1;
	iData[28] = #50000 1'b0;
	iData[28] = #29250000 1'b1;
	iData[28] = #100000 1'b0;
end 
// iData[ 27 ]
initial
begin
	iData[27] = 1'b0;
	iData[27] = #250000 1'b1;
	iData[27] = #50000 1'b0;
	iData[27] = #150000 1'b1;
	iData[27] = #50000 1'b0;
	iData[27] = #29400000 1'b1;
	iData[27] = #100000 1'b0;
end 
// iData[ 26 ]
initial
begin
	iData[26] = 1'b0;
	iData[26] = #400000 1'b1;
	iData[26] = #50000 1'b0;
	iData[26] = #50000 1'b1;
	iData[26] = #50000 1'b0;
	iData[26] = #50000 1'b1;
	iData[26] = #50000 1'b0;
	iData[26] = #50000 1'b1;
	iData[26] = #100000 1'b0;
	iData[26] = #50000 1'b1;
	iData[26] = #50000 1'b0;
	iData[26] = #28900000 1'b1;
	iData[26] = #100000 1'b0;
end 
// iData[ 25 ]
initial
begin
	iData[25] = 1'b0;
	iData[25] = #300000 1'b1;
	iData[25] = #50000 1'b0;
	iData[25] = #50000 1'b1;
	iData[25] = #350000 1'b0;
	iData[25] = #50000 1'b1;
	iData[25] = #100000 1'b0;
	iData[25] = #28800000 1'b1;
	iData[25] = #200000 1'b0;
	iData[25] = #100000 1'b1;
	iData[25] = #100000 1'b0;
end 
// iData[ 24 ]
initial
begin
	iData[24] = 1'b0;
	iData[24] = #100000 1'b1;
	iData[24] = #50000 1'b0;
	iData[24] = #50000 1'b1;
	iData[24] = #250000 1'b0;
	iData[24] = #29250000 1'b1;
	iData[24] = #300000 1'b0;
	iData[24] = #100000 1'b1;
	iData[24] = #100000 1'b0;
end 
// iData[ 23 ]
initial
begin
	iData[23] = 1'b0;
	iData[23] = #30100000 1'b1;
	iData[23] = #100000 1'b0;
end 
// iData[ 22 ]
initial
begin
	iData[22] = 1'b0;
	iData[22] = #100000 1'b1;
	iData[22] = #800000 1'b0;
	iData[22] = #28800000 1'b1;
	iData[22] = #400000 1'b0;
end 
// iData[ 21 ]
initial
begin
	iData[21] = 1'b0;
	iData[21] = #100000 1'b1;
	iData[21] = #800000 1'b0;
	iData[21] = #28800000 1'b1;
	iData[21] = #400000 1'b0;
end 
// iData[ 20 ]
initial
begin
	iData[20] = 1'b0;
	iData[20] = #200000 1'b1;
	iData[20] = #50000 1'b0;
	iData[20] = #200000 1'b1;
	iData[20] = #50000 1'b0;
	iData[20] = #300000 1'b1;
	iData[20] = #50000 1'b0;
	iData[20] = #28850000 1'b1;
	iData[20] = #100000 1'b0;
	iData[20] = #100000 1'b1;
	iData[20] = #100000 1'b0;
end 
// iData[ 19 ]
initial
begin
	iData[19] = 1'b0;
	iData[19] = #150000 1'b1;
	iData[19] = #50000 1'b0;
	iData[19] = #550000 1'b1;
	iData[19] = #50000 1'b0;
end 
// iData[ 18 ]
initial
begin
	iData[18] = 1'b0;
	iData[18] = #100000 1'b1;
	iData[18] = #50000 1'b0;
	iData[18] = #50000 1'b1;
	iData[18] = #50000 1'b0;
	iData[18] = #50000 1'b1;
	iData[18] = #200000 1'b0;
	iData[18] = #150000 1'b1;
	iData[18] = #50000 1'b0;
	iData[18] = #100000 1'b1;
	iData[18] = #50000 1'b0;
end 
// iData[ 17 ]
initial
begin
	iData[17] = 1'b0;
	iData[17] = #200000 1'b1;
	iData[17] = #50000 1'b0;
	iData[17] = #50000 1'b1;
	iData[17] = #200000 1'b0;
	iData[17] = #150000 1'b1;
	iData[17] = #100000 1'b0;
	iData[17] = #50000 1'b1;
	iData[17] = #100000 1'b0;
	iData[17] = #28900000 1'b1;
	iData[17] = #100000 1'b0;
end 
// iData[ 16 ]
initial
begin
	iData[16] = 1'b0;
	iData[16] = #150000 1'b1;
	iData[16] = #150000 1'b0;
	iData[16] = #150000 1'b1;
	iData[16] = #200000 1'b0;
	iData[16] = #100000 1'b1;
	iData[16] = #100000 1'b0;
	iData[16] = #29150000 1'b1;
	iData[16] = #100000 1'b0;
end 
// iData[ 15 ]
initial
begin
	iData[15] = 1'b0;
end 
// iData[ 14 ]
initial
begin
	iData[14] = 1'b0;
	iData[14] = #100000 1'b1;
	iData[14] = #800000 1'b0;
	iData[14] = #28800000 1'b1;
	iData[14] = #400000 1'b0;
end 
// iData[ 13 ]
initial
begin
	iData[13] = 1'b0;
	iData[13] = #100000 1'b1;
	iData[13] = #800000 1'b0;
	iData[13] = #28800000 1'b1;
	iData[13] = #400000 1'b0;
end 
// iData[ 12 ]
initial
begin
	iData[12] = 1'b0;
	iData[12] = #300000 1'b1;
	iData[12] = #50000 1'b0;
	iData[12] = #150000 1'b1;
	iData[12] = #50000 1'b0;
	iData[12] = #100000 1'b1;
	iData[12] = #50000 1'b0;
	iData[12] = #50000 1'b1;
	iData[12] = #50000 1'b0;
	iData[12] = #50000 1'b1;
	iData[12] = #50000 1'b0;
	iData[12] = #29000000 1'b1;
	iData[12] = #200000 1'b0;
end 
// iData[ 11 ]
initial
begin
	iData[11] = 1'b0;
	iData[11] = #350000 1'b1;
	iData[11] = #100000 1'b0;
	iData[11] = #150000 1'b1;
	iData[11] = #50000 1'b0;
	iData[11] = #150000 1'b1;
	iData[11] = #50000 1'b0;
	iData[11] = #28850000 1'b1;
	iData[11] = #100000 1'b0;
end 
// iData[ 10 ]
initial
begin
	iData[10] = 1'b0;
	iData[10] = #150000 1'b1;
	iData[10] = #150000 1'b0;
	iData[10] = #250000 1'b1;
	iData[10] = #50000 1'b0;
	iData[10] = #50000 1'b1;
	iData[10] = #50000 1'b0;
	iData[10] = #50000 1'b1;
	iData[10] = #50000 1'b0;
	iData[10] = #50000 1'b1;
	iData[10] = #50000 1'b0;
	iData[10] = #28800000 1'b1;
	iData[10] = #100000 1'b0;
	iData[10] = #100000 1'b1;
	iData[10] = #200000 1'b0;
end 
// iData[ 9 ]
initial
begin
	iData[9] = 1'b0;
	iData[9] = #100000 1'b1;
	iData[9] = #300000 1'b0;
	iData[9] = #50000 1'b1;
	iData[9] = #50000 1'b0;
	iData[9] = #50000 1'b1;
	iData[9] = #150000 1'b0;
	iData[9] = #50000 1'b1;
	iData[9] = #50000 1'b0;
	iData[9] = #28900000 1'b1;
	iData[9] = #100000 1'b0;
	iData[9] = #100000 1'b1;
	iData[9] = #200000 1'b0;
	iData[9] = #1100000 1'b1;
	iData[9] = #100000 1'b0;
end 
// iData[ 8 ]
initial
begin
	iData[8] = 1'b0;
	iData[8] = #300000 1'b1;
	iData[8] = #50000 1'b0;
	iData[8] = #50000 1'b1;
	iData[8] = #50000 1'b0;
	iData[8] = #200000 1'b1;
	iData[8] = #250000 1'b0;
	iData[8] = #28800000 1'b1;
	iData[8] = #400000 1'b0;
end 
// iData[ 7 ]
initial
begin
	iData[7] = 1'b0;
	iData[7] = #31200000 1'b1;
	iData[7] = #100000 1'b0;
end 
// iData[ 6 ]
initial
begin
	iData[6] = 1'b0;
	iData[6] = #100000 1'b1;
	iData[6] = #800000 1'b0;
	iData[6] = #28800000 1'b1;
	iData[6] = #400000 1'b0;
end 
// iData[ 5 ]
initial
begin
	iData[5] = 1'b0;
	iData[5] = #100000 1'b1;
	iData[5] = #1100000 1'b0;
	iData[5] = #27100000 1'b1;
	iData[5] = #150000 1'b0;
	iData[5] = #1250000 1'b1;
	iData[5] = #400000 1'b0;
end 
// iData[ 4 ]
initial
begin
	iData[4] = 1'b0;
	iData[4] = #50000 1'b1;
	iData[4] = #100000 1'b0;
	iData[4] = #50000 1'b1;
	iData[4] = #50000 1'b0;
	iData[4] = #200000 1'b1;
	iData[4] = #150000 1'b0;
	iData[4] = #26900000 1'b1;
	iData[4] = #800000 1'b0;
	iData[4] = #1100000 1'b1;
	iData[4] = #100000 1'b0;
	iData[4] = #50000 1'b1;
	iData[4] = #150000 1'b0;
end 
// iData[ 3 ]
initial
begin
	iData[3] = 1'b0;
	iData[3] = #300000 1'b1;
	iData[3] = #50000 1'b0;
	iData[3] = #150000 1'b1;
	iData[3] = #50000 1'b0;
	iData[3] = #50000 1'b1;
	iData[3] = #100000 1'b0;
	iData[3] = #50000 1'b1;
	iData[3] = #100000 1'b0;
	iData[3] = #27050000 1'b1;
	iData[3] = #400000 1'b0;
	iData[3] = #1400000 1'b1;
	iData[3] = #100000 1'b0;
	iData[3] = #1400000 1'b1;
	iData[3] = #100000 1'b0;
end 
// iData[ 2 ]
initial
begin
	iData[2] = 1'b0;
	iData[2] = #100000 1'b1;
	iData[2] = #50000 1'b0;
	iData[2] = #300000 1'b1;
	iData[2] = #50000 1'b0;
	iData[2] = #50000 1'b1;
	iData[2] = #50000 1'b0;
	iData[2] = #200000 1'b1;
	iData[2] = #50000 1'b0;
	iData[2] = #250000 1'b1;
	iData[2] = #100000 1'b0;
	iData[2] = #26500000 1'b1;
	iData[2] = #200000 1'b0;
	iData[2] = #200000 1'b1;
	iData[2] = #200000 1'b0;
	iData[2] = #1500000 1'b1;
	iData[2] = #300000 1'b0;
end 
// iData[ 1 ]
initial
begin
	iData[1] = 1'b0;
	iData[1] = #100000 1'b1;
	iData[1] = #100000 1'b0;
	iData[1] = #50000 1'b1;
	iData[1] = #150000 1'b0;
	iData[1] = #50000 1'b1;
	iData[1] = #50000 1'b0;
	iData[1] = #50000 1'b1;
	iData[1] = #50000 1'b0;
	iData[1] = #150000 1'b1;
	iData[1] = #100000 1'b0;
	iData[1] = #150000 1'b1;
	iData[1] = #100000 1'b0;
	iData[1] = #26500000 1'b1;
	# 100000;
	repeat(3)
	begin
		iData[1] = 1'b0;
		iData[1] = #100000 1'b1;
		# 100000;
	end
	iData[1] = 1'b0;
	iData[1] = #100000 1'b1;
	iData[1] = #50000 1'b0;
	iData[1] = #1350000 1'b1;
	iData[1] = #300000 1'b0;
end 
// iData[ 0 ]
initial
begin
	iData[0] = 1'b0;
	iData[0] = #50000 1'b1;
	iData[0] = #100000 1'b0;
	iData[0] = #150000 1'b1;
	iData[0] = #50000 1'b0;
	iData[0] = #50000 1'b1;
	iData[0] = #50000 1'b0;
	iData[0] = #100000 1'b1;
	iData[0] = #200000 1'b0;
	iData[0] = #50000 1'b1;
	iData[0] = #100000 1'b0;
	iData[0] = #50000 1'b1;
	# 50000;
	repeat(2)
	begin
		iData[0] = 1'b0;
		iData[0] = #50000 1'b1;
		# 50000;
	end
	iData[0] = 1'b0;
	iData[0] = #26250000 1'b1;
	# 50000;
	repeat(9)
	begin
		iData[0] = 1'b0;
		iData[0] = #50000 1'b1;
		# 50000;
	end
	iData[0] = 1'b0;
	iData[0] = #1150000 1'b1;
	iData[0] = #550000 1'b0;
end 

IP_wrapper_vlg_sample_tst tb_sample (
	.iAddress(iAddress),
	.iChipselect_n(iChipselect_n),
	.iClk(iClk),
	.iData(iData),
	.iRead_n(iRead_n),
	.iReset_n(iReset_n),
	.iWrite_n(iWrite_n),
	.sampler_tx(sampler)
);

IP_wrapper_vlg_check_tst tb_out(
	.DATA_IN(DATA_IN),
	.DATA_VALID(DATA_VALID),
	.START(START),
	.load_counter(load_counter),
	.oData(oData),
	.state_ctrl(state_ctrl),
	.sampler_rx(sampler)
);
endmodule

