module sha256_ip_top (
    input wire          clk,                // Clock hệ thống
    input wire          reset_n,            // Reset active-low
    input wire          start,   
    
    input wire [31:0]   message_block_word_in, // Dữ liệu message word từ bên ngoài (ví dụ: Avalon Wrapper)
    input wire          message_word_valid, // Báo message_block_word_in hợp lệ

    output wire [255:0] final_hash,         // Kết quả hash cuối cùng
    output wire         ip_is_busy,         // Báo IP đang bận
    output wire         ip_is_done,         // Báo IP đã hoàn thành
    output wire         request_next_message_word // Yêu cầu message word tiếp theo từ wrapper
    // Thêm các output debug nếu cần để testbench theo dõi
    // Ví dụ:
    // output wire [5:0] debug_controller_round_t,
    // output wire [3:0] debug_compression_state,
    // output wire [1:0] debug_scheduler_calc_cycle
);

    // --- Instantiate Controller ---
    // Các tín hiệu giao tiếp với controller sẽ được nối ở đây
    // Controller sẽ tự quản lý các tín hiệu đến scheduler và compression

    controller u_controller (
        .clk(clk),
        .reset_n(reset_n),
        .start(start_processing), // global_start của controller
        .wrapper_data(message_block_word_in),
        .wrapper_data_valid(message_word_valid),
        .wrapper_data_request(request_next_message_word),

        // Các port đến scheduler và compression được controller quản lý nội bộ
        // và các output cuối cùng của IP
        .final_hash_from_comp(final_hash) // Đổi tên để khớp với output của controller

        // Nối các output debug từ controller ra đây nếu có
        // .debug_round_t(debug_controller_round_t),
        // .debug_comp_state(debug_compression_state),
        // .debug_sch_calc_cycle(debug_scheduler_calc_cycle)
    );
    
    message_compression u_mess_comp (
        .clk(clk),
        .rst_n(reset_n),
        .start(start),
        .Wt_in(message_block_word_in),
        .H_final_out(final_hash_from_comp)
    );


endmodule